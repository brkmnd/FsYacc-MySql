// Implementation file for parser generated by fsyacc
module MbSqlParser
#nowarn "64";; // turn off warnings that type variables used in production annotations are instantiated to concrete type
open Microsoft.FSharp.Text.Lexing
open Microsoft.FSharp.Text.Parsing.ParseHelpers
# 24 "parser.yy"


# 9 "parser.fs"
// This type is the type of tokens accepted by the parser
type token = 
  | VAL_ERROR
  | VAL_EMPTY
  | VAL_BOOL
  | VAL_DUAL
  | VAL_UNKNOWN
  | VAL_FALSE
  | VAL_TRUE
  | VAL_NULL
  | VAL_STRING of (string)
  | VAL_BIN of (string)
  | VAL_HEX of (string)
  | VAL_NUM of (string)
  | VAL_FLOAT of (string)
  | VAL_ID of (string)
  | NOKEY_NOW
  | NOKEY_NESTED
  | NOKEY_PATH
  | NOKEY_ORDINALITY
  | KEY_SQL_NO_CACHE
  | KEY_BINARY
  | KEY_DATE
  | KEY_WINDOW
  | KEY_HAVING
  | KEY_ROLLUP
  | KEY_SQL_CALC_FOUND_ROWS
  | KEY_SQL_BUFFER_RESULT
  | KEY_SQL_BIG_RESULT
  | KEY_SQL_SMALL_RESULT
  | KEY_HIGH_PRIORITY
  | KEY_PRIMARY
  | KEY_USE
  | KEY_DEFAULT
  | KEY_EXISTS
  | KEY_DISTINCT
  | KEY_PARTITION
  | KEY_COLLATE
  | KEY_CONVERT
  | KEY_CAST
  | KEY_CHAR
  | KEY_OFFSET
  | KEY_DESC
  | KEY_ASC
  | KEY_LIMIT
  | KEY_BY
  | KEY_ORDER
  | KEY_WHERE
  | KEY_FOR
  | KEY_COLUMNS
  | KEY_UNIQUE
  | KEY_INDEXES
  | KEY_INDEX
  | KEY_KEYS
  | KEY_KEY
  | KEY_IGNORE
  | KEY_FORCE
  | KEY_FROM
  | KEY_OUTFILE
  | KEY_ANY
  | KEY_ALL
  | KEY_IS
  | KEY_AS
  | KEY_SELECT
  | OP_AS
  | OP_GROUP
  | OP_OUTER
  | OP_JSON_TABLE
  | OP_MOD_TXT
  | OP_DIV_TXT
  | OP_NOT_TXT
  | OP_OR_TXT
  | OP_AND_TXT
  | OP_IN
  | OP_BETWEEN
  | OP_SOUNDS
  | OP_BOR
  | OP_BAND
  | OP_UP
  | OP_SHIFT_LEFT
  | OP_SHIFT_RIGHT
  | OP_EQ
  | OP_EQ2
  | OP_NEQ
  | OP_NEQ2
  | OP_GT
  | OP_LT
  | OP_GEQ
  | OP_LEQ
  | OP_NOT
  | OP_OR
  | OP_XOR
  | OP_AND
  | OP_TILDE
  | OP_LIKE
  | OP_BANG
  | OP_PLUS
  | OP_MINUS
  | OP_DIV
  | OP_TIMES
  | OP_PERC
  | OP_DOT
  | OP_JOIN
  | OP_INNER
  | OP_CROSS
  | OP_STRAIGHT_JOIN
  | OP_NATURAL
  | OP_LEFT
  | OP_RIGHT
  | OP_ON
  | OP_USING
  | OP_INTO
  | OP_UNION
  | PAR_LPAR
  | PAR_RPAR
  | PAR_LBRACE
  | PAR_RBRACE
  | DELIM_SCOLON
  | DELIM_COMMA
  | END_OF_INPUT
// This type is used to give symbolic names to token indexes, useful for error messages
type tokenId = 
    | TOKEN_VAL_ERROR
    | TOKEN_VAL_EMPTY
    | TOKEN_VAL_BOOL
    | TOKEN_VAL_DUAL
    | TOKEN_VAL_UNKNOWN
    | TOKEN_VAL_FALSE
    | TOKEN_VAL_TRUE
    | TOKEN_VAL_NULL
    | TOKEN_VAL_STRING
    | TOKEN_VAL_BIN
    | TOKEN_VAL_HEX
    | TOKEN_VAL_NUM
    | TOKEN_VAL_FLOAT
    | TOKEN_VAL_ID
    | TOKEN_NOKEY_NOW
    | TOKEN_NOKEY_NESTED
    | TOKEN_NOKEY_PATH
    | TOKEN_NOKEY_ORDINALITY
    | TOKEN_KEY_SQL_NO_CACHE
    | TOKEN_KEY_BINARY
    | TOKEN_KEY_DATE
    | TOKEN_KEY_WINDOW
    | TOKEN_KEY_HAVING
    | TOKEN_KEY_ROLLUP
    | TOKEN_KEY_SQL_CALC_FOUND_ROWS
    | TOKEN_KEY_SQL_BUFFER_RESULT
    | TOKEN_KEY_SQL_BIG_RESULT
    | TOKEN_KEY_SQL_SMALL_RESULT
    | TOKEN_KEY_HIGH_PRIORITY
    | TOKEN_KEY_PRIMARY
    | TOKEN_KEY_USE
    | TOKEN_KEY_DEFAULT
    | TOKEN_KEY_EXISTS
    | TOKEN_KEY_DISTINCT
    | TOKEN_KEY_PARTITION
    | TOKEN_KEY_COLLATE
    | TOKEN_KEY_CONVERT
    | TOKEN_KEY_CAST
    | TOKEN_KEY_CHAR
    | TOKEN_KEY_OFFSET
    | TOKEN_KEY_DESC
    | TOKEN_KEY_ASC
    | TOKEN_KEY_LIMIT
    | TOKEN_KEY_BY
    | TOKEN_KEY_ORDER
    | TOKEN_KEY_WHERE
    | TOKEN_KEY_FOR
    | TOKEN_KEY_COLUMNS
    | TOKEN_KEY_UNIQUE
    | TOKEN_KEY_INDEXES
    | TOKEN_KEY_INDEX
    | TOKEN_KEY_KEYS
    | TOKEN_KEY_KEY
    | TOKEN_KEY_IGNORE
    | TOKEN_KEY_FORCE
    | TOKEN_KEY_FROM
    | TOKEN_KEY_OUTFILE
    | TOKEN_KEY_ANY
    | TOKEN_KEY_ALL
    | TOKEN_KEY_IS
    | TOKEN_KEY_AS
    | TOKEN_KEY_SELECT
    | TOKEN_OP_AS
    | TOKEN_OP_GROUP
    | TOKEN_OP_OUTER
    | TOKEN_OP_JSON_TABLE
    | TOKEN_OP_MOD_TXT
    | TOKEN_OP_DIV_TXT
    | TOKEN_OP_NOT_TXT
    | TOKEN_OP_OR_TXT
    | TOKEN_OP_AND_TXT
    | TOKEN_OP_IN
    | TOKEN_OP_BETWEEN
    | TOKEN_OP_SOUNDS
    | TOKEN_OP_BOR
    | TOKEN_OP_BAND
    | TOKEN_OP_UP
    | TOKEN_OP_SHIFT_LEFT
    | TOKEN_OP_SHIFT_RIGHT
    | TOKEN_OP_EQ
    | TOKEN_OP_EQ2
    | TOKEN_OP_NEQ
    | TOKEN_OP_NEQ2
    | TOKEN_OP_GT
    | TOKEN_OP_LT
    | TOKEN_OP_GEQ
    | TOKEN_OP_LEQ
    | TOKEN_OP_NOT
    | TOKEN_OP_OR
    | TOKEN_OP_XOR
    | TOKEN_OP_AND
    | TOKEN_OP_TILDE
    | TOKEN_OP_LIKE
    | TOKEN_OP_BANG
    | TOKEN_OP_PLUS
    | TOKEN_OP_MINUS
    | TOKEN_OP_DIV
    | TOKEN_OP_TIMES
    | TOKEN_OP_PERC
    | TOKEN_OP_DOT
    | TOKEN_OP_JOIN
    | TOKEN_OP_INNER
    | TOKEN_OP_CROSS
    | TOKEN_OP_STRAIGHT_JOIN
    | TOKEN_OP_NATURAL
    | TOKEN_OP_LEFT
    | TOKEN_OP_RIGHT
    | TOKEN_OP_ON
    | TOKEN_OP_USING
    | TOKEN_OP_INTO
    | TOKEN_OP_UNION
    | TOKEN_PAR_LPAR
    | TOKEN_PAR_RPAR
    | TOKEN_PAR_LBRACE
    | TOKEN_PAR_RBRACE
    | TOKEN_DELIM_SCOLON
    | TOKEN_DELIM_COMMA
    | TOKEN_END_OF_INPUT
    | TOKEN_end_of_input
    | TOKEN_error
// This type is used to give symbolic names to token indexes, useful for error messages
type nonTerminalId = 
    | NONTERM__startstart_entry
    | NONTERM_start_entry
    | NONTERM_sql_statement
    | NONTERM_opt_end_of_input
    | NONTERM_simple_statement_or_begin
    | NONTERM_simple_statement
    | NONTERM_select_stmt
    | NONTERM_row_subquery
    | NONTERM_table_subquery
    | NONTERM_subquery
    | NONTERM_query_expression
    | NONTERM_opt_order_clause
    | NONTERM_order_clause
    | NONTERM_order_list
    | NONTERM_order_expr
    | NONTERM_opt_ordering_direction
    | NONTERM_ordering_direction
    | NONTERM_opt_limit_clause
    | NONTERM_limit_clause
    | NONTERM_limit_options
    | NONTERM_limit_option
    | NONTERM_opt_simple_limit
    | NONTERM_opt_locking_clause_list
    | NONTERM_locking_clause_list
    | NONTERM_locking_clause
    | NONTERM_query_expression_body
    | NONTERM_union_option
    | NONTERM_query_expression_parens
    | NONTERM_query_primary
    | NONTERM_query_specification
    | NONTERM_select_options
    | NONTERM_select_option_list
    | NONTERM_select_option
    | NONTERM_query_spec_option
    | NONTERM_select_item_list
    | NONTERM_select_item
    | NONTERM_select_alias
    | NONTERM_into_clause
    | NONTERM_into_destination
    | NONTERM_opt_from_clause
    | NONTERM_from_clause
    | NONTERM_from_tables
    | NONTERM_table_reference_list
    | NONTERM_table_reference
    | NONTERM_joined_table
    | NONTERM_natural_join_type
    | NONTERM_inner_join_type
    | NONTERM_outer_join_type
    | NONTERM_opt_inner
    | NONTERM_opt_outer
    | NONTERM_opt_use_partition
    | NONTERM_use_partition
    | NONTERM_table_factor
    | NONTERM_table_reference_list_parens
    | NONTERM_single_table_parens
    | NONTERM_single_table
    | NONTERM_joined_table_parens
    | NONTERM_derived_table
    | NONTERM_opt_derived_column_list
    | NONTERM_simple_ident_list
    | NONTERM_table_function
    | NONTERM_columns_clause
    | NONTERM_columns_list
    | NONTERM_jt_column
    | NONTERM_jt_column_type
    | NONTERM_opt_on_empty_or_error
    | NONTERM_opt_on_empty
    | NONTERM_opt_on_error
    | NONTERM_jt_on_response
    | NONTERM_index_hint_clause
    | NONTERM_index_hint_type
    | NONTERM_index_hint_definition
    | NONTERM_index_hints_list
    | NONTERM_opt_index_hints_list
    | NONTERM_opt_where_clause
    | NONTERM_opt_where_clause_expr
    | NONTERM_opt_key_definition
    | NONTERM_opt_group_clause
    | NONTERM_group_list
    | NONTERM_olap_opt
    | NONTERM_opt_having_clause
    | NONTERM_opt_window_clause
    | NONTERM_window_definition_list
    | NONTERM_window_definition
    | NONTERM_window_name
    | NONTERM_window_spec
    | NONTERM_opt_key_usage_list
    | NONTERM_key_usage_element
    | NONTERM_key_usage_list
    | NONTERM_using_list
    | NONTERM_ident_string_list
    | NONTERM_opt_as_or_eq
    | NONTERM_opt_table_alias
    | NONTERM_opt_all
    | NONTERM_key_or_index
    | NONTERM_opt_key_or_index
    | NONTERM_keys_or_index
    | NONTERM_opt_unique
    | NONTERM_set_type
    | NONTERM_expr_list
    | NONTERM_expr
    | NONTERM_bool_pri
    | NONTERM_predicate
    | NONTERM_bit_expr
    | NONTERM_op_or
    | NONTERM_op_and
    | NONTERM_op_not
    | NONTERM_comp_op
    | NONTERM_all_or_any
    | NONTERM_simple_expr
    | NONTERM_cast_type
    | NONTERM_literal
    | NONTERM_text_literal
    | NONTERM_text_string_sys
    | NONTERM_num_literal
    | NONTERM_function_call_keyword
    | NONTERM_function_call_nonkeyword
    | NONTERM_function_call_generic
    | NONTERM_opt_expr_list
    | NONTERM_opt_udf_expr_list
    | NONTERM_udf_expr_list
    | NONTERM_udf_expr
    | NONTERM_ident_sys
    | NONTERM_ident
    | NONTERM_simple_ident
    | NONTERM_simple_ident_nospvar
    | NONTERM_simple_ident_q
    | NONTERM_table_ident
    | NONTERM_table_ident_opt_wild
    | NONTERM_opt_wild
    | NONTERM_table_wild

// This function maps tokens to integer indexes
let tagOfToken (t:token) = 
  match t with
  | VAL_ERROR  -> 0 
  | VAL_EMPTY  -> 1 
  | VAL_BOOL  -> 2 
  | VAL_DUAL  -> 3 
  | VAL_UNKNOWN  -> 4 
  | VAL_FALSE  -> 5 
  | VAL_TRUE  -> 6 
  | VAL_NULL  -> 7 
  | VAL_STRING _ -> 8 
  | VAL_BIN _ -> 9 
  | VAL_HEX _ -> 10 
  | VAL_NUM _ -> 11 
  | VAL_FLOAT _ -> 12 
  | VAL_ID _ -> 13 
  | NOKEY_NOW  -> 14 
  | NOKEY_NESTED  -> 15 
  | NOKEY_PATH  -> 16 
  | NOKEY_ORDINALITY  -> 17 
  | KEY_SQL_NO_CACHE  -> 18 
  | KEY_BINARY  -> 19 
  | KEY_DATE  -> 20 
  | KEY_WINDOW  -> 21 
  | KEY_HAVING  -> 22 
  | KEY_ROLLUP  -> 23 
  | KEY_SQL_CALC_FOUND_ROWS  -> 24 
  | KEY_SQL_BUFFER_RESULT  -> 25 
  | KEY_SQL_BIG_RESULT  -> 26 
  | KEY_SQL_SMALL_RESULT  -> 27 
  | KEY_HIGH_PRIORITY  -> 28 
  | KEY_PRIMARY  -> 29 
  | KEY_USE  -> 30 
  | KEY_DEFAULT  -> 31 
  | KEY_EXISTS  -> 32 
  | KEY_DISTINCT  -> 33 
  | KEY_PARTITION  -> 34 
  | KEY_COLLATE  -> 35 
  | KEY_CONVERT  -> 36 
  | KEY_CAST  -> 37 
  | KEY_CHAR  -> 38 
  | KEY_OFFSET  -> 39 
  | KEY_DESC  -> 40 
  | KEY_ASC  -> 41 
  | KEY_LIMIT  -> 42 
  | KEY_BY  -> 43 
  | KEY_ORDER  -> 44 
  | KEY_WHERE  -> 45 
  | KEY_FOR  -> 46 
  | KEY_COLUMNS  -> 47 
  | KEY_UNIQUE  -> 48 
  | KEY_INDEXES  -> 49 
  | KEY_INDEX  -> 50 
  | KEY_KEYS  -> 51 
  | KEY_KEY  -> 52 
  | KEY_IGNORE  -> 53 
  | KEY_FORCE  -> 54 
  | KEY_FROM  -> 55 
  | KEY_OUTFILE  -> 56 
  | KEY_ANY  -> 57 
  | KEY_ALL  -> 58 
  | KEY_IS  -> 59 
  | KEY_AS  -> 60 
  | KEY_SELECT  -> 61 
  | OP_AS  -> 62 
  | OP_GROUP  -> 63 
  | OP_OUTER  -> 64 
  | OP_JSON_TABLE  -> 65 
  | OP_MOD_TXT  -> 66 
  | OP_DIV_TXT  -> 67 
  | OP_NOT_TXT  -> 68 
  | OP_OR_TXT  -> 69 
  | OP_AND_TXT  -> 70 
  | OP_IN  -> 71 
  | OP_BETWEEN  -> 72 
  | OP_SOUNDS  -> 73 
  | OP_BOR  -> 74 
  | OP_BAND  -> 75 
  | OP_UP  -> 76 
  | OP_SHIFT_LEFT  -> 77 
  | OP_SHIFT_RIGHT  -> 78 
  | OP_EQ  -> 79 
  | OP_EQ2  -> 80 
  | OP_NEQ  -> 81 
  | OP_NEQ2  -> 82 
  | OP_GT  -> 83 
  | OP_LT  -> 84 
  | OP_GEQ  -> 85 
  | OP_LEQ  -> 86 
  | OP_NOT  -> 87 
  | OP_OR  -> 88 
  | OP_XOR  -> 89 
  | OP_AND  -> 90 
  | OP_TILDE  -> 91 
  | OP_LIKE  -> 92 
  | OP_BANG  -> 93 
  | OP_PLUS  -> 94 
  | OP_MINUS  -> 95 
  | OP_DIV  -> 96 
  | OP_TIMES  -> 97 
  | OP_PERC  -> 98 
  | OP_DOT  -> 99 
  | OP_JOIN  -> 100 
  | OP_INNER  -> 101 
  | OP_CROSS  -> 102 
  | OP_STRAIGHT_JOIN  -> 103 
  | OP_NATURAL  -> 104 
  | OP_LEFT  -> 105 
  | OP_RIGHT  -> 106 
  | OP_ON  -> 107 
  | OP_USING  -> 108 
  | OP_INTO  -> 109 
  | OP_UNION  -> 110 
  | PAR_LPAR  -> 111 
  | PAR_RPAR  -> 112 
  | PAR_LBRACE  -> 113 
  | PAR_RBRACE  -> 114 
  | DELIM_SCOLON  -> 115 
  | DELIM_COMMA  -> 116 
  | END_OF_INPUT  -> 117 

// This function maps integer indexes to symbolic token ids
let tokenTagToTokenId (tokenIdx:int) = 
  match tokenIdx with
  | 0 -> TOKEN_VAL_ERROR 
  | 1 -> TOKEN_VAL_EMPTY 
  | 2 -> TOKEN_VAL_BOOL 
  | 3 -> TOKEN_VAL_DUAL 
  | 4 -> TOKEN_VAL_UNKNOWN 
  | 5 -> TOKEN_VAL_FALSE 
  | 6 -> TOKEN_VAL_TRUE 
  | 7 -> TOKEN_VAL_NULL 
  | 8 -> TOKEN_VAL_STRING 
  | 9 -> TOKEN_VAL_BIN 
  | 10 -> TOKEN_VAL_HEX 
  | 11 -> TOKEN_VAL_NUM 
  | 12 -> TOKEN_VAL_FLOAT 
  | 13 -> TOKEN_VAL_ID 
  | 14 -> TOKEN_NOKEY_NOW 
  | 15 -> TOKEN_NOKEY_NESTED 
  | 16 -> TOKEN_NOKEY_PATH 
  | 17 -> TOKEN_NOKEY_ORDINALITY 
  | 18 -> TOKEN_KEY_SQL_NO_CACHE 
  | 19 -> TOKEN_KEY_BINARY 
  | 20 -> TOKEN_KEY_DATE 
  | 21 -> TOKEN_KEY_WINDOW 
  | 22 -> TOKEN_KEY_HAVING 
  | 23 -> TOKEN_KEY_ROLLUP 
  | 24 -> TOKEN_KEY_SQL_CALC_FOUND_ROWS 
  | 25 -> TOKEN_KEY_SQL_BUFFER_RESULT 
  | 26 -> TOKEN_KEY_SQL_BIG_RESULT 
  | 27 -> TOKEN_KEY_SQL_SMALL_RESULT 
  | 28 -> TOKEN_KEY_HIGH_PRIORITY 
  | 29 -> TOKEN_KEY_PRIMARY 
  | 30 -> TOKEN_KEY_USE 
  | 31 -> TOKEN_KEY_DEFAULT 
  | 32 -> TOKEN_KEY_EXISTS 
  | 33 -> TOKEN_KEY_DISTINCT 
  | 34 -> TOKEN_KEY_PARTITION 
  | 35 -> TOKEN_KEY_COLLATE 
  | 36 -> TOKEN_KEY_CONVERT 
  | 37 -> TOKEN_KEY_CAST 
  | 38 -> TOKEN_KEY_CHAR 
  | 39 -> TOKEN_KEY_OFFSET 
  | 40 -> TOKEN_KEY_DESC 
  | 41 -> TOKEN_KEY_ASC 
  | 42 -> TOKEN_KEY_LIMIT 
  | 43 -> TOKEN_KEY_BY 
  | 44 -> TOKEN_KEY_ORDER 
  | 45 -> TOKEN_KEY_WHERE 
  | 46 -> TOKEN_KEY_FOR 
  | 47 -> TOKEN_KEY_COLUMNS 
  | 48 -> TOKEN_KEY_UNIQUE 
  | 49 -> TOKEN_KEY_INDEXES 
  | 50 -> TOKEN_KEY_INDEX 
  | 51 -> TOKEN_KEY_KEYS 
  | 52 -> TOKEN_KEY_KEY 
  | 53 -> TOKEN_KEY_IGNORE 
  | 54 -> TOKEN_KEY_FORCE 
  | 55 -> TOKEN_KEY_FROM 
  | 56 -> TOKEN_KEY_OUTFILE 
  | 57 -> TOKEN_KEY_ANY 
  | 58 -> TOKEN_KEY_ALL 
  | 59 -> TOKEN_KEY_IS 
  | 60 -> TOKEN_KEY_AS 
  | 61 -> TOKEN_KEY_SELECT 
  | 62 -> TOKEN_OP_AS 
  | 63 -> TOKEN_OP_GROUP 
  | 64 -> TOKEN_OP_OUTER 
  | 65 -> TOKEN_OP_JSON_TABLE 
  | 66 -> TOKEN_OP_MOD_TXT 
  | 67 -> TOKEN_OP_DIV_TXT 
  | 68 -> TOKEN_OP_NOT_TXT 
  | 69 -> TOKEN_OP_OR_TXT 
  | 70 -> TOKEN_OP_AND_TXT 
  | 71 -> TOKEN_OP_IN 
  | 72 -> TOKEN_OP_BETWEEN 
  | 73 -> TOKEN_OP_SOUNDS 
  | 74 -> TOKEN_OP_BOR 
  | 75 -> TOKEN_OP_BAND 
  | 76 -> TOKEN_OP_UP 
  | 77 -> TOKEN_OP_SHIFT_LEFT 
  | 78 -> TOKEN_OP_SHIFT_RIGHT 
  | 79 -> TOKEN_OP_EQ 
  | 80 -> TOKEN_OP_EQ2 
  | 81 -> TOKEN_OP_NEQ 
  | 82 -> TOKEN_OP_NEQ2 
  | 83 -> TOKEN_OP_GT 
  | 84 -> TOKEN_OP_LT 
  | 85 -> TOKEN_OP_GEQ 
  | 86 -> TOKEN_OP_LEQ 
  | 87 -> TOKEN_OP_NOT 
  | 88 -> TOKEN_OP_OR 
  | 89 -> TOKEN_OP_XOR 
  | 90 -> TOKEN_OP_AND 
  | 91 -> TOKEN_OP_TILDE 
  | 92 -> TOKEN_OP_LIKE 
  | 93 -> TOKEN_OP_BANG 
  | 94 -> TOKEN_OP_PLUS 
  | 95 -> TOKEN_OP_MINUS 
  | 96 -> TOKEN_OP_DIV 
  | 97 -> TOKEN_OP_TIMES 
  | 98 -> TOKEN_OP_PERC 
  | 99 -> TOKEN_OP_DOT 
  | 100 -> TOKEN_OP_JOIN 
  | 101 -> TOKEN_OP_INNER 
  | 102 -> TOKEN_OP_CROSS 
  | 103 -> TOKEN_OP_STRAIGHT_JOIN 
  | 104 -> TOKEN_OP_NATURAL 
  | 105 -> TOKEN_OP_LEFT 
  | 106 -> TOKEN_OP_RIGHT 
  | 107 -> TOKEN_OP_ON 
  | 108 -> TOKEN_OP_USING 
  | 109 -> TOKEN_OP_INTO 
  | 110 -> TOKEN_OP_UNION 
  | 111 -> TOKEN_PAR_LPAR 
  | 112 -> TOKEN_PAR_RPAR 
  | 113 -> TOKEN_PAR_LBRACE 
  | 114 -> TOKEN_PAR_RBRACE 
  | 115 -> TOKEN_DELIM_SCOLON 
  | 116 -> TOKEN_DELIM_COMMA 
  | 117 -> TOKEN_END_OF_INPUT 
  | 120 -> TOKEN_end_of_input
  | 118 -> TOKEN_error
  | _ -> failwith "tokenTagToTokenId: bad token"

/// This function maps production indexes returned in syntax errors to strings representing the non terminal that would be produced by that production
let prodIdxToNonTerminal (prodIdx:int) = 
  match prodIdx with
    | 0 -> NONTERM__startstart_entry 
    | 1 -> NONTERM_start_entry 
    | 2 -> NONTERM_sql_statement 
    | 3 -> NONTERM_sql_statement 
    | 4 -> NONTERM_sql_statement 
    | 5 -> NONTERM_opt_end_of_input 
    | 6 -> NONTERM_opt_end_of_input 
    | 7 -> NONTERM_simple_statement_or_begin 
    | 8 -> NONTERM_simple_statement 
    | 9 -> NONTERM_select_stmt 
    | 10 -> NONTERM_select_stmt 
    | 11 -> NONTERM_row_subquery 
    | 12 -> NONTERM_table_subquery 
    | 13 -> NONTERM_subquery 
    | 14 -> NONTERM_query_expression 
    | 15 -> NONTERM_opt_order_clause 
    | 16 -> NONTERM_opt_order_clause 
    | 17 -> NONTERM_order_clause 
    | 18 -> NONTERM_order_list 
    | 19 -> NONTERM_order_list 
    | 20 -> NONTERM_order_expr 
    | 21 -> NONTERM_opt_ordering_direction 
    | 22 -> NONTERM_opt_ordering_direction 
    | 23 -> NONTERM_ordering_direction 
    | 24 -> NONTERM_ordering_direction 
    | 25 -> NONTERM_opt_limit_clause 
    | 26 -> NONTERM_opt_limit_clause 
    | 27 -> NONTERM_limit_clause 
    | 28 -> NONTERM_limit_options 
    | 29 -> NONTERM_limit_options 
    | 30 -> NONTERM_limit_options 
    | 31 -> NONTERM_limit_option 
    | 32 -> NONTERM_limit_option 
    | 33 -> NONTERM_opt_simple_limit 
    | 34 -> NONTERM_opt_simple_limit 
    | 35 -> NONTERM_opt_locking_clause_list 
    | 36 -> NONTERM_opt_locking_clause_list 
    | 37 -> NONTERM_locking_clause_list 
    | 38 -> NONTERM_locking_clause_list 
    | 39 -> NONTERM_locking_clause 
    | 40 -> NONTERM_query_expression_body 
    | 41 -> NONTERM_query_expression_body 
    | 42 -> NONTERM_query_expression_body 
    | 43 -> NONTERM_query_expression_body 
    | 44 -> NONTERM_query_expression_body 
    | 45 -> NONTERM_union_option 
    | 46 -> NONTERM_union_option 
    | 47 -> NONTERM_union_option 
    | 48 -> NONTERM_query_expression_parens 
    | 49 -> NONTERM_query_expression_parens 
    | 50 -> NONTERM_query_primary 
    | 51 -> NONTERM_query_specification 
    | 52 -> NONTERM_query_specification 
    | 53 -> NONTERM_select_options 
    | 54 -> NONTERM_select_options 
    | 55 -> NONTERM_select_option_list 
    | 56 -> NONTERM_select_option_list 
    | 57 -> NONTERM_select_option 
    | 58 -> NONTERM_select_option 
    | 59 -> NONTERM_query_spec_option 
    | 60 -> NONTERM_query_spec_option 
    | 61 -> NONTERM_query_spec_option 
    | 62 -> NONTERM_query_spec_option 
    | 63 -> NONTERM_query_spec_option 
    | 64 -> NONTERM_query_spec_option 
    | 65 -> NONTERM_query_spec_option 
    | 66 -> NONTERM_query_spec_option 
    | 67 -> NONTERM_select_item_list 
    | 68 -> NONTERM_select_item_list 
    | 69 -> NONTERM_select_item_list 
    | 70 -> NONTERM_select_item 
    | 71 -> NONTERM_select_item 
    | 72 -> NONTERM_select_alias 
    | 73 -> NONTERM_select_alias 
    | 74 -> NONTERM_select_alias 
    | 75 -> NONTERM_select_alias 
    | 76 -> NONTERM_select_alias 
    | 77 -> NONTERM_into_clause 
    | 78 -> NONTERM_into_destination 
    | 79 -> NONTERM_opt_from_clause 
    | 80 -> NONTERM_opt_from_clause 
    | 81 -> NONTERM_from_clause 
    | 82 -> NONTERM_from_tables 
    | 83 -> NONTERM_from_tables 
    | 84 -> NONTERM_table_reference_list 
    | 85 -> NONTERM_table_reference_list 
    | 86 -> NONTERM_table_reference 
    | 87 -> NONTERM_table_reference 
    | 88 -> NONTERM_joined_table 
    | 89 -> NONTERM_joined_table 
    | 90 -> NONTERM_joined_table 
    | 91 -> NONTERM_joined_table 
    | 92 -> NONTERM_joined_table 
    | 93 -> NONTERM_joined_table 
    | 94 -> NONTERM_natural_join_type 
    | 95 -> NONTERM_natural_join_type 
    | 96 -> NONTERM_natural_join_type 
    | 97 -> NONTERM_inner_join_type 
    | 98 -> NONTERM_inner_join_type 
    | 99 -> NONTERM_inner_join_type 
    | 100 -> NONTERM_inner_join_type 
    | 101 -> NONTERM_outer_join_type 
    | 102 -> NONTERM_outer_join_type 
    | 103 -> NONTERM_opt_inner 
    | 104 -> NONTERM_opt_inner 
    | 105 -> NONTERM_opt_outer 
    | 106 -> NONTERM_opt_outer 
    | 107 -> NONTERM_opt_use_partition 
    | 108 -> NONTERM_opt_use_partition 
    | 109 -> NONTERM_use_partition 
    | 110 -> NONTERM_table_factor 
    | 111 -> NONTERM_table_factor 
    | 112 -> NONTERM_table_factor 
    | 113 -> NONTERM_table_factor 
    | 114 -> NONTERM_table_factor 
    | 115 -> NONTERM_table_factor 
    | 116 -> NONTERM_table_reference_list_parens 
    | 117 -> NONTERM_table_reference_list_parens 
    | 118 -> NONTERM_single_table_parens 
    | 119 -> NONTERM_single_table_parens 
    | 120 -> NONTERM_single_table 
    | 121 -> NONTERM_joined_table_parens 
    | 122 -> NONTERM_joined_table_parens 
    | 123 -> NONTERM_derived_table 
    | 124 -> NONTERM_opt_derived_column_list 
    | 125 -> NONTERM_opt_derived_column_list 
    | 126 -> NONTERM_simple_ident_list 
    | 127 -> NONTERM_simple_ident_list 
    | 128 -> NONTERM_table_function 
    | 129 -> NONTERM_columns_clause 
    | 130 -> NONTERM_columns_list 
    | 131 -> NONTERM_columns_list 
    | 132 -> NONTERM_jt_column 
    | 133 -> NONTERM_jt_column 
    | 134 -> NONTERM_jt_column 
    | 135 -> NONTERM_jt_column_type 
    | 136 -> NONTERM_jt_column_type 
    | 137 -> NONTERM_opt_on_empty_or_error 
    | 138 -> NONTERM_opt_on_empty_or_error 
    | 139 -> NONTERM_opt_on_empty_or_error 
    | 140 -> NONTERM_opt_on_empty_or_error 
    | 141 -> NONTERM_opt_on_empty_or_error 
    | 142 -> NONTERM_opt_on_empty 
    | 143 -> NONTERM_opt_on_error 
    | 144 -> NONTERM_jt_on_response 
    | 145 -> NONTERM_jt_on_response 
    | 146 -> NONTERM_jt_on_response 
    | 147 -> NONTERM_index_hint_clause 
    | 148 -> NONTERM_index_hint_clause 
    | 149 -> NONTERM_index_hint_clause 
    | 150 -> NONTERM_index_hint_clause 
    | 151 -> NONTERM_index_hint_type 
    | 152 -> NONTERM_index_hint_type 
    | 153 -> NONTERM_index_hint_definition 
    | 154 -> NONTERM_index_hint_definition 
    | 155 -> NONTERM_index_hints_list 
    | 156 -> NONTERM_index_hints_list 
    | 157 -> NONTERM_opt_index_hints_list 
    | 158 -> NONTERM_opt_index_hints_list 
    | 159 -> NONTERM_opt_where_clause 
    | 160 -> NONTERM_opt_where_clause_expr 
    | 161 -> NONTERM_opt_where_clause_expr 
    | 162 -> NONTERM_opt_key_definition 
    | 163 -> NONTERM_opt_group_clause 
    | 164 -> NONTERM_opt_group_clause 
    | 165 -> NONTERM_group_list 
    | 166 -> NONTERM_group_list 
    | 167 -> NONTERM_olap_opt 
    | 168 -> NONTERM_olap_opt 
    | 169 -> NONTERM_opt_having_clause 
    | 170 -> NONTERM_opt_having_clause 
    | 171 -> NONTERM_opt_window_clause 
    | 172 -> NONTERM_opt_window_clause 
    | 173 -> NONTERM_window_definition_list 
    | 174 -> NONTERM_window_definition_list 
    | 175 -> NONTERM_window_definition 
    | 176 -> NONTERM_window_name 
    | 177 -> NONTERM_window_spec 
    | 178 -> NONTERM_opt_key_usage_list 
    | 179 -> NONTERM_opt_key_usage_list 
    | 180 -> NONTERM_key_usage_element 
    | 181 -> NONTERM_key_usage_element 
    | 182 -> NONTERM_key_usage_list 
    | 183 -> NONTERM_key_usage_list 
    | 184 -> NONTERM_using_list 
    | 185 -> NONTERM_ident_string_list 
    | 186 -> NONTERM_ident_string_list 
    | 187 -> NONTERM_opt_as_or_eq 
    | 188 -> NONTERM_opt_as_or_eq 
    | 189 -> NONTERM_opt_as_or_eq 
    | 190 -> NONTERM_opt_table_alias 
    | 191 -> NONTERM_opt_table_alias 
    | 192 -> NONTERM_opt_all 
    | 193 -> NONTERM_opt_all 
    | 194 -> NONTERM_key_or_index 
    | 195 -> NONTERM_key_or_index 
    | 196 -> NONTERM_opt_key_or_index 
    | 197 -> NONTERM_opt_key_or_index 
    | 198 -> NONTERM_keys_or_index 
    | 199 -> NONTERM_keys_or_index 
    | 200 -> NONTERM_keys_or_index 
    | 201 -> NONTERM_opt_unique 
    | 202 -> NONTERM_opt_unique 
    | 203 -> NONTERM_set_type 
    | 204 -> NONTERM_expr_list 
    | 205 -> NONTERM_expr_list 
    | 206 -> NONTERM_expr 
    | 207 -> NONTERM_expr 
    | 208 -> NONTERM_expr 
    | 209 -> NONTERM_expr 
    | 210 -> NONTERM_expr 
    | 211 -> NONTERM_expr 
    | 212 -> NONTERM_expr 
    | 213 -> NONTERM_expr 
    | 214 -> NONTERM_expr 
    | 215 -> NONTERM_expr 
    | 216 -> NONTERM_expr 
    | 217 -> NONTERM_bool_pri 
    | 218 -> NONTERM_bool_pri 
    | 219 -> NONTERM_bool_pri 
    | 220 -> NONTERM_bool_pri 
    | 221 -> NONTERM_predicate 
    | 222 -> NONTERM_predicate 
    | 223 -> NONTERM_predicate 
    | 224 -> NONTERM_predicate 
    | 225 -> NONTERM_predicate 
    | 226 -> NONTERM_predicate 
    | 227 -> NONTERM_predicate 
    | 228 -> NONTERM_predicate 
    | 229 -> NONTERM_predicate 
    | 230 -> NONTERM_predicate 
    | 231 -> NONTERM_bit_expr 
    | 232 -> NONTERM_bit_expr 
    | 233 -> NONTERM_bit_expr 
    | 234 -> NONTERM_bit_expr 
    | 235 -> NONTERM_bit_expr 
    | 236 -> NONTERM_bit_expr 
    | 237 -> NONTERM_bit_expr 
    | 238 -> NONTERM_bit_expr 
    | 239 -> NONTERM_bit_expr 
    | 240 -> NONTERM_bit_expr 
    | 241 -> NONTERM_bit_expr 
    | 242 -> NONTERM_bit_expr 
    | 243 -> NONTERM_bit_expr 
    | 244 -> NONTERM_op_or 
    | 245 -> NONTERM_op_or 
    | 246 -> NONTERM_op_and 
    | 247 -> NONTERM_op_and 
    | 248 -> NONTERM_op_not 
    | 249 -> NONTERM_op_not 
    | 250 -> NONTERM_comp_op 
    | 251 -> NONTERM_comp_op 
    | 252 -> NONTERM_comp_op 
    | 253 -> NONTERM_comp_op 
    | 254 -> NONTERM_comp_op 
    | 255 -> NONTERM_comp_op 
    | 256 -> NONTERM_comp_op 
    | 257 -> NONTERM_all_or_any 
    | 258 -> NONTERM_all_or_any 
    | 259 -> NONTERM_simple_expr 
    | 260 -> NONTERM_simple_expr 
    | 261 -> NONTERM_simple_expr 
    | 262 -> NONTERM_simple_expr 
    | 263 -> NONTERM_simple_expr 
    | 264 -> NONTERM_simple_expr 
    | 265 -> NONTERM_simple_expr 
    | 266 -> NONTERM_simple_expr 
    | 267 -> NONTERM_simple_expr 
    | 268 -> NONTERM_simple_expr 
    | 269 -> NONTERM_simple_expr 
    | 270 -> NONTERM_simple_expr 
    | 271 -> NONTERM_simple_expr 
    | 272 -> NONTERM_simple_expr 
    | 273 -> NONTERM_cast_type 
    | 274 -> NONTERM_literal 
    | 275 -> NONTERM_literal 
    | 276 -> NONTERM_literal 
    | 277 -> NONTERM_literal 
    | 278 -> NONTERM_literal 
    | 279 -> NONTERM_literal 
    | 280 -> NONTERM_literal 
    | 281 -> NONTERM_text_literal 
    | 282 -> NONTERM_text_string_sys 
    | 283 -> NONTERM_num_literal 
    | 284 -> NONTERM_num_literal 
    | 285 -> NONTERM_function_call_keyword 
    | 286 -> NONTERM_function_call_nonkeyword 
    | 287 -> NONTERM_function_call_generic 
    | 288 -> NONTERM_function_call_generic 
    | 289 -> NONTERM_opt_expr_list 
    | 290 -> NONTERM_opt_expr_list 
    | 291 -> NONTERM_opt_udf_expr_list 
    | 292 -> NONTERM_opt_udf_expr_list 
    | 293 -> NONTERM_udf_expr_list 
    | 294 -> NONTERM_udf_expr_list 
    | 295 -> NONTERM_udf_expr 
    | 296 -> NONTERM_ident_sys 
    | 297 -> NONTERM_ident_sys 
    | 298 -> NONTERM_ident 
    | 299 -> NONTERM_simple_ident 
    | 300 -> NONTERM_simple_ident 
    | 301 -> NONTERM_simple_ident_nospvar 
    | 302 -> NONTERM_simple_ident_nospvar 
    | 303 -> NONTERM_simple_ident_q 
    | 304 -> NONTERM_simple_ident_q 
    | 305 -> NONTERM_table_ident 
    | 306 -> NONTERM_table_ident 
    | 307 -> NONTERM_table_ident_opt_wild 
    | 308 -> NONTERM_table_ident_opt_wild 
    | 309 -> NONTERM_opt_wild 
    | 310 -> NONTERM_opt_wild 
    | 311 -> NONTERM_table_wild 
    | 312 -> NONTERM_table_wild 
    | _ -> failwith "prodIdxToNonTerminal: bad production index"

let _fsyacc_endOfInputTag = 120 
let _fsyacc_tagOfErrorTerminal = 118

// This function gets the name of a token as a string
let token_to_string (t:token) = 
  match t with 
  | VAL_ERROR  -> "VAL_ERROR" 
  | VAL_EMPTY  -> "VAL_EMPTY" 
  | VAL_BOOL  -> "VAL_BOOL" 
  | VAL_DUAL  -> "VAL_DUAL" 
  | VAL_UNKNOWN  -> "VAL_UNKNOWN" 
  | VAL_FALSE  -> "VAL_FALSE" 
  | VAL_TRUE  -> "VAL_TRUE" 
  | VAL_NULL  -> "VAL_NULL" 
  | VAL_STRING _ -> "VAL_STRING" 
  | VAL_BIN _ -> "VAL_BIN" 
  | VAL_HEX _ -> "VAL_HEX" 
  | VAL_NUM _ -> "VAL_NUM" 
  | VAL_FLOAT _ -> "VAL_FLOAT" 
  | VAL_ID _ -> "VAL_ID" 
  | NOKEY_NOW  -> "NOKEY_NOW" 
  | NOKEY_NESTED  -> "NOKEY_NESTED" 
  | NOKEY_PATH  -> "NOKEY_PATH" 
  | NOKEY_ORDINALITY  -> "NOKEY_ORDINALITY" 
  | KEY_SQL_NO_CACHE  -> "KEY_SQL_NO_CACHE" 
  | KEY_BINARY  -> "KEY_BINARY" 
  | KEY_DATE  -> "KEY_DATE" 
  | KEY_WINDOW  -> "KEY_WINDOW" 
  | KEY_HAVING  -> "KEY_HAVING" 
  | KEY_ROLLUP  -> "KEY_ROLLUP" 
  | KEY_SQL_CALC_FOUND_ROWS  -> "KEY_SQL_CALC_FOUND_ROWS" 
  | KEY_SQL_BUFFER_RESULT  -> "KEY_SQL_BUFFER_RESULT" 
  | KEY_SQL_BIG_RESULT  -> "KEY_SQL_BIG_RESULT" 
  | KEY_SQL_SMALL_RESULT  -> "KEY_SQL_SMALL_RESULT" 
  | KEY_HIGH_PRIORITY  -> "KEY_HIGH_PRIORITY" 
  | KEY_PRIMARY  -> "KEY_PRIMARY" 
  | KEY_USE  -> "KEY_USE" 
  | KEY_DEFAULT  -> "KEY_DEFAULT" 
  | KEY_EXISTS  -> "KEY_EXISTS" 
  | KEY_DISTINCT  -> "KEY_DISTINCT" 
  | KEY_PARTITION  -> "KEY_PARTITION" 
  | KEY_COLLATE  -> "KEY_COLLATE" 
  | KEY_CONVERT  -> "KEY_CONVERT" 
  | KEY_CAST  -> "KEY_CAST" 
  | KEY_CHAR  -> "KEY_CHAR" 
  | KEY_OFFSET  -> "KEY_OFFSET" 
  | KEY_DESC  -> "KEY_DESC" 
  | KEY_ASC  -> "KEY_ASC" 
  | KEY_LIMIT  -> "KEY_LIMIT" 
  | KEY_BY  -> "KEY_BY" 
  | KEY_ORDER  -> "KEY_ORDER" 
  | KEY_WHERE  -> "KEY_WHERE" 
  | KEY_FOR  -> "KEY_FOR" 
  | KEY_COLUMNS  -> "KEY_COLUMNS" 
  | KEY_UNIQUE  -> "KEY_UNIQUE" 
  | KEY_INDEXES  -> "KEY_INDEXES" 
  | KEY_INDEX  -> "KEY_INDEX" 
  | KEY_KEYS  -> "KEY_KEYS" 
  | KEY_KEY  -> "KEY_KEY" 
  | KEY_IGNORE  -> "KEY_IGNORE" 
  | KEY_FORCE  -> "KEY_FORCE" 
  | KEY_FROM  -> "KEY_FROM" 
  | KEY_OUTFILE  -> "KEY_OUTFILE" 
  | KEY_ANY  -> "KEY_ANY" 
  | KEY_ALL  -> "KEY_ALL" 
  | KEY_IS  -> "KEY_IS" 
  | KEY_AS  -> "KEY_AS" 
  | KEY_SELECT  -> "KEY_SELECT" 
  | OP_AS  -> "OP_AS" 
  | OP_GROUP  -> "OP_GROUP" 
  | OP_OUTER  -> "OP_OUTER" 
  | OP_JSON_TABLE  -> "OP_JSON_TABLE" 
  | OP_MOD_TXT  -> "OP_MOD_TXT" 
  | OP_DIV_TXT  -> "OP_DIV_TXT" 
  | OP_NOT_TXT  -> "OP_NOT_TXT" 
  | OP_OR_TXT  -> "OP_OR_TXT" 
  | OP_AND_TXT  -> "OP_AND_TXT" 
  | OP_IN  -> "OP_IN" 
  | OP_BETWEEN  -> "OP_BETWEEN" 
  | OP_SOUNDS  -> "OP_SOUNDS" 
  | OP_BOR  -> "OP_BOR" 
  | OP_BAND  -> "OP_BAND" 
  | OP_UP  -> "OP_UP" 
  | OP_SHIFT_LEFT  -> "OP_SHIFT_LEFT" 
  | OP_SHIFT_RIGHT  -> "OP_SHIFT_RIGHT" 
  | OP_EQ  -> "OP_EQ" 
  | OP_EQ2  -> "OP_EQ2" 
  | OP_NEQ  -> "OP_NEQ" 
  | OP_NEQ2  -> "OP_NEQ2" 
  | OP_GT  -> "OP_GT" 
  | OP_LT  -> "OP_LT" 
  | OP_GEQ  -> "OP_GEQ" 
  | OP_LEQ  -> "OP_LEQ" 
  | OP_NOT  -> "OP_NOT" 
  | OP_OR  -> "OP_OR" 
  | OP_XOR  -> "OP_XOR" 
  | OP_AND  -> "OP_AND" 
  | OP_TILDE  -> "OP_TILDE" 
  | OP_LIKE  -> "OP_LIKE" 
  | OP_BANG  -> "OP_BANG" 
  | OP_PLUS  -> "OP_PLUS" 
  | OP_MINUS  -> "OP_MINUS" 
  | OP_DIV  -> "OP_DIV" 
  | OP_TIMES  -> "OP_TIMES" 
  | OP_PERC  -> "OP_PERC" 
  | OP_DOT  -> "OP_DOT" 
  | OP_JOIN  -> "OP_JOIN" 
  | OP_INNER  -> "OP_INNER" 
  | OP_CROSS  -> "OP_CROSS" 
  | OP_STRAIGHT_JOIN  -> "OP_STRAIGHT_JOIN" 
  | OP_NATURAL  -> "OP_NATURAL" 
  | OP_LEFT  -> "OP_LEFT" 
  | OP_RIGHT  -> "OP_RIGHT" 
  | OP_ON  -> "OP_ON" 
  | OP_USING  -> "OP_USING" 
  | OP_INTO  -> "OP_INTO" 
  | OP_UNION  -> "OP_UNION" 
  | PAR_LPAR  -> "PAR_LPAR" 
  | PAR_RPAR  -> "PAR_RPAR" 
  | PAR_LBRACE  -> "PAR_LBRACE" 
  | PAR_RBRACE  -> "PAR_RBRACE" 
  | DELIM_SCOLON  -> "DELIM_SCOLON" 
  | DELIM_COMMA  -> "DELIM_COMMA" 
  | END_OF_INPUT  -> "END_OF_INPUT" 

// This function gets the data carried by a token as an object
let _fsyacc_dataOfToken (t:token) = 
  match t with 
  | VAL_ERROR  -> (null : System.Object) 
  | VAL_EMPTY  -> (null : System.Object) 
  | VAL_BOOL  -> (null : System.Object) 
  | VAL_DUAL  -> (null : System.Object) 
  | VAL_UNKNOWN  -> (null : System.Object) 
  | VAL_FALSE  -> (null : System.Object) 
  | VAL_TRUE  -> (null : System.Object) 
  | VAL_NULL  -> (null : System.Object) 
  | VAL_STRING _fsyacc_x -> Microsoft.FSharp.Core.Operators.box _fsyacc_x 
  | VAL_BIN _fsyacc_x -> Microsoft.FSharp.Core.Operators.box _fsyacc_x 
  | VAL_HEX _fsyacc_x -> Microsoft.FSharp.Core.Operators.box _fsyacc_x 
  | VAL_NUM _fsyacc_x -> Microsoft.FSharp.Core.Operators.box _fsyacc_x 
  | VAL_FLOAT _fsyacc_x -> Microsoft.FSharp.Core.Operators.box _fsyacc_x 
  | VAL_ID _fsyacc_x -> Microsoft.FSharp.Core.Operators.box _fsyacc_x 
  | NOKEY_NOW  -> (null : System.Object) 
  | NOKEY_NESTED  -> (null : System.Object) 
  | NOKEY_PATH  -> (null : System.Object) 
  | NOKEY_ORDINALITY  -> (null : System.Object) 
  | KEY_SQL_NO_CACHE  -> (null : System.Object) 
  | KEY_BINARY  -> (null : System.Object) 
  | KEY_DATE  -> (null : System.Object) 
  | KEY_WINDOW  -> (null : System.Object) 
  | KEY_HAVING  -> (null : System.Object) 
  | KEY_ROLLUP  -> (null : System.Object) 
  | KEY_SQL_CALC_FOUND_ROWS  -> (null : System.Object) 
  | KEY_SQL_BUFFER_RESULT  -> (null : System.Object) 
  | KEY_SQL_BIG_RESULT  -> (null : System.Object) 
  | KEY_SQL_SMALL_RESULT  -> (null : System.Object) 
  | KEY_HIGH_PRIORITY  -> (null : System.Object) 
  | KEY_PRIMARY  -> (null : System.Object) 
  | KEY_USE  -> (null : System.Object) 
  | KEY_DEFAULT  -> (null : System.Object) 
  | KEY_EXISTS  -> (null : System.Object) 
  | KEY_DISTINCT  -> (null : System.Object) 
  | KEY_PARTITION  -> (null : System.Object) 
  | KEY_COLLATE  -> (null : System.Object) 
  | KEY_CONVERT  -> (null : System.Object) 
  | KEY_CAST  -> (null : System.Object) 
  | KEY_CHAR  -> (null : System.Object) 
  | KEY_OFFSET  -> (null : System.Object) 
  | KEY_DESC  -> (null : System.Object) 
  | KEY_ASC  -> (null : System.Object) 
  | KEY_LIMIT  -> (null : System.Object) 
  | KEY_BY  -> (null : System.Object) 
  | KEY_ORDER  -> (null : System.Object) 
  | KEY_WHERE  -> (null : System.Object) 
  | KEY_FOR  -> (null : System.Object) 
  | KEY_COLUMNS  -> (null : System.Object) 
  | KEY_UNIQUE  -> (null : System.Object) 
  | KEY_INDEXES  -> (null : System.Object) 
  | KEY_INDEX  -> (null : System.Object) 
  | KEY_KEYS  -> (null : System.Object) 
  | KEY_KEY  -> (null : System.Object) 
  | KEY_IGNORE  -> (null : System.Object) 
  | KEY_FORCE  -> (null : System.Object) 
  | KEY_FROM  -> (null : System.Object) 
  | KEY_OUTFILE  -> (null : System.Object) 
  | KEY_ANY  -> (null : System.Object) 
  | KEY_ALL  -> (null : System.Object) 
  | KEY_IS  -> (null : System.Object) 
  | KEY_AS  -> (null : System.Object) 
  | KEY_SELECT  -> (null : System.Object) 
  | OP_AS  -> (null : System.Object) 
  | OP_GROUP  -> (null : System.Object) 
  | OP_OUTER  -> (null : System.Object) 
  | OP_JSON_TABLE  -> (null : System.Object) 
  | OP_MOD_TXT  -> (null : System.Object) 
  | OP_DIV_TXT  -> (null : System.Object) 
  | OP_NOT_TXT  -> (null : System.Object) 
  | OP_OR_TXT  -> (null : System.Object) 
  | OP_AND_TXT  -> (null : System.Object) 
  | OP_IN  -> (null : System.Object) 
  | OP_BETWEEN  -> (null : System.Object) 
  | OP_SOUNDS  -> (null : System.Object) 
  | OP_BOR  -> (null : System.Object) 
  | OP_BAND  -> (null : System.Object) 
  | OP_UP  -> (null : System.Object) 
  | OP_SHIFT_LEFT  -> (null : System.Object) 
  | OP_SHIFT_RIGHT  -> (null : System.Object) 
  | OP_EQ  -> (null : System.Object) 
  | OP_EQ2  -> (null : System.Object) 
  | OP_NEQ  -> (null : System.Object) 
  | OP_NEQ2  -> (null : System.Object) 
  | OP_GT  -> (null : System.Object) 
  | OP_LT  -> (null : System.Object) 
  | OP_GEQ  -> (null : System.Object) 
  | OP_LEQ  -> (null : System.Object) 
  | OP_NOT  -> (null : System.Object) 
  | OP_OR  -> (null : System.Object) 
  | OP_XOR  -> (null : System.Object) 
  | OP_AND  -> (null : System.Object) 
  | OP_TILDE  -> (null : System.Object) 
  | OP_LIKE  -> (null : System.Object) 
  | OP_BANG  -> (null : System.Object) 
  | OP_PLUS  -> (null : System.Object) 
  | OP_MINUS  -> (null : System.Object) 
  | OP_DIV  -> (null : System.Object) 
  | OP_TIMES  -> (null : System.Object) 
  | OP_PERC  -> (null : System.Object) 
  | OP_DOT  -> (null : System.Object) 
  | OP_JOIN  -> (null : System.Object) 
  | OP_INNER  -> (null : System.Object) 
  | OP_CROSS  -> (null : System.Object) 
  | OP_STRAIGHT_JOIN  -> (null : System.Object) 
  | OP_NATURAL  -> (null : System.Object) 
  | OP_LEFT  -> (null : System.Object) 
  | OP_RIGHT  -> (null : System.Object) 
  | OP_ON  -> (null : System.Object) 
  | OP_USING  -> (null : System.Object) 
  | OP_INTO  -> (null : System.Object) 
  | OP_UNION  -> (null : System.Object) 
  | PAR_LPAR  -> (null : System.Object) 
  | PAR_RPAR  -> (null : System.Object) 
  | PAR_LBRACE  -> (null : System.Object) 
  | PAR_RBRACE  -> (null : System.Object) 
  | DELIM_SCOLON  -> (null : System.Object) 
  | DELIM_COMMA  -> (null : System.Object) 
  | END_OF_INPUT  -> (null : System.Object) 
let _fsyacc_gotos = [| 0us; 65535us; 1us; 65535us; 0us; 1us; 2us; 65535us; 0us; 2us; 5us; 8us; 1us; 65535us; 5us; 6us; 2us; 65535us; 0us; 4us; 5us; 4us; 2us; 65535us; 0us; 9us; 5us; 9us; 2us; 65535us; 0us; 10us; 5us; 10us; 51us; 65535us; 23us; 419us; 25us; 419us; 61us; 419us; 62us; 419us; 63us; 419us; 69us; 419us; 95us; 419us; 127us; 419us; 134us; 419us; 200us; 419us; 267us; 419us; 271us; 419us; 274us; 419us; 278us; 419us; 314us; 419us; 327us; 419us; 328us; 419us; 329us; 419us; 330us; 419us; 342us; 419us; 352us; 419us; 355us; 419us; 357us; 419us; 359us; 419us; 361us; 419us; 363us; 419us; 366us; 419us; 380us; 419us; 381us; 419us; 382us; 419us; 383us; 419us; 384us; 419us; 385us; 419us; 386us; 419us; 387us; 419us; 388us; 419us; 389us; 419us; 390us; 419us; 391us; 419us; 411us; 419us; 413us; 419us; 415us; 419us; 417us; 419us; 421us; 419us; 424us; 419us; 429us; 419us; 446us; 419us; 449us; 419us; 452us; 419us; 461us; 419us; 466us; 419us; 9us; 65535us; 60us; 190us; 111us; 190us; 117us; 190us; 118us; 190us; 126us; 190us; 133us; 190us; 140us; 190us; 346us; 347us; 349us; 350us; 60us; 65535us; 23us; 13us; 25us; 13us; 60us; 14us; 61us; 13us; 62us; 13us; 63us; 13us; 69us; 13us; 95us; 13us; 111us; 14us; 117us; 14us; 118us; 14us; 126us; 14us; 127us; 13us; 133us; 14us; 134us; 13us; 140us; 14us; 200us; 13us; 267us; 13us; 271us; 13us; 274us; 13us; 278us; 13us; 314us; 13us; 327us; 13us; 328us; 13us; 329us; 13us; 330us; 13us; 342us; 13us; 346us; 14us; 349us; 14us; 352us; 13us; 355us; 13us; 357us; 13us; 359us; 13us; 361us; 13us; 363us; 13us; 366us; 13us; 380us; 13us; 381us; 13us; 382us; 13us; 383us; 13us; 384us; 13us; 385us; 13us; 386us; 13us; 387us; 13us; 388us; 13us; 389us; 13us; 390us; 13us; 391us; 13us; 411us; 13us; 413us; 13us; 415us; 13us; 417us; 13us; 421us; 13us; 424us; 13us; 429us; 13us; 446us; 13us; 449us; 13us; 452us; 13us; 461us; 13us; 466us; 13us; 7us; 65535us; 0us; 11us; 5us; 11us; 59us; 65us; 60us; 65us; 61us; 65us; 62us; 65us; 63us; 65us; 1us; 65535us; 17us; 18us; 1us; 65535us; 17us; 21us; 1us; 65535us; 23us; 24us; 2us; 65535us; 23us; 27us; 25us; 26us; 1us; 65535us; 28us; 29us; 1us; 65535us; 28us; 30us; 1us; 65535us; 18us; 19us; 1us; 65535us; 18us; 33us; 1us; 65535us; 34us; 35us; 3us; 65535us; 34us; 36us; 37us; 38us; 39us; 40us; 0us; 65535us; 1us; 65535us; 19us; 20us; 1us; 65535us; 19us; 43us; 2us; 65535us; 19us; 45us; 43us; 44us; 7us; 65535us; 0us; 17us; 5us; 17us; 59us; 17us; 60us; 17us; 61us; 17us; 62us; 17us; 63us; 17us; 2us; 65535us; 48us; 49us; 52us; 53us; 65us; 65535us; 0us; 12us; 5us; 12us; 23us; 15us; 25us; 15us; 49us; 55us; 53us; 56us; 59us; 51us; 60us; 16us; 61us; 16us; 62us; 16us; 63us; 16us; 69us; 15us; 95us; 15us; 111us; 15us; 117us; 15us; 118us; 15us; 126us; 15us; 127us; 15us; 133us; 15us; 134us; 15us; 140us; 15us; 200us; 15us; 267us; 15us; 271us; 15us; 274us; 15us; 278us; 15us; 314us; 15us; 327us; 15us; 328us; 15us; 329us; 15us; 330us; 15us; 342us; 15us; 346us; 15us; 349us; 15us; 352us; 15us; 355us; 15us; 357us; 15us; 359us; 15us; 361us; 15us; 363us; 15us; 366us; 15us; 380us; 15us; 381us; 15us; 382us; 15us; 383us; 15us; 384us; 15us; 385us; 15us; 386us; 15us; 387us; 15us; 388us; 15us; 389us; 15us; 390us; 15us; 391us; 15us; 411us; 15us; 413us; 15us; 415us; 15us; 417us; 15us; 421us; 15us; 424us; 15us; 429us; 15us; 446us; 15us; 449us; 15us; 452us; 15us; 461us; 15us; 466us; 15us; 9us; 65535us; 0us; 47us; 5us; 47us; 49us; 50us; 53us; 54us; 59us; 47us; 60us; 47us; 61us; 47us; 62us; 47us; 63us; 47us; 9us; 65535us; 0us; 67us; 5us; 67us; 49us; 67us; 53us; 67us; 59us; 67us; 60us; 67us; 61us; 67us; 62us; 67us; 63us; 67us; 1us; 65535us; 68us; 69us; 1us; 65535us; 68us; 82us; 2us; 65535us; 68us; 84us; 82us; 83us; 2us; 65535us; 68us; 85us; 82us; 85us; 1us; 65535us; 69us; 70us; 2us; 65535us; 69us; 97us; 95us; 96us; 2us; 65535us; 100us; 101us; 326us; 468us; 1us; 65535us; 70us; 71us; 1us; 65535us; 107us; 108us; 2us; 65535us; 70us; 77us; 71us; 72us; 2us; 65535us; 70us; 110us; 71us; 110us; 1us; 65535us; 111us; 112us; 2us; 65535us; 60us; 116us; 111us; 114us; 6us; 65535us; 60us; 115us; 111us; 115us; 117us; 119us; 118us; 120us; 126us; 124us; 133us; 125us; 6us; 65535us; 60us; 123us; 111us; 122us; 117us; 122us; 118us; 122us; 126us; 122us; 133us; 122us; 5us; 65535us; 115us; 140us; 119us; 140us; 120us; 140us; 124us; 140us; 125us; 140us; 5us; 65535us; 115us; 126us; 119us; 126us; 120us; 126us; 124us; 126us; 125us; 126us; 5us; 65535us; 115us; 133us; 119us; 133us; 120us; 133us; 124us; 133us; 125us; 133us; 1us; 65535us; 142us; 143us; 4us; 65535us; 145us; 146us; 148us; 149us; 157us; 158us; 160us; 161us; 1us; 65535us; 184us; 185us; 1us; 65535us; 184us; 165us; 7us; 65535us; 60us; 121us; 111us; 121us; 117us; 121us; 118us; 121us; 126us; 121us; 133us; 121us; 140us; 141us; 7us; 65535us; 60us; 178us; 111us; 177us; 117us; 177us; 118us; 177us; 126us; 177us; 133us; 177us; 140us; 177us; 7us; 65535us; 60us; 173us; 111us; 172us; 117us; 172us; 118us; 172us; 126us; 172us; 133us; 172us; 140us; 172us; 7us; 65535us; 60us; 171us; 111us; 170us; 117us; 170us; 118us; 170us; 126us; 170us; 133us; 170us; 140us; 170us; 7us; 65535us; 60us; 176us; 111us; 175us; 117us; 175us; 118us; 175us; 126us; 175us; 133us; 175us; 140us; 175us; 7us; 65535us; 60us; 174us; 111us; 174us; 117us; 174us; 118us; 174us; 126us; 174us; 133us; 174us; 140us; 174us; 1us; 65535us; 191us; 192us; 1us; 65535us; 193us; 194us; 7us; 65535us; 60us; 179us; 111us; 179us; 117us; 179us; 118us; 179us; 126us; 179us; 133us; 179us; 140us; 179us; 2us; 65535us; 203us; 204us; 224us; 225us; 1us; 65535us; 208us; 209us; 2us; 65535us; 208us; 211us; 212us; 213us; 1us; 65535us; 217us; 218us; 1us; 65535us; 220us; 221us; 2us; 65535us; 220us; 227us; 228us; 230us; 2us; 65535us; 220us; 228us; 227us; 229us; 3us; 65535us; 220us; 232us; 227us; 236us; 228us; 231us; 2us; 65535us; 252us; 253us; 258us; 259us; 2us; 65535us; 186us; 251us; 264us; 251us; 2us; 65535us; 186us; 263us; 264us; 265us; 1us; 65535us; 186us; 264us; 1us; 65535us; 186us; 269us; 2us; 65535us; 72us; 73us; 77us; 78us; 2us; 65535us; 72us; 266us; 77us; 266us; 1us; 65535us; 186us; 187us; 2us; 65535us; 73us; 74us; 78us; 79us; 1us; 65535us; 271us; 272us; 1us; 65535us; 272us; 273us; 2us; 65535us; 74us; 75us; 79us; 80us; 2us; 65535us; 75us; 76us; 80us; 81us; 1us; 65535us; 280us; 281us; 2us; 65535us; 280us; 282us; 283us; 284us; 2us; 65535us; 280us; 285us; 283us; 285us; 1us; 65535us; 286us; 287us; 1us; 65535us; 260us; 261us; 3us; 65535us; 254us; 294us; 260us; 294us; 295us; 296us; 2us; 65535us; 254us; 255us; 260us; 291us; 3us; 65535us; 130us; 131us; 137us; 138us; 167us; 168us; 3us; 65535us; 130us; 297us; 137us; 297us; 167us; 297us; 3us; 65535us; 185us; 303us; 190us; 303us; 205us; 303us; 3us; 65535us; 185us; 186us; 190us; 191us; 205us; 206us; 0us; 65535us; 2us; 65535us; 251us; 252us; 257us; 258us; 0us; 65535us; 0us; 65535us; 0us; 65535us; 1us; 65535us; 214us; 217us; 5us; 65535us; 352us; 309us; 355us; 310us; 421us; 311us; 446us; 312us; 461us; 313us; 29us; 65535us; 23us; 28us; 25us; 28us; 61us; 320us; 62us; 321us; 63us; 322us; 69us; 100us; 95us; 100us; 127us; 128us; 134us; 135us; 200us; 201us; 267us; 268us; 271us; 276us; 274us; 275us; 278us; 279us; 314us; 315us; 327us; 316us; 328us; 317us; 329us; 318us; 330us; 319us; 352us; 308us; 355us; 308us; 421us; 308us; 424us; 323us; 429us; 324us; 446us; 308us; 449us; 325us; 452us; 326us; 461us; 308us; 466us; 326us; 29us; 65535us; 23us; 331us; 25us; 331us; 61us; 331us; 62us; 331us; 63us; 331us; 69us; 331us; 95us; 331us; 127us; 331us; 134us; 331us; 200us; 331us; 267us; 331us; 271us; 331us; 274us; 331us; 278us; 331us; 314us; 331us; 327us; 331us; 328us; 331us; 329us; 331us; 330us; 331us; 352us; 331us; 355us; 331us; 421us; 331us; 424us; 331us; 429us; 331us; 446us; 331us; 449us; 331us; 452us; 331us; 461us; 331us; 466us; 331us; 32us; 65535us; 23us; 344us; 25us; 344us; 61us; 344us; 62us; 344us; 63us; 344us; 69us; 344us; 95us; 344us; 127us; 344us; 134us; 344us; 200us; 344us; 267us; 344us; 271us; 344us; 274us; 344us; 278us; 344us; 314us; 344us; 327us; 344us; 328us; 344us; 329us; 344us; 330us; 344us; 342us; 343us; 352us; 344us; 355us; 344us; 359us; 360us; 363us; 364us; 421us; 344us; 424us; 344us; 429us; 344us; 446us; 344us; 449us; 344us; 452us; 344us; 461us; 344us; 466us; 344us; 47us; 65535us; 23us; 345us; 25us; 345us; 61us; 345us; 62us; 345us; 63us; 345us; 69us; 345us; 95us; 345us; 127us; 345us; 134us; 345us; 200us; 345us; 267us; 345us; 271us; 345us; 274us; 345us; 278us; 345us; 314us; 345us; 327us; 345us; 328us; 345us; 329us; 345us; 330us; 345us; 342us; 345us; 352us; 345us; 355us; 345us; 357us; 358us; 359us; 345us; 361us; 362us; 363us; 345us; 366us; 367us; 380us; 368us; 381us; 369us; 382us; 370us; 383us; 371us; 384us; 372us; 385us; 373us; 386us; 374us; 387us; 375us; 388us; 376us; 389us; 377us; 390us; 378us; 391us; 379us; 421us; 345us; 424us; 345us; 429us; 345us; 446us; 345us; 449us; 345us; 452us; 345us; 461us; 345us; 466us; 345us; 22us; 65535us; 28us; 327us; 100us; 327us; 128us; 327us; 135us; 327us; 201us; 327us; 268us; 327us; 275us; 327us; 276us; 327us; 279us; 327us; 308us; 327us; 315us; 327us; 316us; 327us; 317us; 327us; 318us; 327us; 319us; 327us; 320us; 327us; 321us; 327us; 322us; 327us; 323us; 327us; 324us; 327us; 325us; 327us; 326us; 327us; 22us; 65535us; 28us; 329us; 100us; 329us; 128us; 329us; 135us; 329us; 201us; 329us; 268us; 329us; 275us; 329us; 276us; 329us; 279us; 329us; 308us; 329us; 315us; 329us; 316us; 329us; 317us; 329us; 318us; 329us; 319us; 329us; 320us; 329us; 321us; 329us; 322us; 329us; 323us; 329us; 324us; 329us; 325us; 329us; 326us; 329us; 2us; 65535us; 332us; 334us; 345us; 348us; 1us; 65535us; 331us; 342us; 0us; 65535us; 51us; 65535us; 23us; 392us; 25us; 392us; 61us; 392us; 62us; 392us; 63us; 392us; 69us; 392us; 95us; 392us; 127us; 392us; 134us; 392us; 200us; 392us; 267us; 392us; 271us; 392us; 274us; 392us; 278us; 392us; 314us; 392us; 327us; 392us; 328us; 392us; 329us; 392us; 330us; 392us; 342us; 392us; 352us; 392us; 355us; 392us; 357us; 392us; 359us; 392us; 361us; 392us; 363us; 392us; 366us; 392us; 380us; 392us; 381us; 392us; 382us; 392us; 383us; 392us; 384us; 392us; 385us; 392us; 386us; 392us; 387us; 392us; 388us; 392us; 389us; 392us; 390us; 392us; 391us; 392us; 411us; 412us; 413us; 414us; 415us; 416us; 417us; 418us; 421us; 392us; 424us; 392us; 429us; 392us; 446us; 392us; 449us; 392us; 452us; 392us; 461us; 392us; 466us; 392us; 2us; 65535us; 425us; 426us; 430us; 431us; 51us; 65535us; 23us; 410us; 25us; 410us; 61us; 410us; 62us; 410us; 63us; 410us; 69us; 410us; 95us; 410us; 127us; 410us; 134us; 410us; 200us; 410us; 267us; 410us; 271us; 410us; 274us; 410us; 278us; 410us; 314us; 410us; 327us; 410us; 328us; 410us; 329us; 410us; 330us; 410us; 342us; 410us; 352us; 410us; 355us; 410us; 357us; 410us; 359us; 410us; 361us; 410us; 363us; 410us; 366us; 410us; 380us; 410us; 381us; 410us; 382us; 410us; 383us; 410us; 384us; 410us; 385us; 410us; 386us; 410us; 387us; 410us; 388us; 410us; 389us; 410us; 390us; 410us; 391us; 410us; 411us; 410us; 413us; 410us; 415us; 410us; 417us; 410us; 421us; 410us; 424us; 410us; 429us; 410us; 446us; 410us; 449us; 410us; 452us; 410us; 461us; 410us; 466us; 410us; 51us; 65535us; 23us; 434us; 25us; 434us; 61us; 434us; 62us; 434us; 63us; 434us; 69us; 434us; 95us; 434us; 127us; 434us; 134us; 434us; 200us; 434us; 267us; 434us; 271us; 434us; 274us; 434us; 278us; 434us; 314us; 434us; 327us; 434us; 328us; 434us; 329us; 434us; 330us; 434us; 342us; 434us; 352us; 434us; 355us; 434us; 357us; 434us; 359us; 434us; 361us; 434us; 363us; 434us; 366us; 434us; 380us; 434us; 381us; 434us; 382us; 434us; 383us; 434us; 384us; 434us; 385us; 434us; 386us; 434us; 387us; 434us; 388us; 434us; 389us; 434us; 390us; 434us; 391us; 434us; 411us; 434us; 413us; 434us; 415us; 434us; 417us; 434us; 421us; 434us; 424us; 434us; 429us; 434us; 446us; 434us; 449us; 434us; 452us; 434us; 461us; 434us; 466us; 434us; 4us; 65535us; 202us; 203us; 219us; 220us; 223us; 224us; 241us; 242us; 51us; 65535us; 23us; 435us; 25us; 435us; 61us; 435us; 62us; 435us; 63us; 435us; 69us; 435us; 95us; 435us; 127us; 435us; 134us; 435us; 200us; 435us; 267us; 435us; 271us; 435us; 274us; 435us; 278us; 435us; 314us; 435us; 327us; 435us; 328us; 435us; 329us; 435us; 330us; 435us; 342us; 435us; 352us; 435us; 355us; 435us; 357us; 435us; 359us; 435us; 361us; 435us; 363us; 435us; 366us; 435us; 380us; 435us; 381us; 435us; 382us; 435us; 383us; 435us; 384us; 435us; 385us; 435us; 386us; 435us; 387us; 435us; 388us; 435us; 389us; 435us; 390us; 435us; 391us; 435us; 411us; 435us; 413us; 435us; 415us; 435us; 417us; 435us; 421us; 435us; 424us; 435us; 429us; 435us; 446us; 435us; 449us; 435us; 452us; 435us; 461us; 435us; 466us; 435us; 51us; 65535us; 23us; 407us; 25us; 407us; 61us; 407us; 62us; 407us; 63us; 407us; 69us; 407us; 95us; 407us; 127us; 407us; 134us; 407us; 200us; 407us; 267us; 407us; 271us; 407us; 274us; 407us; 278us; 407us; 314us; 407us; 327us; 407us; 328us; 407us; 329us; 407us; 330us; 407us; 342us; 407us; 352us; 407us; 355us; 407us; 357us; 407us; 359us; 407us; 361us; 407us; 363us; 407us; 366us; 407us; 380us; 407us; 381us; 407us; 382us; 407us; 383us; 407us; 384us; 407us; 385us; 407us; 386us; 407us; 387us; 407us; 388us; 407us; 389us; 407us; 390us; 407us; 391us; 407us; 411us; 407us; 413us; 407us; 415us; 407us; 417us; 407us; 421us; 407us; 424us; 407us; 429us; 407us; 446us; 407us; 449us; 407us; 452us; 407us; 461us; 407us; 466us; 407us; 51us; 65535us; 23us; 408us; 25us; 408us; 61us; 408us; 62us; 408us; 63us; 408us; 69us; 408us; 95us; 408us; 127us; 408us; 134us; 408us; 200us; 408us; 267us; 408us; 271us; 408us; 274us; 408us; 278us; 408us; 314us; 408us; 327us; 408us; 328us; 408us; 329us; 408us; 330us; 408us; 342us; 408us; 352us; 408us; 355us; 408us; 357us; 408us; 359us; 408us; 361us; 408us; 363us; 408us; 366us; 408us; 380us; 408us; 381us; 408us; 382us; 408us; 383us; 408us; 384us; 408us; 385us; 408us; 386us; 408us; 387us; 408us; 388us; 408us; 389us; 408us; 390us; 408us; 391us; 408us; 411us; 408us; 413us; 408us; 415us; 408us; 417us; 408us; 421us; 408us; 424us; 408us; 429us; 408us; 446us; 408us; 449us; 408us; 452us; 408us; 461us; 408us; 466us; 408us; 51us; 65535us; 23us; 409us; 25us; 409us; 61us; 409us; 62us; 409us; 63us; 409us; 69us; 409us; 95us; 409us; 127us; 409us; 134us; 409us; 200us; 409us; 267us; 409us; 271us; 409us; 274us; 409us; 278us; 409us; 314us; 409us; 327us; 409us; 328us; 409us; 329us; 409us; 330us; 409us; 342us; 409us; 352us; 409us; 355us; 409us; 357us; 409us; 359us; 409us; 361us; 409us; 363us; 409us; 366us; 409us; 380us; 409us; 381us; 409us; 382us; 409us; 383us; 409us; 384us; 409us; 385us; 409us; 386us; 409us; 387us; 409us; 388us; 409us; 389us; 409us; 390us; 409us; 391us; 409us; 411us; 409us; 413us; 409us; 415us; 409us; 417us; 409us; 421us; 409us; 424us; 409us; 429us; 409us; 446us; 409us; 449us; 409us; 452us; 409us; 461us; 409us; 466us; 409us; 1us; 65535us; 461us; 462us; 1us; 65535us; 452us; 453us; 1us; 65535us; 452us; 464us; 2us; 65535us; 452us; 465us; 466us; 467us; 51us; 65535us; 23us; 451us; 25us; 451us; 61us; 451us; 62us; 451us; 63us; 451us; 69us; 451us; 95us; 451us; 127us; 451us; 134us; 451us; 200us; 451us; 267us; 451us; 271us; 451us; 274us; 451us; 278us; 451us; 314us; 451us; 327us; 451us; 328us; 451us; 329us; 451us; 330us; 451us; 342us; 451us; 352us; 451us; 355us; 451us; 357us; 451us; 359us; 451us; 361us; 451us; 363us; 451us; 366us; 451us; 380us; 451us; 381us; 451us; 382us; 451us; 383us; 451us; 384us; 451us; 385us; 451us; 386us; 451us; 387us; 451us; 388us; 451us; 389us; 451us; 390us; 451us; 391us; 451us; 411us; 451us; 413us; 451us; 415us; 451us; 417us; 451us; 421us; 451us; 424us; 451us; 429us; 451us; 446us; 451us; 449us; 451us; 452us; 451us; 461us; 451us; 466us; 451us; 83us; 65535us; 23us; 455us; 25us; 455us; 34us; 41us; 37us; 41us; 39us; 41us; 60us; 475us; 61us; 455us; 62us; 455us; 63us; 455us; 69us; 456us; 95us; 456us; 100us; 105us; 102us; 103us; 111us; 475us; 117us; 475us; 118us; 475us; 126us; 475us; 127us; 455us; 130us; 298us; 133us; 475us; 134us; 455us; 137us; 298us; 140us; 475us; 167us; 298us; 193us; 196us; 197us; 198us; 200us; 455us; 208us; 214us; 212us; 214us; 254us; 292us; 260us; 292us; 267us; 455us; 271us; 455us; 274us; 455us; 278us; 455us; 280us; 288us; 283us; 288us; 295us; 292us; 299us; 300us; 303us; 304us; 314us; 455us; 326us; 105us; 327us; 455us; 328us; 455us; 329us; 455us; 330us; 455us; 342us; 455us; 352us; 455us; 355us; 455us; 357us; 455us; 359us; 455us; 361us; 455us; 363us; 455us; 366us; 455us; 380us; 455us; 381us; 455us; 382us; 455us; 383us; 455us; 384us; 455us; 385us; 455us; 386us; 455us; 387us; 455us; 388us; 455us; 389us; 455us; 390us; 455us; 391us; 455us; 411us; 455us; 413us; 455us; 415us; 455us; 417us; 455us; 421us; 455us; 424us; 455us; 429us; 455us; 446us; 455us; 449us; 455us; 452us; 455us; 457us; 459us; 458us; 460us; 461us; 455us; 466us; 455us; 472us; 474us; 473us; 474us; 476us; 477us; 51us; 65535us; 23us; 406us; 25us; 406us; 61us; 406us; 62us; 406us; 63us; 406us; 69us; 406us; 95us; 406us; 127us; 406us; 134us; 406us; 200us; 406us; 267us; 406us; 271us; 406us; 274us; 406us; 278us; 406us; 314us; 406us; 327us; 406us; 328us; 406us; 329us; 406us; 330us; 406us; 342us; 406us; 352us; 406us; 355us; 406us; 357us; 406us; 359us; 406us; 361us; 406us; 363us; 406us; 366us; 406us; 380us; 406us; 381us; 406us; 382us; 406us; 383us; 406us; 384us; 406us; 385us; 406us; 386us; 406us; 387us; 406us; 388us; 406us; 389us; 406us; 390us; 406us; 391us; 406us; 411us; 406us; 413us; 406us; 415us; 406us; 417us; 406us; 421us; 406us; 424us; 406us; 429us; 406us; 446us; 406us; 449us; 406us; 452us; 406us; 461us; 406us; 466us; 406us; 0us; 65535us; 51us; 65535us; 23us; 471us; 25us; 471us; 61us; 471us; 62us; 471us; 63us; 471us; 69us; 471us; 95us; 471us; 127us; 471us; 134us; 471us; 200us; 471us; 267us; 471us; 271us; 471us; 274us; 471us; 278us; 471us; 314us; 471us; 327us; 471us; 328us; 471us; 329us; 471us; 330us; 471us; 342us; 471us; 352us; 471us; 355us; 471us; 357us; 471us; 359us; 471us; 361us; 471us; 363us; 471us; 366us; 471us; 380us; 471us; 381us; 471us; 382us; 471us; 383us; 471us; 384us; 471us; 385us; 471us; 386us; 471us; 387us; 471us; 388us; 471us; 389us; 471us; 390us; 471us; 391us; 471us; 411us; 471us; 413us; 471us; 415us; 471us; 417us; 471us; 421us; 471us; 424us; 471us; 429us; 471us; 446us; 471us; 449us; 471us; 452us; 471us; 461us; 471us; 466us; 471us; 7us; 65535us; 60us; 184us; 111us; 184us; 117us; 184us; 118us; 184us; 126us; 184us; 133us; 184us; 140us; 184us; 0us; 65535us; 0us; 65535us; 2us; 65535us; 69us; 99us; 95us; 99us; |]
let _fsyacc_sparseGotoTableRowOffsets = [|0us; 1us; 3us; 6us; 8us; 11us; 14us; 17us; 69us; 79us; 140us; 148us; 150us; 152us; 154us; 157us; 159us; 161us; 163us; 165us; 167us; 171us; 172us; 174us; 176us; 179us; 187us; 190us; 256us; 266us; 276us; 278us; 280us; 283us; 286us; 288us; 291us; 294us; 296us; 298us; 301us; 304us; 306us; 309us; 316us; 323us; 329us; 335us; 341us; 343us; 348us; 350us; 352us; 360us; 368us; 376us; 384us; 392us; 400us; 402us; 404us; 412us; 415us; 417us; 420us; 422us; 424us; 427us; 430us; 434us; 437us; 440us; 443us; 445us; 447us; 450us; 453us; 455us; 458us; 460us; 462us; 465us; 468us; 470us; 473us; 476us; 478us; 480us; 484us; 487us; 491us; 495us; 499us; 503us; 504us; 507us; 508us; 509us; 510us; 512us; 518us; 548us; 578us; 611us; 659us; 682us; 705us; 708us; 710us; 711us; 763us; 766us; 818us; 870us; 875us; 927us; 979us; 1031us; 1083us; 1085us; 1087us; 1089us; 1092us; 1144us; 1228us; 1280us; 1281us; 1333us; 1341us; 1342us; 1343us; |]
let _fsyacc_stateToProdIdxsTableElements = [| 1us; 0us; 1us; 0us; 1us; 1us; 1us; 2us; 2us; 3us; 4us; 1us; 3us; 1us; 3us; 1us; 4us; 1us; 6us; 1us; 7us; 1us; 8us; 1us; 9us; 3us; 10us; 42us; 44us; 1us; 11us; 1us; 12us; 1us; 13us; 4us; 13us; 42us; 44us; 48us; 3us; 14us; 41us; 43us; 1us; 14us; 1us; 14us; 1us; 14us; 1us; 16us; 1us; 17us; 1us; 17us; 2us; 17us; 18us; 1us; 18us; 1us; 18us; 1us; 19us; 4us; 20us; 206us; 207us; 208us; 1us; 20us; 1us; 22us; 1us; 23us; 1us; 24us; 1us; 26us; 1us; 27us; 1us; 27us; 3us; 28us; 29us; 30us; 1us; 29us; 1us; 29us; 1us; 30us; 1us; 30us; 1us; 31us; 1us; 32us; 2us; 36us; 37us; 1us; 37us; 1us; 38us; 1us; 39us; 1us; 40us; 2us; 41us; 43us; 2us; 41us; 43us; 1us; 41us; 3us; 42us; 44us; 48us; 2us; 42us; 44us; 2us; 42us; 44us; 1us; 42us; 1us; 43us; 1us; 44us; 1us; 46us; 1us; 47us; 2us; 48us; 49us; 8us; 48us; 49us; 116us; 117us; 118us; 119us; 121us; 122us; 4us; 48us; 49us; 223us; 224us; 4us; 48us; 49us; 225us; 226us; 4us; 48us; 49us; 269us; 270us; 1us; 48us; 1us; 49us; 1us; 49us; 1us; 50us; 2us; 51us; 52us; 2us; 51us; 52us; 3us; 51us; 52us; 67us; 1us; 51us; 1us; 51us; 1us; 51us; 1us; 51us; 1us; 51us; 1us; 51us; 1us; 52us; 1us; 52us; 1us; 52us; 1us; 52us; 1us; 52us; 2us; 54us; 55us; 1us; 55us; 1us; 56us; 1us; 57us; 1us; 58us; 1us; 59us; 1us; 60us; 1us; 61us; 1us; 62us; 1us; 63us; 1us; 64us; 1us; 65us; 1us; 66us; 1us; 67us; 1us; 67us; 1us; 68us; 1us; 69us; 1us; 70us; 4us; 71us; 206us; 207us; 208us; 1us; 71us; 2us; 73us; 74us; 1us; 73us; 1us; 74us; 1us; 75us; 1us; 76us; 1us; 77us; 1us; 77us; 1us; 78us; 1us; 80us; 1us; 81us; 1us; 81us; 1us; 82us; 2us; 83us; 85us; 7us; 84us; 88us; 89us; 90us; 91us; 92us; 93us; 2us; 85us; 117us; 1us; 85us; 2us; 85us; 117us; 7us; 85us; 88us; 89us; 90us; 91us; 92us; 93us; 8us; 85us; 88us; 89us; 90us; 91us; 92us; 93us; 117us; 1us; 86us; 1us; 87us; 2us; 87us; 122us; 9us; 88us; 88us; 89us; 89us; 90us; 91us; 92us; 92us; 93us; 8us; 88us; 89us; 90us; 90us; 91us; 91us; 92us; 93us; 3us; 88us; 89us; 92us; 1us; 88us; 4us; 88us; 206us; 207us; 208us; 1us; 89us; 1us; 89us; 1us; 89us; 1us; 89us; 2us; 90us; 91us; 1us; 90us; 4us; 90us; 206us; 207us; 208us; 1us; 91us; 1us; 91us; 1us; 91us; 1us; 91us; 1us; 93us; 1us; 93us; 3us; 94us; 95us; 96us; 1us; 94us; 1us; 94us; 1us; 95us; 1us; 95us; 1us; 95us; 1us; 96us; 1us; 96us; 1us; 96us; 1us; 97us; 1us; 98us; 1us; 98us; 1us; 99us; 1us; 99us; 1us; 100us; 1us; 101us; 1us; 101us; 1us; 101us; 1us; 102us; 1us; 102us; 1us; 102us; 1us; 104us; 1us; 106us; 1us; 108us; 1us; 109us; 1us; 109us; 1us; 109us; 1us; 109us; 1us; 110us; 2us; 110us; 119us; 1us; 111us; 2us; 111us; 118us; 1us; 112us; 1us; 113us; 2us; 113us; 121us; 1us; 114us; 2us; 114us; 116us; 1us; 115us; 1us; 116us; 1us; 117us; 1us; 118us; 1us; 119us; 1us; 120us; 1us; 120us; 1us; 120us; 1us; 120us; 1us; 121us; 1us; 122us; 1us; 123us; 1us; 123us; 1us; 123us; 1us; 125us; 2us; 125us; 127us; 1us; 125us; 1us; 126us; 1us; 127us; 1us; 127us; 1us; 128us; 1us; 128us; 4us; 128us; 206us; 207us; 208us; 1us; 128us; 1us; 128us; 1us; 128us; 1us; 128us; 1us; 128us; 1us; 129us; 1us; 129us; 2us; 129us; 131us; 1us; 129us; 1us; 130us; 1us; 131us; 1us; 131us; 2us; 132us; 133us; 1us; 132us; 1us; 132us; 1us; 133us; 1us; 133us; 1us; 133us; 1us; 133us; 1us; 133us; 1us; 134us; 1us; 134us; 1us; 134us; 1us; 134us; 1us; 136us; 2us; 138us; 140us; 2us; 139us; 141us; 1us; 140us; 1us; 141us; 1us; 142us; 2us; 142us; 143us; 1us; 142us; 2us; 142us; 143us; 1us; 142us; 1us; 143us; 1us; 143us; 1us; 143us; 1us; 144us; 1us; 145us; 1us; 146us; 1us; 146us; 3us; 148us; 149us; 150us; 1us; 148us; 1us; 149us; 1us; 149us; 1us; 150us; 1us; 150us; 1us; 151us; 1us; 152us; 1us; 153us; 1us; 153us; 1us; 153us; 1us; 153us; 2us; 153us; 183us; 1us; 153us; 1us; 154us; 1us; 154us; 1us; 154us; 1us; 154us; 1us; 154us; 1us; 154us; 1us; 155us; 2us; 156us; 158us; 1us; 156us; 1us; 159us; 1us; 161us; 4us; 161us; 206us; 207us; 208us; 1us; 162us; 1us; 164us; 1us; 164us; 2us; 164us; 165us; 1us; 164us; 1us; 165us; 4us; 165us; 206us; 207us; 208us; 4us; 166us; 206us; 207us; 208us; 1us; 168us; 1us; 170us; 4us; 170us; 206us; 207us; 208us; 1us; 172us; 2us; 172us; 174us; 1us; 173us; 1us; 174us; 1us; 174us; 1us; 175us; 1us; 175us; 1us; 175us; 1us; 176us; 1us; 177us; 1us; 177us; 2us; 179us; 183us; 1us; 180us; 1us; 181us; 1us; 182us; 1us; 183us; 1us; 183us; 2us; 184us; 186us; 1us; 185us; 1us; 186us; 1us; 186us; 1us; 188us; 1us; 189us; 1us; 191us; 1us; 191us; 1us; 194us; 1us; 195us; 1us; 203us; 4us; 204us; 206us; 207us; 208us; 2us; 205us; 224us; 2us; 205us; 226us; 2us; 205us; 270us; 2us; 205us; 285us; 2us; 205us; 290us; 1us; 205us; 4us; 205us; 206us; 207us; 208us; 4us; 206us; 206us; 207us; 208us; 4us; 206us; 207us; 207us; 208us; 4us; 206us; 207us; 208us; 208us; 4us; 206us; 207us; 208us; 209us; 5us; 206us; 207us; 208us; 223us; 224us; 5us; 206us; 207us; 208us; 225us; 226us; 5us; 206us; 207us; 208us; 269us; 270us; 4us; 206us; 207us; 208us; 271us; 4us; 206us; 207us; 208us; 272us; 4us; 206us; 207us; 208us; 286us; 4us; 206us; 207us; 208us; 295us; 1us; 206us; 1us; 207us; 1us; 208us; 1us; 209us; 10us; 210us; 211us; 212us; 213us; 214us; 215us; 216us; 217us; 218us; 219us; 8us; 210us; 211us; 212us; 213us; 214us; 215us; 217us; 218us; 1us; 210us; 4us; 211us; 213us; 215us; 218us; 1us; 211us; 1us; 212us; 1us; 213us; 1us; 214us; 1us; 215us; 1us; 217us; 1us; 218us; 1us; 219us; 1us; 219us; 1us; 220us; 22us; 221us; 222us; 223us; 224us; 225us; 226us; 227us; 228us; 229us; 230us; 231us; 232us; 233us; 234us; 235us; 236us; 237us; 238us; 239us; 240us; 241us; 242us; 3us; 221us; 223us; 224us; 1us; 221us; 4us; 222us; 225us; 226us; 228us; 3us; 222us; 225us; 226us; 1us; 222us; 1us; 223us; 1us; 224us; 1us; 224us; 1us; 225us; 1us; 226us; 1us; 226us; 1us; 227us; 13us; 227us; 231us; 232us; 233us; 234us; 235us; 236us; 237us; 238us; 239us; 240us; 241us; 242us; 1us; 227us; 1us; 227us; 1us; 228us; 13us; 228us; 231us; 232us; 233us; 234us; 235us; 236us; 237us; 238us; 239us; 240us; 241us; 242us; 1us; 228us; 1us; 228us; 1us; 229us; 1us; 229us; 13us; 229us; 231us; 232us; 233us; 234us; 235us; 236us; 237us; 238us; 239us; 240us; 241us; 242us; 13us; 231us; 231us; 232us; 233us; 234us; 235us; 236us; 237us; 238us; 239us; 240us; 241us; 242us; 13us; 231us; 232us; 232us; 233us; 234us; 235us; 236us; 237us; 238us; 239us; 240us; 241us; 242us; 13us; 231us; 232us; 233us; 233us; 234us; 235us; 236us; 237us; 238us; 239us; 240us; 241us; 242us; 13us; 231us; 232us; 233us; 234us; 234us; 235us; 236us; 237us; 238us; 239us; 240us; 241us; 242us; 13us; 231us; 232us; 233us; 234us; 235us; 235us; 236us; 237us; 238us; 239us; 240us; 241us; 242us; 13us; 231us; 232us; 233us; 234us; 235us; 236us; 236us; 237us; 238us; 239us; 240us; 241us; 242us; 13us; 231us; 232us; 233us; 234us; 235us; 236us; 237us; 237us; 238us; 239us; 240us; 241us; 242us; 13us; 231us; 232us; 233us; 234us; 235us; 236us; 237us; 238us; 238us; 239us; 240us; 241us; 242us; 13us; 231us; 232us; 233us; 234us; 235us; 236us; 237us; 238us; 239us; 239us; 240us; 241us; 242us; 13us; 231us; 232us; 233us; 234us; 235us; 236us; 237us; 238us; 239us; 240us; 240us; 241us; 242us; 13us; 231us; 232us; 233us; 234us; 235us; 236us; 237us; 238us; 239us; 240us; 241us; 241us; 242us; 13us; 231us; 232us; 233us; 234us; 235us; 236us; 237us; 238us; 239us; 240us; 241us; 242us; 242us; 1us; 231us; 1us; 232us; 1us; 233us; 1us; 234us; 1us; 235us; 1us; 236us; 1us; 237us; 1us; 238us; 1us; 239us; 1us; 240us; 1us; 241us; 1us; 242us; 1us; 243us; 1us; 244us; 1us; 245us; 1us; 246us; 1us; 247us; 1us; 248us; 1us; 249us; 1us; 250us; 1us; 251us; 1us; 252us; 1us; 253us; 1us; 254us; 1us; 255us; 1us; 256us; 1us; 259us; 1us; 260us; 1us; 261us; 1us; 262us; 1us; 263us; 1us; 264us; 1us; 264us; 1us; 265us; 1us; 265us; 1us; 266us; 1us; 266us; 1us; 267us; 1us; 267us; 1us; 268us; 1us; 269us; 1us; 270us; 1us; 270us; 1us; 271us; 1us; 271us; 1us; 271us; 1us; 271us; 1us; 271us; 1us; 272us; 1us; 272us; 1us; 272us; 1us; 272us; 1us; 272us; 1us; 273us; 1us; 274us; 1us; 275us; 1us; 276us; 1us; 277us; 1us; 278us; 1us; 279us; 1us; 280us; 2us; 281us; 297us; 1us; 282us; 1us; 283us; 1us; 284us; 1us; 285us; 1us; 285us; 1us; 285us; 1us; 286us; 1us; 286us; 1us; 286us; 1us; 287us; 1us; 287us; 1us; 287us; 1us; 287us; 4us; 288us; 299us; 303us; 304us; 6us; 288us; 299us; 303us; 304us; 311us; 312us; 3us; 288us; 303us; 304us; 5us; 288us; 303us; 304us; 311us; 312us; 3us; 288us; 303us; 304us; 4us; 288us; 303us; 304us; 312us; 1us; 288us; 1us; 288us; 1us; 288us; 2us; 292us; 294us; 1us; 293us; 1us; 294us; 1us; 294us; 1us; 295us; 2us; 296us; 298us; 1us; 298us; 1us; 300us; 1us; 304us; 2us; 304us; 312us; 1us; 304us; 2us; 305us; 306us; 1us; 306us; 1us; 306us; 1us; 311us; 1us; 312us; |]
let _fsyacc_stateToProdIdxsTableRowOffsets = [|0us; 2us; 4us; 6us; 8us; 11us; 13us; 15us; 17us; 19us; 21us; 23us; 25us; 29us; 31us; 33us; 35us; 40us; 44us; 46us; 48us; 50us; 52us; 54us; 56us; 59us; 61us; 63us; 65us; 70us; 72us; 74us; 76us; 78us; 80us; 82us; 84us; 88us; 90us; 92us; 94us; 96us; 98us; 100us; 103us; 105us; 107us; 109us; 111us; 114us; 117us; 119us; 123us; 126us; 129us; 131us; 133us; 135us; 137us; 139us; 142us; 151us; 156us; 161us; 166us; 168us; 170us; 172us; 174us; 177us; 180us; 184us; 186us; 188us; 190us; 192us; 194us; 196us; 198us; 200us; 202us; 204us; 206us; 209us; 211us; 213us; 215us; 217us; 219us; 221us; 223us; 225us; 227us; 229us; 231us; 233us; 235us; 237us; 239us; 241us; 243us; 248us; 250us; 253us; 255us; 257us; 259us; 261us; 263us; 265us; 267us; 269us; 271us; 273us; 275us; 278us; 286us; 289us; 291us; 294us; 302us; 311us; 313us; 315us; 318us; 328us; 337us; 341us; 343us; 348us; 350us; 352us; 354us; 356us; 359us; 361us; 366us; 368us; 370us; 372us; 374us; 376us; 378us; 382us; 384us; 386us; 388us; 390us; 392us; 394us; 396us; 398us; 400us; 402us; 404us; 406us; 408us; 410us; 412us; 414us; 416us; 418us; 420us; 422us; 424us; 426us; 428us; 430us; 432us; 434us; 436us; 438us; 441us; 443us; 446us; 448us; 450us; 453us; 455us; 458us; 460us; 462us; 464us; 466us; 468us; 470us; 472us; 474us; 476us; 478us; 480us; 482us; 484us; 486us; 488us; 491us; 493us; 495us; 497us; 499us; 501us; 503us; 508us; 510us; 512us; 514us; 516us; 518us; 520us; 522us; 525us; 527us; 529us; 531us; 533us; 536us; 538us; 540us; 542us; 544us; 546us; 548us; 550us; 552us; 554us; 556us; 558us; 560us; 563us; 566us; 568us; 570us; 572us; 575us; 577us; 580us; 582us; 584us; 586us; 588us; 590us; 592us; 594us; 596us; 600us; 602us; 604us; 606us; 608us; 610us; 612us; 614us; 616us; 618us; 620us; 622us; 625us; 627us; 629us; 631us; 633us; 635us; 637us; 639us; 641us; 644us; 646us; 648us; 650us; 655us; 657us; 659us; 661us; 664us; 666us; 668us; 673us; 678us; 680us; 682us; 687us; 689us; 692us; 694us; 696us; 698us; 700us; 702us; 704us; 706us; 708us; 710us; 713us; 715us; 717us; 719us; 721us; 723us; 726us; 728us; 730us; 732us; 734us; 736us; 738us; 740us; 742us; 744us; 746us; 751us; 754us; 757us; 760us; 763us; 766us; 768us; 773us; 778us; 783us; 788us; 793us; 799us; 805us; 811us; 816us; 821us; 826us; 831us; 833us; 835us; 837us; 839us; 850us; 859us; 861us; 866us; 868us; 870us; 872us; 874us; 876us; 878us; 880us; 882us; 884us; 886us; 909us; 913us; 915us; 920us; 924us; 926us; 928us; 930us; 932us; 934us; 936us; 938us; 940us; 954us; 956us; 958us; 960us; 974us; 976us; 978us; 980us; 982us; 996us; 1010us; 1024us; 1038us; 1052us; 1066us; 1080us; 1094us; 1108us; 1122us; 1136us; 1150us; 1164us; 1166us; 1168us; 1170us; 1172us; 1174us; 1176us; 1178us; 1180us; 1182us; 1184us; 1186us; 1188us; 1190us; 1192us; 1194us; 1196us; 1198us; 1200us; 1202us; 1204us; 1206us; 1208us; 1210us; 1212us; 1214us; 1216us; 1218us; 1220us; 1222us; 1224us; 1226us; 1228us; 1230us; 1232us; 1234us; 1236us; 1238us; 1240us; 1242us; 1244us; 1246us; 1248us; 1250us; 1252us; 1254us; 1256us; 1258us; 1260us; 1262us; 1264us; 1266us; 1268us; 1270us; 1272us; 1274us; 1276us; 1278us; 1280us; 1282us; 1284us; 1286us; 1289us; 1291us; 1293us; 1295us; 1297us; 1299us; 1301us; 1303us; 1305us; 1307us; 1309us; 1311us; 1313us; 1315us; 1320us; 1327us; 1331us; 1337us; 1341us; 1346us; 1348us; 1350us; 1352us; 1355us; 1357us; 1359us; 1361us; 1363us; 1366us; 1368us; 1370us; 1372us; 1375us; 1377us; 1380us; 1382us; 1384us; 1386us; |]
let _fsyacc_action_rows = 480
let _fsyacc_actionTableElements = [|3us; 32768us; 61us; 68us; 111us; 59us; 117us; 3us; 0us; 49152us; 0us; 16385us; 0us; 16386us; 2us; 32768us; 115us; 5us; 117us; 7us; 3us; 16389us; 61us; 68us; 111us; 59us; 117us; 3us; 0us; 16387us; 0us; 16388us; 0us; 16390us; 0us; 16391us; 0us; 16392us; 0us; 16393us; 1us; 16394us; 110us; 52us; 0us; 16395us; 0us; 16396us; 0us; 16397us; 2us; 16397us; 110us; 52us; 112us; 64us; 2us; 16399us; 44us; 22us; 110us; 48us; 1us; 16409us; 42us; 34us; 1us; 16419us; 46us; 46us; 0us; 16398us; 0us; 16400us; 1us; 32768us; 43us; 23us; 19us; 32768us; 5us; 437us; 6us; 438us; 7us; 436us; 8us; 441us; 9us; 440us; 10us; 439us; 11us; 443us; 12us; 444us; 13us; 469us; 14us; 448us; 20us; 445us; 36us; 428us; 37us; 423us; 87us; 330us; 91us; 415us; 93us; 417us; 94us; 411us; 95us; 413us; 111us; 63us; 1us; 16401us; 116us; 25us; 19us; 32768us; 5us; 437us; 6us; 438us; 7us; 436us; 8us; 441us; 9us; 440us; 10us; 439us; 11us; 443us; 12us; 444us; 13us; 469us; 14us; 448us; 20us; 445us; 36us; 428us; 37us; 423us; 87us; 330us; 91us; 415us; 93us; 417us; 94us; 411us; 95us; 413us; 111us; 63us; 0us; 16402us; 0us; 16403us; 7us; 16405us; 40us; 32us; 41us; 31us; 69us; 394us; 70us; 396us; 88us; 393us; 89us; 328us; 90us; 395us; 0us; 16404us; 0us; 16406us; 0us; 16407us; 0us; 16408us; 0us; 16410us; 2us; 32768us; 11us; 42us; 13us; 470us; 0us; 16411us; 2us; 16412us; 39us; 39us; 116us; 37us; 2us; 32768us; 11us; 42us; 13us; 470us; 0us; 16413us; 2us; 32768us; 11us; 42us; 13us; 470us; 0us; 16414us; 0us; 16415us; 0us; 16416us; 1us; 16420us; 46us; 46us; 0us; 16421us; 0us; 16422us; 0us; 16423us; 0us; 16424us; 2us; 16429us; 33us; 57us; 58us; 58us; 2us; 32768us; 61us; 68us; 111us; 59us; 0us; 16425us; 2us; 32768us; 110us; 52us; 112us; 64us; 2us; 16429us; 33us; 57us; 58us; 58us; 2us; 32768us; 61us; 68us; 111us; 59us; 0us; 16426us; 0us; 16427us; 0us; 16428us; 0us; 16430us; 0us; 16431us; 2us; 32768us; 61us; 68us; 111us; 59us; 4us; 32768us; 13us; 470us; 61us; 68us; 65us; 199us; 111us; 60us; 20us; 32768us; 5us; 437us; 6us; 438us; 7us; 436us; 8us; 441us; 9us; 440us; 10us; 439us; 11us; 443us; 12us; 444us; 13us; 469us; 14us; 448us; 20us; 445us; 36us; 428us; 37us; 423us; 61us; 68us; 87us; 330us; 91us; 415us; 93us; 417us; 94us; 411us; 95us; 413us; 111us; 63us; 20us; 32768us; 5us; 437us; 6us; 438us; 7us; 436us; 8us; 441us; 9us; 440us; 10us; 439us; 11us; 443us; 12us; 444us; 13us; 469us; 14us; 448us; 20us; 445us; 36us; 428us; 37us; 423us; 61us; 68us; 87us; 330us; 91us; 415us; 93us; 417us; 94us; 411us; 95us; 413us; 111us; 63us; 20us; 32768us; 5us; 437us; 6us; 438us; 7us; 436us; 8us; 441us; 9us; 440us; 10us; 439us; 11us; 443us; 12us; 444us; 13us; 469us; 14us; 448us; 20us; 445us; 36us; 428us; 37us; 423us; 61us; 68us; 87us; 330us; 91us; 415us; 93us; 417us; 94us; 411us; 95us; 413us; 111us; 63us; 0us; 16432us; 1us; 32768us; 112us; 66us; 0us; 16433us; 0us; 16434us; 9us; 16437us; 18us; 86us; 24us; 93us; 25us; 92us; 26us; 91us; 27us; 90us; 28us; 88us; 33us; 89us; 58us; 94us; 103us; 87us; 20us; 32768us; 5us; 437us; 6us; 438us; 7us; 436us; 8us; 441us; 9us; 440us; 10us; 439us; 11us; 443us; 12us; 444us; 13us; 469us; 14us; 448us; 20us; 445us; 36us; 428us; 37us; 423us; 87us; 330us; 91us; 415us; 93us; 417us; 94us; 411us; 95us; 413us; 97us; 98us; 111us; 63us; 3us; 16463us; 55us; 111us; 109us; 107us; 116us; 95us; 1us; 16463us; 55us; 111us; 1us; 16544us; 45us; 267us; 1us; 16547us; 63us; 270us; 1us; 16553us; 22us; 278us; 1us; 16555us; 21us; 280us; 0us; 16435us; 1us; 16544us; 45us; 267us; 1us; 16547us; 63us; 270us; 1us; 16553us; 22us; 278us; 1us; 16555us; 21us; 280us; 0us; 16436us; 9us; 16438us; 18us; 86us; 24us; 93us; 25us; 92us; 26us; 91us; 27us; 90us; 28us; 88us; 33us; 89us; 58us; 94us; 103us; 87us; 0us; 16439us; 0us; 16440us; 0us; 16441us; 0us; 16442us; 0us; 16443us; 0us; 16444us; 0us; 16445us; 0us; 16446us; 0us; 16447us; 0us; 16448us; 0us; 16449us; 0us; 16450us; 19us; 32768us; 5us; 437us; 6us; 438us; 7us; 436us; 8us; 441us; 9us; 440us; 10us; 439us; 11us; 443us; 12us; 444us; 13us; 469us; 14us; 448us; 20us; 445us; 36us; 428us; 37us; 423us; 87us; 330us; 91us; 415us; 93us; 417us; 94us; 411us; 95us; 413us; 111us; 63us; 0us; 16451us; 0us; 16452us; 0us; 16453us; 0us; 16454us; 8us; 16456us; 8us; 106us; 13us; 470us; 60us; 102us; 69us; 394us; 70us; 396us; 88us; 393us; 89us; 328us; 90us; 395us; 0us; 16455us; 2us; 32768us; 8us; 104us; 13us; 470us; 0us; 16457us; 0us; 16458us; 0us; 16459us; 0us; 16460us; 1us; 32768us; 56us; 109us; 0us; 16461us; 0us; 16462us; 0us; 16464us; 4us; 32768us; 3us; 113us; 13us; 470us; 65us; 199us; 111us; 60us; 0us; 16465us; 0us; 16466us; 1us; 16467us; 116us; 117us; 7us; 16468us; 100us; 151us; 101us; 152us; 102us; 154us; 103us; 156us; 104us; 142us; 105us; 157us; 106us; 160us; 1us; 32768us; 116us; 118us; 3us; 32768us; 13us; 470us; 65us; 199us; 111us; 60us; 3us; 32768us; 13us; 470us; 65us; 199us; 111us; 60us; 7us; 16469us; 100us; 151us; 101us; 152us; 102us; 154us; 103us; 156us; 104us; 142us; 105us; 157us; 106us; 160us; 8us; 16469us; 100us; 151us; 101us; 152us; 102us; 154us; 103us; 156us; 104us; 142us; 105us; 157us; 106us; 160us; 112us; 181us; 0us; 16470us; 0us; 16471us; 1us; 16471us; 112us; 189us; 9us; 16476us; 100us; 151us; 101us; 152us; 102us; 154us; 103us; 156us; 104us; 142us; 105us; 157us; 106us; 160us; 107us; 127us; 108us; 129us; 9us; 32768us; 100us; 151us; 101us; 152us; 102us; 154us; 103us; 156us; 104us; 142us; 105us; 157us; 106us; 160us; 107us; 134us; 108us; 136us; 3us; 32768us; 13us; 470us; 65us; 199us; 111us; 60us; 19us; 32768us; 5us; 437us; 6us; 438us; 7us; 436us; 8us; 441us; 9us; 440us; 10us; 439us; 11us; 443us; 12us; 444us; 13us; 469us; 14us; 448us; 20us; 445us; 36us; 428us; 37us; 423us; 87us; 330us; 91us; 415us; 93us; 417us; 94us; 411us; 95us; 413us; 111us; 63us; 5us; 16472us; 69us; 394us; 70us; 396us; 88us; 393us; 89us; 328us; 90us; 395us; 1us; 32768us; 111us; 130us; 1us; 32768us; 13us; 470us; 1us; 32768us; 112us; 132us; 0us; 16473us; 3us; 32768us; 13us; 470us; 65us; 199us; 111us; 60us; 19us; 32768us; 5us; 437us; 6us; 438us; 7us; 436us; 8us; 441us; 9us; 440us; 10us; 439us; 11us; 443us; 12us; 444us; 13us; 469us; 14us; 448us; 20us; 445us; 36us; 428us; 37us; 423us; 87us; 330us; 91us; 415us; 93us; 417us; 94us; 411us; 95us; 413us; 111us; 63us; 5us; 16474us; 69us; 394us; 70us; 396us; 88us; 393us; 89us; 328us; 90us; 395us; 1us; 32768us; 111us; 137us; 1us; 32768us; 13us; 470us; 1us; 32768us; 112us; 139us; 0us; 16475us; 3us; 32768us; 13us; 470us; 65us; 199us; 111us; 60us; 0us; 16477us; 3us; 16487us; 101us; 163us; 105us; 148us; 106us; 145us; 1us; 32768us; 100us; 144us; 0us; 16478us; 1us; 16489us; 64us; 164us; 1us; 32768us; 100us; 147us; 0us; 16479us; 1us; 16489us; 64us; 164us; 1us; 32768us; 100us; 150us; 0us; 16480us; 0us; 16481us; 1us; 32768us; 100us; 153us; 0us; 16482us; 1us; 32768us; 100us; 155us; 0us; 16483us; 0us; 16484us; 1us; 16489us; 64us; 164us; 1us; 32768us; 100us; 159us; 0us; 16485us; 1us; 16489us; 64us; 164us; 1us; 32768us; 100us; 162us; 0us; 16486us; 0us; 16488us; 0us; 16490us; 0us; 16492us; 1us; 32768us; 111us; 167us; 1us; 32768us; 13us; 470us; 1us; 32768us; 112us; 169us; 0us; 16493us; 0us; 16494us; 1us; 16494us; 112us; 183us; 0us; 16495us; 1us; 16495us; 112us; 182us; 0us; 16496us; 0us; 16497us; 1us; 16497us; 112us; 188us; 0us; 16498us; 1us; 16498us; 112us; 180us; 0us; 16499us; 0us; 16500us; 0us; 16501us; 0us; 16502us; 0us; 16503us; 1us; 16491us; 34us; 166us; 26us; 16571us; 21us; 16574us; 22us; 16574us; 30us; 16574us; 42us; 16574us; 44us; 16574us; 45us; 16574us; 46us; 16574us; 53us; 16574us; 54us; 16574us; 62us; 301us; 63us; 16574us; 79us; 302us; 100us; 16574us; 101us; 16574us; 102us; 16574us; 103us; 16574us; 104us; 16574us; 105us; 16574us; 106us; 16574us; 107us; 16574us; 108us; 16574us; 110us; 16574us; 112us; 16574us; 115us; 16574us; 116us; 16574us; 117us; 16574us; 3us; 16541us; 30us; 257us; 53us; 250us; 54us; 249us; 0us; 16504us; 0us; 16505us; 0us; 16506us; 24us; 16571us; 21us; 16574us; 22us; 16574us; 42us; 16574us; 44us; 16574us; 45us; 16574us; 46us; 16574us; 62us; 301us; 63us; 16574us; 79us; 302us; 100us; 16574us; 101us; 16574us; 102us; 16574us; 103us; 16574us; 104us; 16574us; 105us; 16574us; 106us; 16574us; 107us; 16574us; 108us; 16574us; 110us; 16574us; 111us; 16574us; 112us; 16574us; 115us; 16574us; 116us; 16574us; 117us; 16574us; 1us; 16508us; 111us; 193us; 0us; 16507us; 1us; 32768us; 13us; 470us; 2us; 32768us; 112us; 195us; 116us; 197us; 0us; 16509us; 0us; 16510us; 1us; 32768us; 13us; 470us; 0us; 16511us; 1us; 32768us; 111us; 200us; 19us; 32768us; 5us; 437us; 6us; 438us; 7us; 436us; 8us; 441us; 9us; 440us; 10us; 439us; 11us; 443us; 12us; 444us; 13us; 469us; 14us; 448us; 20us; 445us; 36us; 428us; 37us; 423us; 87us; 330us; 91us; 415us; 93us; 417us; 94us; 411us; 95us; 413us; 111us; 63us; 6us; 32768us; 69us; 394us; 70us; 396us; 88us; 393us; 89us; 328us; 90us; 395us; 116us; 202us; 1us; 32768us; 8us; 442us; 1us; 32768us; 47us; 207us; 1us; 32768us; 112us; 205us; 23us; 16571us; 21us; 16574us; 22us; 16574us; 42us; 16574us; 44us; 16574us; 45us; 16574us; 46us; 16574us; 62us; 301us; 63us; 16574us; 79us; 302us; 100us; 16574us; 101us; 16574us; 102us; 16574us; 103us; 16574us; 104us; 16574us; 105us; 16574us; 106us; 16574us; 107us; 16574us; 108us; 16574us; 110us; 16574us; 112us; 16574us; 115us; 16574us; 116us; 16574us; 117us; 16574us; 0us; 16512us; 1us; 32768us; 111us; 208us; 2us; 32768us; 13us; 470us; 15us; 222us; 2us; 32768us; 112us; 210us; 116us; 212us; 0us; 16513us; 0us; 16514us; 2us; 32768us; 13us; 470us; 15us; 222us; 0us; 16515us; 2us; 32768us; 2us; 307us; 46us; 215us; 1us; 32768us; 17us; 216us; 0us; 16516us; 1us; 16519us; 32us; 226us; 1us; 32768us; 16us; 219us; 1us; 32768us; 8us; 442us; 3us; 16521us; 0us; 239us; 7us; 240us; 31us; 241us; 0us; 16517us; 1us; 32768us; 16us; 223us; 1us; 32768us; 8us; 442us; 1us; 32768us; 47us; 207us; 0us; 16518us; 0us; 16520us; 3us; 16522us; 0us; 239us; 7us; 240us; 31us; 241us; 3us; 16523us; 0us; 239us; 7us; 240us; 31us; 241us; 0us; 16524us; 0us; 16525us; 1us; 32768us; 107us; 233us; 1us; 32768us; 107us; 234us; 1us; 32768us; 1us; 235us; 2us; 32768us; 0us; 238us; 1us; 235us; 0us; 16526us; 1us; 32768us; 107us; 237us; 1us; 32768us; 0us; 238us; 0us; 16527us; 0us; 16528us; 0us; 16529us; 1us; 32768us; 8us; 442us; 0us; 16530us; 3us; 32768us; 44us; 245us; 63us; 247us; 100us; 244us; 0us; 16532us; 1us; 32768us; 43us; 246us; 0us; 16533us; 1us; 32768us; 43us; 248us; 0us; 16534us; 0us; 16535us; 0us; 16536us; 2us; 32768us; 50us; 306us; 52us; 305us; 1us; 16531us; 46us; 243us; 1us; 32768us; 111us; 254us; 2us; 32768us; 13us; 470us; 29us; 293us; 2us; 32768us; 112us; 256us; 116us; 295us; 0us; 16537us; 2us; 32768us; 50us; 306us; 52us; 305us; 1us; 16531us; 46us; 243us; 1us; 32768us; 111us; 260us; 2us; 16562us; 13us; 470us; 29us; 293us; 1us; 32768us; 112us; 262us; 0us; 16538us; 0us; 16539us; 3us; 16542us; 30us; 257us; 53us; 250us; 54us; 249us; 0us; 16540us; 0us; 16543us; 19us; 32768us; 5us; 437us; 6us; 438us; 7us; 436us; 8us; 441us; 9us; 440us; 10us; 439us; 11us; 443us; 12us; 444us; 13us; 469us; 14us; 448us; 20us; 445us; 36us; 428us; 37us; 423us; 87us; 330us; 91us; 415us; 93us; 417us; 94us; 411us; 95us; 413us; 111us; 63us; 5us; 16545us; 69us; 394us; 70us; 396us; 88us; 393us; 89us; 328us; 90us; 395us; 0us; 16546us; 1us; 32768us; 43us; 271us; 19us; 32768us; 5us; 437us; 6us; 438us; 7us; 436us; 8us; 441us; 9us; 440us; 10us; 439us; 11us; 443us; 12us; 444us; 13us; 469us; 14us; 448us; 20us; 445us; 36us; 428us; 37us; 423us; 87us; 330us; 91us; 415us; 93us; 417us; 94us; 411us; 95us; 413us; 111us; 63us; 2us; 16551us; 23us; 277us; 116us; 274us; 0us; 16548us; 19us; 32768us; 5us; 437us; 6us; 438us; 7us; 436us; 8us; 441us; 9us; 440us; 10us; 439us; 11us; 443us; 12us; 444us; 13us; 469us; 14us; 448us; 20us; 445us; 36us; 428us; 37us; 423us; 87us; 330us; 91us; 415us; 93us; 417us; 94us; 411us; 95us; 413us; 111us; 63us; 5us; 16549us; 69us; 394us; 70us; 396us; 88us; 393us; 89us; 328us; 90us; 395us; 5us; 16550us; 69us; 394us; 70us; 396us; 88us; 393us; 89us; 328us; 90us; 395us; 0us; 16552us; 19us; 32768us; 5us; 437us; 6us; 438us; 7us; 436us; 8us; 441us; 9us; 440us; 10us; 439us; 11us; 443us; 12us; 444us; 13us; 469us; 14us; 448us; 20us; 445us; 36us; 428us; 37us; 423us; 87us; 330us; 91us; 415us; 93us; 417us; 94us; 411us; 95us; 413us; 111us; 63us; 5us; 16554us; 69us; 394us; 70us; 396us; 88us; 393us; 89us; 328us; 90us; 395us; 1us; 32768us; 13us; 470us; 1us; 16556us; 116us; 283us; 0us; 16557us; 1us; 32768us; 13us; 470us; 0us; 16558us; 1us; 32768us; 60us; 286us; 1us; 32768us; 111us; 289us; 0us; 16559us; 0us; 16560us; 1us; 32768us; 112us; 290us; 0us; 16561us; 1us; 16563us; 116us; 295us; 0us; 16564us; 0us; 16565us; 0us; 16566us; 2us; 32768us; 13us; 470us; 29us; 293us; 0us; 16567us; 1us; 16568us; 116us; 299us; 0us; 16569us; 1us; 32768us; 13us; 470us; 0us; 16570us; 0us; 16572us; 0us; 16573us; 1us; 32768us; 13us; 470us; 0us; 16575us; 0us; 16578us; 0us; 16579us; 0us; 16587us; 5us; 16588us; 69us; 394us; 70us; 396us; 88us; 393us; 89us; 328us; 90us; 395us; 2us; 32768us; 112us; 353us; 116us; 314us; 2us; 32768us; 112us; 356us; 116us; 314us; 2us; 32768us; 112us; 422us; 116us; 314us; 2us; 32768us; 112us; 447us; 116us; 314us; 1us; 16674us; 116us; 314us; 19us; 32768us; 5us; 437us; 6us; 438us; 7us; 436us; 8us; 441us; 9us; 440us; 10us; 439us; 11us; 443us; 12us; 444us; 13us; 469us; 14us; 448us; 20us; 445us; 36us; 428us; 37us; 423us; 87us; 330us; 91us; 415us; 93us; 417us; 94us; 411us; 95us; 413us; 111us; 63us; 5us; 16589us; 69us; 394us; 70us; 396us; 88us; 393us; 89us; 328us; 90us; 395us; 3us; 16590us; 70us; 396us; 89us; 328us; 90us; 395us; 2us; 16591us; 70us; 396us; 90us; 395us; 0us; 16592us; 0us; 16593us; 7us; 32768us; 69us; 394us; 70us; 396us; 88us; 393us; 89us; 328us; 90us; 395us; 112us; 351us; 116us; 352us; 7us; 32768us; 69us; 394us; 70us; 396us; 88us; 393us; 89us; 328us; 90us; 395us; 112us; 354us; 116us; 355us; 7us; 32768us; 69us; 394us; 70us; 396us; 88us; 393us; 89us; 328us; 90us; 395us; 112us; 420us; 116us; 421us; 6us; 32768us; 60us; 425us; 69us; 394us; 70us; 396us; 88us; 393us; 89us; 328us; 90us; 395us; 6us; 32768us; 69us; 394us; 70us; 396us; 88us; 393us; 89us; 328us; 90us; 395us; 116us; 430us; 6us; 32768us; 69us; 394us; 70us; 396us; 88us; 393us; 89us; 328us; 90us; 395us; 112us; 450us; 8us; 16456us; 8us; 106us; 13us; 470us; 60us; 102us; 69us; 394us; 70us; 396us; 88us; 393us; 89us; 328us; 90us; 395us; 19us; 32768us; 5us; 437us; 6us; 438us; 7us; 436us; 8us; 441us; 9us; 440us; 10us; 439us; 11us; 443us; 12us; 444us; 13us; 469us; 14us; 448us; 20us; 445us; 36us; 428us; 37us; 423us; 87us; 330us; 91us; 415us; 93us; 417us; 94us; 411us; 95us; 413us; 111us; 63us; 19us; 32768us; 5us; 437us; 6us; 438us; 7us; 436us; 8us; 441us; 9us; 440us; 10us; 439us; 11us; 443us; 12us; 444us; 13us; 469us; 14us; 448us; 20us; 445us; 36us; 428us; 37us; 423us; 87us; 330us; 91us; 415us; 93us; 417us; 94us; 411us; 95us; 413us; 111us; 63us; 19us; 32768us; 5us; 437us; 6us; 438us; 7us; 436us; 8us; 441us; 9us; 440us; 10us; 439us; 11us; 443us; 12us; 444us; 13us; 469us; 14us; 448us; 20us; 445us; 36us; 428us; 37us; 423us; 87us; 330us; 91us; 415us; 93us; 417us; 94us; 411us; 95us; 413us; 111us; 63us; 19us; 32768us; 5us; 437us; 6us; 438us; 7us; 436us; 8us; 441us; 9us; 440us; 10us; 439us; 11us; 443us; 12us; 444us; 13us; 469us; 14us; 448us; 20us; 445us; 36us; 428us; 37us; 423us; 87us; 330us; 91us; 415us; 93us; 417us; 94us; 411us; 95us; 413us; 111us; 63us; 8us; 16600us; 59us; 332us; 79us; 399us; 80us; 400us; 81us; 405us; 83us; 402us; 84us; 404us; 85us; 401us; 86us; 403us; 6us; 32768us; 4us; 338us; 5us; 336us; 6us; 333us; 7us; 340us; 68us; 398us; 93us; 397us; 0us; 16594us; 4us; 32768us; 4us; 339us; 5us; 337us; 6us; 335us; 7us; 341us; 0us; 16595us; 0us; 16596us; 0us; 16597us; 0us; 16598us; 0us; 16599us; 0us; 16601us; 0us; 16602us; 18us; 32768us; 5us; 437us; 6us; 438us; 7us; 436us; 8us; 441us; 9us; 440us; 10us; 439us; 11us; 443us; 12us; 444us; 13us; 469us; 14us; 448us; 20us; 445us; 36us; 428us; 37us; 423us; 91us; 415us; 93us; 417us; 94us; 411us; 95us; 413us; 111us; 63us; 0us; 16603us; 0us; 16604us; 17us; 16614us; 66us; 390us; 67us; 389us; 68us; 398us; 71us; 346us; 72us; 357us; 73us; 365us; 74us; 380us; 75us; 381us; 76us; 391us; 77us; 382us; 78us; 383us; 93us; 397us; 94us; 384us; 95us; 385us; 96us; 387us; 97us; 386us; 98us; 388us; 1us; 32768us; 111us; 61us; 0us; 16605us; 2us; 32768us; 71us; 349us; 72us; 361us; 1us; 32768us; 111us; 62us; 0us; 16606us; 0us; 16607us; 19us; 32768us; 5us; 437us; 6us; 438us; 7us; 436us; 8us; 441us; 9us; 440us; 10us; 439us; 11us; 443us; 12us; 444us; 13us; 469us; 14us; 448us; 20us; 445us; 36us; 428us; 37us; 423us; 87us; 330us; 91us; 415us; 93us; 417us; 94us; 411us; 95us; 413us; 111us; 63us; 0us; 16608us; 0us; 16609us; 19us; 32768us; 5us; 437us; 6us; 438us; 7us; 436us; 8us; 441us; 9us; 440us; 10us; 439us; 11us; 443us; 12us; 444us; 13us; 469us; 14us; 448us; 20us; 445us; 36us; 428us; 37us; 423us; 87us; 330us; 91us; 415us; 93us; 417us; 94us; 411us; 95us; 413us; 111us; 63us; 0us; 16610us; 18us; 32768us; 5us; 437us; 6us; 438us; 7us; 436us; 8us; 441us; 9us; 440us; 10us; 439us; 11us; 443us; 12us; 444us; 13us; 469us; 14us; 448us; 20us; 445us; 36us; 428us; 37us; 423us; 91us; 415us; 93us; 417us; 94us; 411us; 95us; 413us; 111us; 63us; 13us; 32768us; 66us; 390us; 67us; 389us; 74us; 380us; 75us; 381us; 76us; 391us; 77us; 382us; 78us; 383us; 90us; 359us; 94us; 384us; 95us; 385us; 96us; 387us; 97us; 386us; 98us; 388us; 18us; 32768us; 5us; 437us; 6us; 438us; 7us; 436us; 8us; 441us; 9us; 440us; 10us; 439us; 11us; 443us; 12us; 444us; 13us; 469us; 14us; 448us; 20us; 445us; 36us; 428us; 37us; 423us; 91us; 415us; 93us; 417us; 94us; 411us; 95us; 413us; 111us; 63us; 0us; 16611us; 18us; 32768us; 5us; 437us; 6us; 438us; 7us; 436us; 8us; 441us; 9us; 440us; 10us; 439us; 11us; 443us; 12us; 444us; 13us; 469us; 14us; 448us; 20us; 445us; 36us; 428us; 37us; 423us; 91us; 415us; 93us; 417us; 94us; 411us; 95us; 413us; 111us; 63us; 13us; 32768us; 66us; 390us; 67us; 389us; 74us; 380us; 75us; 381us; 76us; 391us; 77us; 382us; 78us; 383us; 90us; 363us; 94us; 384us; 95us; 385us; 96us; 387us; 97us; 386us; 98us; 388us; 18us; 32768us; 5us; 437us; 6us; 438us; 7us; 436us; 8us; 441us; 9us; 440us; 10us; 439us; 11us; 443us; 12us; 444us; 13us; 469us; 14us; 448us; 20us; 445us; 36us; 428us; 37us; 423us; 91us; 415us; 93us; 417us; 94us; 411us; 95us; 413us; 111us; 63us; 0us; 16612us; 1us; 32768us; 92us; 366us; 18us; 32768us; 5us; 437us; 6us; 438us; 7us; 436us; 8us; 441us; 9us; 440us; 10us; 439us; 11us; 443us; 12us; 444us; 13us; 469us; 14us; 448us; 20us; 445us; 36us; 428us; 37us; 423us; 91us; 415us; 93us; 417us; 94us; 411us; 95us; 413us; 111us; 63us; 12us; 16613us; 66us; 390us; 67us; 389us; 74us; 380us; 75us; 381us; 76us; 391us; 77us; 382us; 78us; 383us; 94us; 384us; 95us; 385us; 96us; 387us; 97us; 386us; 98us; 388us; 11us; 16615us; 66us; 390us; 67us; 389us; 75us; 381us; 76us; 391us; 77us; 382us; 78us; 383us; 94us; 384us; 95us; 385us; 96us; 387us; 97us; 386us; 98us; 388us; 12us; 16616us; 66us; 390us; 67us; 389us; 74us; 380us; 75us; 381us; 76us; 391us; 77us; 382us; 78us; 383us; 94us; 384us; 95us; 385us; 96us; 387us; 97us; 386us; 98us; 388us; 9us; 16617us; 66us; 390us; 67us; 389us; 75us; 381us; 76us; 391us; 94us; 384us; 95us; 385us; 96us; 387us; 97us; 386us; 98us; 388us; 9us; 16618us; 66us; 390us; 67us; 389us; 75us; 381us; 76us; 391us; 94us; 384us; 95us; 385us; 96us; 387us; 97us; 386us; 98us; 388us; 7us; 16619us; 66us; 390us; 67us; 389us; 75us; 381us; 76us; 391us; 96us; 387us; 97us; 386us; 98us; 388us; 7us; 16620us; 66us; 390us; 67us; 389us; 75us; 381us; 76us; 391us; 96us; 387us; 97us; 386us; 98us; 388us; 2us; 16621us; 75us; 381us; 76us; 391us; 2us; 16622us; 75us; 381us; 76us; 391us; 2us; 16623us; 75us; 381us; 76us; 391us; 2us; 16624us; 75us; 381us; 76us; 391us; 12us; 16625us; 66us; 390us; 67us; 389us; 74us; 380us; 75us; 381us; 76us; 391us; 77us; 382us; 78us; 383us; 94us; 384us; 95us; 385us; 96us; 387us; 97us; 386us; 98us; 388us; 1us; 16626us; 75us; 381us; 18us; 32768us; 5us; 437us; 6us; 438us; 7us; 436us; 8us; 441us; 9us; 440us; 10us; 439us; 11us; 443us; 12us; 444us; 13us; 469us; 14us; 448us; 20us; 445us; 36us; 428us; 37us; 423us; 91us; 415us; 93us; 417us; 94us; 411us; 95us; 413us; 111us; 63us; 18us; 32768us; 5us; 437us; 6us; 438us; 7us; 436us; 8us; 441us; 9us; 440us; 10us; 439us; 11us; 443us; 12us; 444us; 13us; 469us; 14us; 448us; 20us; 445us; 36us; 428us; 37us; 423us; 91us; 415us; 93us; 417us; 94us; 411us; 95us; 413us; 111us; 63us; 18us; 32768us; 5us; 437us; 6us; 438us; 7us; 436us; 8us; 441us; 9us; 440us; 10us; 439us; 11us; 443us; 12us; 444us; 13us; 469us; 14us; 448us; 20us; 445us; 36us; 428us; 37us; 423us; 91us; 415us; 93us; 417us; 94us; 411us; 95us; 413us; 111us; 63us; 18us; 32768us; 5us; 437us; 6us; 438us; 7us; 436us; 8us; 441us; 9us; 440us; 10us; 439us; 11us; 443us; 12us; 444us; 13us; 469us; 14us; 448us; 20us; 445us; 36us; 428us; 37us; 423us; 91us; 415us; 93us; 417us; 94us; 411us; 95us; 413us; 111us; 63us; 18us; 32768us; 5us; 437us; 6us; 438us; 7us; 436us; 8us; 441us; 9us; 440us; 10us; 439us; 11us; 443us; 12us; 444us; 13us; 469us; 14us; 448us; 20us; 445us; 36us; 428us; 37us; 423us; 91us; 415us; 93us; 417us; 94us; 411us; 95us; 413us; 111us; 63us; 18us; 32768us; 5us; 437us; 6us; 438us; 7us; 436us; 8us; 441us; 9us; 440us; 10us; 439us; 11us; 443us; 12us; 444us; 13us; 469us; 14us; 448us; 20us; 445us; 36us; 428us; 37us; 423us; 91us; 415us; 93us; 417us; 94us; 411us; 95us; 413us; 111us; 63us; 18us; 32768us; 5us; 437us; 6us; 438us; 7us; 436us; 8us; 441us; 9us; 440us; 10us; 439us; 11us; 443us; 12us; 444us; 13us; 469us; 14us; 448us; 20us; 445us; 36us; 428us; 37us; 423us; 91us; 415us; 93us; 417us; 94us; 411us; 95us; 413us; 111us; 63us; 18us; 32768us; 5us; 437us; 6us; 438us; 7us; 436us; 8us; 441us; 9us; 440us; 10us; 439us; 11us; 443us; 12us; 444us; 13us; 469us; 14us; 448us; 20us; 445us; 36us; 428us; 37us; 423us; 91us; 415us; 93us; 417us; 94us; 411us; 95us; 413us; 111us; 63us; 18us; 32768us; 5us; 437us; 6us; 438us; 7us; 436us; 8us; 441us; 9us; 440us; 10us; 439us; 11us; 443us; 12us; 444us; 13us; 469us; 14us; 448us; 20us; 445us; 36us; 428us; 37us; 423us; 91us; 415us; 93us; 417us; 94us; 411us; 95us; 413us; 111us; 63us; 18us; 32768us; 5us; 437us; 6us; 438us; 7us; 436us; 8us; 441us; 9us; 440us; 10us; 439us; 11us; 443us; 12us; 444us; 13us; 469us; 14us; 448us; 20us; 445us; 36us; 428us; 37us; 423us; 91us; 415us; 93us; 417us; 94us; 411us; 95us; 413us; 111us; 63us; 18us; 32768us; 5us; 437us; 6us; 438us; 7us; 436us; 8us; 441us; 9us; 440us; 10us; 439us; 11us; 443us; 12us; 444us; 13us; 469us; 14us; 448us; 20us; 445us; 36us; 428us; 37us; 423us; 91us; 415us; 93us; 417us; 94us; 411us; 95us; 413us; 111us; 63us; 18us; 32768us; 5us; 437us; 6us; 438us; 7us; 436us; 8us; 441us; 9us; 440us; 10us; 439us; 11us; 443us; 12us; 444us; 13us; 469us; 14us; 448us; 20us; 445us; 36us; 428us; 37us; 423us; 91us; 415us; 93us; 417us; 94us; 411us; 95us; 413us; 111us; 63us; 0us; 16627us; 0us; 16628us; 0us; 16629us; 0us; 16630us; 0us; 16631us; 0us; 16632us; 0us; 16633us; 0us; 16634us; 0us; 16635us; 0us; 16636us; 0us; 16637us; 0us; 16638us; 0us; 16639us; 0us; 16640us; 0us; 16643us; 0us; 16644us; 0us; 16645us; 0us; 16646us; 0us; 16647us; 18us; 32768us; 5us; 437us; 6us; 438us; 7us; 436us; 8us; 441us; 9us; 440us; 10us; 439us; 11us; 443us; 12us; 444us; 13us; 469us; 14us; 448us; 20us; 445us; 36us; 428us; 37us; 423us; 91us; 415us; 93us; 417us; 94us; 411us; 95us; 413us; 111us; 63us; 0us; 16648us; 18us; 32768us; 5us; 437us; 6us; 438us; 7us; 436us; 8us; 441us; 9us; 440us; 10us; 439us; 11us; 443us; 12us; 444us; 13us; 469us; 14us; 448us; 20us; 445us; 36us; 428us; 37us; 423us; 91us; 415us; 93us; 417us; 94us; 411us; 95us; 413us; 111us; 63us; 0us; 16649us; 18us; 32768us; 5us; 437us; 6us; 438us; 7us; 436us; 8us; 441us; 9us; 440us; 10us; 439us; 11us; 443us; 12us; 444us; 13us; 469us; 14us; 448us; 20us; 445us; 36us; 428us; 37us; 423us; 91us; 415us; 93us; 417us; 94us; 411us; 95us; 413us; 111us; 63us; 0us; 16650us; 18us; 32768us; 5us; 437us; 6us; 438us; 7us; 436us; 8us; 441us; 9us; 440us; 10us; 439us; 11us; 443us; 12us; 444us; 13us; 469us; 14us; 448us; 20us; 445us; 36us; 428us; 37us; 423us; 91us; 415us; 93us; 417us; 94us; 411us; 95us; 413us; 111us; 63us; 0us; 16651us; 0us; 16652us; 0us; 16653us; 19us; 32768us; 5us; 437us; 6us; 438us; 7us; 436us; 8us; 441us; 9us; 440us; 10us; 439us; 11us; 443us; 12us; 444us; 13us; 469us; 14us; 448us; 20us; 445us; 36us; 428us; 37us; 423us; 87us; 330us; 91us; 415us; 93us; 417us; 94us; 411us; 95us; 413us; 111us; 63us; 0us; 16654us; 1us; 32768us; 111us; 424us; 19us; 32768us; 5us; 437us; 6us; 438us; 7us; 436us; 8us; 441us; 9us; 440us; 10us; 439us; 11us; 443us; 12us; 444us; 13us; 469us; 14us; 448us; 20us; 445us; 36us; 428us; 37us; 423us; 87us; 330us; 91us; 415us; 93us; 417us; 94us; 411us; 95us; 413us; 111us; 63us; 1us; 32768us; 38us; 433us; 1us; 32768us; 112us; 427us; 0us; 16655us; 1us; 32768us; 111us; 429us; 19us; 32768us; 5us; 437us; 6us; 438us; 7us; 436us; 8us; 441us; 9us; 440us; 10us; 439us; 11us; 443us; 12us; 444us; 13us; 469us; 14us; 448us; 20us; 445us; 36us; 428us; 37us; 423us; 87us; 330us; 91us; 415us; 93us; 417us; 94us; 411us; 95us; 413us; 111us; 63us; 1us; 32768us; 38us; 433us; 1us; 32768us; 112us; 432us; 0us; 16656us; 0us; 16657us; 0us; 16658us; 0us; 16659us; 0us; 16660us; 0us; 16661us; 0us; 16662us; 0us; 16663us; 0us; 16664us; 1us; 16665us; 111us; 16681us; 0us; 16666us; 0us; 16667us; 0us; 16668us; 1us; 32768us; 111us; 446us; 19us; 32768us; 5us; 437us; 6us; 438us; 7us; 436us; 8us; 441us; 9us; 440us; 10us; 439us; 11us; 443us; 12us; 444us; 13us; 469us; 14us; 448us; 20us; 445us; 36us; 428us; 37us; 423us; 87us; 330us; 91us; 415us; 93us; 417us; 94us; 411us; 95us; 413us; 111us; 63us; 0us; 16669us; 1us; 32768us; 111us; 449us; 19us; 32768us; 5us; 437us; 6us; 438us; 7us; 436us; 8us; 441us; 9us; 440us; 10us; 439us; 11us; 443us; 12us; 444us; 13us; 469us; 14us; 448us; 20us; 445us; 36us; 428us; 37us; 423us; 87us; 330us; 91us; 415us; 93us; 417us; 94us; 411us; 95us; 413us; 111us; 63us; 0us; 16670us; 1us; 32768us; 111us; 452us; 19us; 16675us; 5us; 437us; 6us; 438us; 7us; 436us; 8us; 441us; 9us; 440us; 10us; 439us; 11us; 443us; 12us; 444us; 13us; 469us; 14us; 448us; 20us; 445us; 36us; 428us; 37us; 423us; 87us; 330us; 91us; 415us; 93us; 417us; 94us; 411us; 95us; 413us; 111us; 63us; 1us; 32768us; 112us; 454us; 0us; 16671us; 1us; 16683us; 99us; 457us; 1us; 16683us; 99us; 458us; 1us; 32768us; 13us; 470us; 2us; 32768us; 13us; 470us; 97us; 478us; 2us; 16687us; 99us; 472us; 111us; 461us; 2us; 16687us; 99us; 473us; 111us; 461us; 19us; 16673us; 5us; 437us; 6us; 438us; 7us; 436us; 8us; 441us; 9us; 440us; 10us; 439us; 11us; 443us; 12us; 444us; 13us; 469us; 14us; 448us; 20us; 445us; 36us; 428us; 37us; 423us; 87us; 330us; 91us; 415us; 93us; 417us; 94us; 411us; 95us; 413us; 111us; 63us; 1us; 32768us; 112us; 463us; 0us; 16672us; 1us; 16676us; 116us; 466us; 0us; 16677us; 19us; 32768us; 5us; 437us; 6us; 438us; 7us; 436us; 8us; 441us; 9us; 440us; 10us; 439us; 11us; 443us; 12us; 444us; 13us; 469us; 14us; 448us; 20us; 445us; 36us; 428us; 37us; 423us; 87us; 330us; 91us; 415us; 93us; 417us; 94us; 411us; 95us; 413us; 111us; 63us; 0us; 16678us; 0us; 16679us; 60us; 16680us; 8us; 16682us; 13us; 16682us; 21us; 16682us; 22us; 16682us; 23us; 16682us; 40us; 16682us; 41us; 16682us; 42us; 16682us; 44us; 16682us; 45us; 16682us; 46us; 16682us; 55us; 16682us; 59us; 16682us; 60us; 16682us; 63us; 16682us; 66us; 16682us; 67us; 16682us; 68us; 16682us; 69us; 16682us; 70us; 16682us; 71us; 16682us; 72us; 16682us; 73us; 16682us; 74us; 16682us; 75us; 16682us; 76us; 16682us; 77us; 16682us; 78us; 16682us; 79us; 16682us; 80us; 16682us; 81us; 16682us; 83us; 16682us; 84us; 16682us; 85us; 16682us; 86us; 16682us; 88us; 16682us; 89us; 16682us; 90us; 16682us; 93us; 16682us; 94us; 16682us; 95us; 16682us; 96us; 16682us; 97us; 16682us; 98us; 16682us; 99us; 16682us; 100us; 16682us; 101us; 16682us; 102us; 16682us; 103us; 16682us; 104us; 16682us; 105us; 16682us; 106us; 16682us; 107us; 16682us; 108us; 16682us; 109us; 16682us; 110us; 16682us; 112us; 16682us; 115us; 16682us; 116us; 16682us; 117us; 16682us; 0us; 16682us; 0us; 16684us; 1us; 32768us; 13us; 470us; 2us; 32768us; 13us; 470us; 97us; 479us; 0us; 16688us; 1us; 16689us; 99us; 476us; 1us; 32768us; 13us; 470us; 0us; 16690us; 0us; 16695us; 0us; 16696us; |]
let _fsyacc_actionTableRowOffsets = [|0us; 4us; 5us; 6us; 7us; 10us; 14us; 15us; 16us; 17us; 18us; 19us; 20us; 22us; 23us; 24us; 25us; 28us; 31us; 33us; 35us; 36us; 37us; 39us; 59us; 61us; 81us; 82us; 83us; 91us; 92us; 93us; 94us; 95us; 96us; 99us; 100us; 103us; 106us; 107us; 110us; 111us; 112us; 113us; 115us; 116us; 117us; 118us; 119us; 122us; 125us; 126us; 129us; 132us; 135us; 136us; 137us; 138us; 139us; 140us; 143us; 148us; 169us; 190us; 211us; 212us; 214us; 215us; 216us; 226us; 247us; 251us; 253us; 255us; 257us; 259us; 261us; 262us; 264us; 266us; 268us; 270us; 271us; 281us; 282us; 283us; 284us; 285us; 286us; 287us; 288us; 289us; 290us; 291us; 292us; 293us; 313us; 314us; 315us; 316us; 317us; 326us; 327us; 330us; 331us; 332us; 333us; 334us; 336us; 337us; 338us; 339us; 344us; 345us; 346us; 348us; 356us; 358us; 362us; 366us; 374us; 383us; 384us; 385us; 387us; 397us; 407us; 411us; 431us; 437us; 439us; 441us; 443us; 444us; 448us; 468us; 474us; 476us; 478us; 480us; 481us; 485us; 486us; 490us; 492us; 493us; 495us; 497us; 498us; 500us; 502us; 503us; 504us; 506us; 507us; 509us; 510us; 511us; 513us; 515us; 516us; 518us; 520us; 521us; 522us; 523us; 524us; 526us; 528us; 530us; 531us; 532us; 534us; 535us; 537us; 538us; 539us; 541us; 542us; 544us; 545us; 546us; 547us; 548us; 549us; 551us; 578us; 582us; 583us; 584us; 585us; 610us; 612us; 613us; 615us; 618us; 619us; 620us; 622us; 623us; 625us; 645us; 652us; 654us; 656us; 658us; 682us; 683us; 685us; 688us; 691us; 692us; 693us; 696us; 697us; 700us; 702us; 703us; 705us; 707us; 709us; 713us; 714us; 716us; 718us; 720us; 721us; 722us; 726us; 730us; 731us; 732us; 734us; 736us; 738us; 741us; 742us; 744us; 746us; 747us; 748us; 749us; 751us; 752us; 756us; 757us; 759us; 760us; 762us; 763us; 764us; 765us; 768us; 770us; 772us; 775us; 778us; 779us; 782us; 784us; 786us; 789us; 791us; 792us; 793us; 797us; 798us; 799us; 819us; 825us; 826us; 828us; 848us; 851us; 852us; 872us; 878us; 884us; 885us; 905us; 911us; 913us; 915us; 916us; 918us; 919us; 921us; 923us; 924us; 925us; 927us; 928us; 930us; 931us; 932us; 933us; 936us; 937us; 939us; 940us; 942us; 943us; 944us; 945us; 947us; 948us; 949us; 950us; 951us; 957us; 960us; 963us; 966us; 969us; 971us; 991us; 997us; 1001us; 1004us; 1005us; 1006us; 1014us; 1022us; 1030us; 1037us; 1044us; 1051us; 1060us; 1080us; 1100us; 1120us; 1140us; 1149us; 1156us; 1157us; 1162us; 1163us; 1164us; 1165us; 1166us; 1167us; 1168us; 1169us; 1188us; 1189us; 1190us; 1208us; 1210us; 1211us; 1214us; 1216us; 1217us; 1218us; 1238us; 1239us; 1240us; 1260us; 1261us; 1280us; 1294us; 1313us; 1314us; 1333us; 1347us; 1366us; 1367us; 1369us; 1388us; 1401us; 1413us; 1426us; 1436us; 1446us; 1454us; 1462us; 1465us; 1468us; 1471us; 1474us; 1487us; 1489us; 1508us; 1527us; 1546us; 1565us; 1584us; 1603us; 1622us; 1641us; 1660us; 1679us; 1698us; 1717us; 1718us; 1719us; 1720us; 1721us; 1722us; 1723us; 1724us; 1725us; 1726us; 1727us; 1728us; 1729us; 1730us; 1731us; 1732us; 1733us; 1734us; 1735us; 1736us; 1755us; 1756us; 1775us; 1776us; 1795us; 1796us; 1815us; 1816us; 1817us; 1818us; 1838us; 1839us; 1841us; 1861us; 1863us; 1865us; 1866us; 1868us; 1888us; 1890us; 1892us; 1893us; 1894us; 1895us; 1896us; 1897us; 1898us; 1899us; 1900us; 1901us; 1903us; 1904us; 1905us; 1906us; 1908us; 1928us; 1929us; 1931us; 1951us; 1952us; 1954us; 1974us; 1976us; 1977us; 1979us; 1981us; 1983us; 1986us; 1989us; 1992us; 2012us; 2014us; 2015us; 2017us; 2018us; 2038us; 2039us; 2040us; 2101us; 2102us; 2103us; 2105us; 2108us; 2109us; 2111us; 2113us; 2114us; 2115us; |]
let _fsyacc_reductionSymbolCounts = [|1us; 1us; 1us; 3us; 2us; 0us; 1us; 1us; 1us; 1us; 1us; 1us; 1us; 1us; 4us; 0us; 1us; 3us; 3us; 1us; 2us; 0us; 1us; 1us; 1us; 0us; 1us; 2us; 1us; 3us; 3us; 1us; 1us; 0us; 2us; 0us; 1us; 2us; 1us; 1us; 1us; 4us; 4us; 4us; 4us; 0us; 1us; 1us; 3us; 3us; 1us; 9us; 8us; 0us; 1us; 2us; 1us; 1us; 1us; 1us; 1us; 1us; 1us; 1us; 1us; 1us; 1us; 3us; 1us; 1us; 1us; 2us; 0us; 2us; 2us; 1us; 1us; 2us; 1us; 0us; 1us; 2us; 1us; 1us; 1us; 3us; 1us; 1us; 5us; 7us; 5us; 7us; 3us; 3us; 3us; 4us; 4us; 1us; 2us; 2us; 1us; 3us; 3us; 0us; 1us; 0us; 1us; 0us; 1us; 4us; 1us; 1us; 1us; 1us; 1us; 1us; 3us; 5us; 3us; 3us; 4us; 3us; 3us; 3us; 0us; 3us; 1us; 3us; 8us; 4us; 1us; 3us; 3us; 6us; 4us; 0us; 1us; 0us; 1us; 1us; 2us; 2us; 3us; 3us; 1us; 1us; 2us; 0us; 2us; 3us; 3us; 1us; 1us; 6us; 6us; 1us; 2us; 0us; 1us; 1us; 0us; 2us; 1us; 0us; 4us; 3us; 1us; 0us; 1us; 0us; 2us; 0us; 2us; 1us; 3us; 3us; 1us; 2us; 0us; 1us; 1us; 1us; 1us; 3us; 1us; 1us; 3us; 0us; 1us; 1us; 0us; 2us; 0us; 1us; 1us; 1us; 0us; 1us; 1us; 1us; 1us; 0us; 1us; 1us; 1us; 3us; 3us; 3us; 3us; 2us; 3us; 4us; 3us; 4us; 3us; 4us; 1us; 3us; 4us; 3us; 1us; 3us; 4us; 5us; 7us; 6us; 8us; 5us; 6us; 4us; 1us; 3us; 3us; 3us; 3us; 3us; 3us; 3us; 3us; 3us; 3us; 3us; 3us; 1us; 1us; 1us; 1us; 1us; 1us; 1us; 1us; 1us; 1us; 1us; 1us; 1us; 1us; 1us; 1us; 1us; 1us; 1us; 1us; 1us; 2us; 2us; 2us; 2us; 1us; 3us; 5us; 6us; 6us; 1us; 1us; 1us; 1us; 1us; 1us; 1us; 1us; 1us; 1us; 1us; 1us; 4us; 4us; 4us; 6us; 0us; 1us; 0us; 1us; 1us; 3us; 2us; 1us; 1us; 1us; 1us; 1us; 1us; 1us; 3us; 5us; 1us; 3us; 2us; 4us; 0us; 2us; 3us; 5us; |]
let _fsyacc_productionToNonTerminalTable = [|0us; 1us; 2us; 2us; 2us; 3us; 3us; 4us; 5us; 6us; 6us; 7us; 8us; 9us; 10us; 11us; 11us; 12us; 13us; 13us; 14us; 15us; 15us; 16us; 16us; 17us; 17us; 18us; 19us; 19us; 19us; 20us; 20us; 21us; 21us; 22us; 22us; 23us; 23us; 24us; 25us; 25us; 25us; 25us; 25us; 26us; 26us; 26us; 27us; 27us; 28us; 29us; 29us; 30us; 30us; 31us; 31us; 32us; 32us; 33us; 33us; 33us; 33us; 33us; 33us; 33us; 33us; 34us; 34us; 34us; 35us; 35us; 36us; 36us; 36us; 36us; 36us; 37us; 38us; 39us; 39us; 40us; 41us; 41us; 42us; 42us; 43us; 43us; 44us; 44us; 44us; 44us; 44us; 44us; 45us; 45us; 45us; 46us; 46us; 46us; 46us; 47us; 47us; 48us; 48us; 49us; 49us; 50us; 50us; 51us; 52us; 52us; 52us; 52us; 52us; 52us; 53us; 53us; 54us; 54us; 55us; 56us; 56us; 57us; 58us; 58us; 59us; 59us; 60us; 61us; 62us; 62us; 63us; 63us; 63us; 64us; 64us; 65us; 65us; 65us; 65us; 65us; 66us; 67us; 68us; 68us; 68us; 69us; 69us; 69us; 69us; 70us; 70us; 71us; 71us; 72us; 72us; 73us; 73us; 74us; 75us; 75us; 76us; 77us; 77us; 78us; 78us; 79us; 79us; 80us; 80us; 81us; 81us; 82us; 82us; 83us; 84us; 85us; 86us; 86us; 87us; 87us; 88us; 88us; 89us; 90us; 90us; 91us; 91us; 91us; 92us; 92us; 93us; 93us; 94us; 94us; 95us; 95us; 96us; 96us; 96us; 97us; 97us; 98us; 99us; 99us; 100us; 100us; 100us; 100us; 100us; 100us; 100us; 100us; 100us; 100us; 100us; 101us; 101us; 101us; 101us; 102us; 102us; 102us; 102us; 102us; 102us; 102us; 102us; 102us; 102us; 103us; 103us; 103us; 103us; 103us; 103us; 103us; 103us; 103us; 103us; 103us; 103us; 103us; 104us; 104us; 105us; 105us; 106us; 106us; 107us; 107us; 107us; 107us; 107us; 107us; 107us; 108us; 108us; 109us; 109us; 109us; 109us; 109us; 109us; 109us; 109us; 109us; 109us; 109us; 109us; 109us; 109us; 110us; 111us; 111us; 111us; 111us; 111us; 111us; 111us; 112us; 113us; 114us; 114us; 115us; 116us; 117us; 117us; 118us; 118us; 119us; 119us; 120us; 120us; 121us; 122us; 122us; 123us; 124us; 124us; 125us; 125us; 126us; 126us; 127us; 127us; 128us; 128us; 129us; 129us; 130us; 130us; |]
let _fsyacc_immediateActions = [|65535us; 49152us; 16385us; 16386us; 65535us; 65535us; 16387us; 16388us; 16390us; 16391us; 16392us; 16393us; 65535us; 16395us; 16396us; 16397us; 65535us; 65535us; 65535us; 65535us; 16398us; 16400us; 65535us; 65535us; 65535us; 65535us; 16402us; 16403us; 65535us; 16404us; 16406us; 16407us; 16408us; 16410us; 65535us; 16411us; 65535us; 65535us; 16413us; 65535us; 16414us; 16415us; 16416us; 65535us; 16421us; 16422us; 16423us; 16424us; 65535us; 65535us; 16425us; 65535us; 65535us; 65535us; 16426us; 16427us; 16428us; 16430us; 16431us; 65535us; 65535us; 65535us; 65535us; 65535us; 16432us; 65535us; 16433us; 16434us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 16435us; 65535us; 65535us; 65535us; 65535us; 16436us; 65535us; 16439us; 16440us; 16441us; 16442us; 16443us; 16444us; 16445us; 16446us; 16447us; 16448us; 16449us; 16450us; 65535us; 16451us; 16452us; 16453us; 16454us; 65535us; 16455us; 65535us; 16457us; 16458us; 16459us; 16460us; 65535us; 16461us; 16462us; 16464us; 65535us; 16465us; 16466us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 16470us; 16471us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 16473us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 16475us; 65535us; 16477us; 65535us; 65535us; 16478us; 65535us; 65535us; 16479us; 65535us; 65535us; 16480us; 16481us; 65535us; 16482us; 65535us; 16483us; 16484us; 65535us; 65535us; 16485us; 65535us; 65535us; 16486us; 16488us; 16490us; 16492us; 65535us; 65535us; 65535us; 16493us; 16494us; 65535us; 16495us; 65535us; 16496us; 16497us; 65535us; 16498us; 65535us; 16499us; 16500us; 16501us; 16502us; 16503us; 65535us; 65535us; 65535us; 16504us; 16505us; 16506us; 65535us; 65535us; 16507us; 65535us; 65535us; 16509us; 16510us; 65535us; 16511us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 16512us; 65535us; 65535us; 65535us; 16513us; 16514us; 65535us; 16515us; 65535us; 65535us; 16516us; 65535us; 65535us; 65535us; 65535us; 16517us; 65535us; 65535us; 65535us; 16518us; 16520us; 65535us; 65535us; 16524us; 16525us; 65535us; 65535us; 65535us; 65535us; 16526us; 65535us; 65535us; 16527us; 16528us; 16529us; 65535us; 16530us; 65535us; 16532us; 65535us; 16533us; 65535us; 16534us; 16535us; 16536us; 65535us; 65535us; 65535us; 65535us; 65535us; 16537us; 65535us; 65535us; 65535us; 65535us; 65535us; 16538us; 16539us; 65535us; 16540us; 16543us; 65535us; 65535us; 16546us; 65535us; 65535us; 65535us; 16548us; 65535us; 65535us; 65535us; 16552us; 65535us; 65535us; 65535us; 65535us; 16557us; 65535us; 16558us; 65535us; 65535us; 16559us; 16560us; 65535us; 16561us; 65535us; 16564us; 16565us; 16566us; 65535us; 16567us; 65535us; 16569us; 65535us; 16570us; 16572us; 16573us; 65535us; 16575us; 16578us; 16579us; 16587us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 16594us; 65535us; 16595us; 16596us; 16597us; 16598us; 16599us; 16601us; 16602us; 65535us; 16603us; 16604us; 65535us; 65535us; 16605us; 65535us; 65535us; 16606us; 16607us; 65535us; 16608us; 16609us; 65535us; 16610us; 65535us; 65535us; 65535us; 16611us; 65535us; 65535us; 65535us; 16612us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 16627us; 16628us; 16629us; 16630us; 16631us; 16632us; 16633us; 16634us; 16635us; 16636us; 16637us; 16638us; 16639us; 16640us; 16643us; 16644us; 16645us; 16646us; 16647us; 65535us; 16648us; 65535us; 16649us; 65535us; 16650us; 65535us; 16651us; 16652us; 16653us; 65535us; 16654us; 65535us; 65535us; 65535us; 65535us; 16655us; 65535us; 65535us; 65535us; 65535us; 16656us; 16657us; 16658us; 16659us; 16660us; 16661us; 16662us; 16663us; 16664us; 65535us; 16666us; 16667us; 16668us; 65535us; 65535us; 16669us; 65535us; 65535us; 16670us; 65535us; 65535us; 65535us; 16671us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 16672us; 65535us; 16677us; 65535us; 16678us; 16679us; 65535us; 16682us; 16684us; 65535us; 65535us; 16688us; 65535us; 65535us; 16690us; 16695us; 16696us; |]
let _fsyacc_reductions ()  =    [| 
# 1208 "parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : MbSqlAbSyn.Qs list)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
                      raise (Microsoft.FSharp.Text.Parsing.Accept(Microsoft.FSharp.Core.Operators.box _1))
                   )
                 : '_startstart_entry));
# 1217 "parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'sql_statement)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 160 "parser.yy"
                                               _1 
                   )
# 160 "parser.yy"
                 : MbSqlAbSyn.Qs list));
# 1228 "parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 165 "parser.yy"
                                              [] 
                   )
# 165 "parser.yy"
                 : 'sql_statement));
# 1238 "parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'simple_statement_or_begin)) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : 'opt_end_of_input)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 166 "parser.yy"
                                                                                        
                                 //we found a wellformed query...
                                 //join the queries parser-wise instead of inside the action
                                 //as done in the original
                                 [_1] @ _3
                                 
                   )
# 166 "parser.yy"
                 : 'sql_statement));
# 1255 "parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'simple_statement_or_begin)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 172 "parser.yy"
                                                                       
                                 //single query, not terminated.
                                 [_1]
                                 
                   )
# 172 "parser.yy"
                 : 'sql_statement));
# 1269 "parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 178 "parser.yy"
                                                   [] 
                   )
# 178 "parser.yy"
                 : 'opt_end_of_input));
# 1279 "parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'sql_statement)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 179 "parser.yy"
                                                   _1 
                   )
# 179 "parser.yy"
                 : 'opt_end_of_input));
# 1290 "parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'simple_statement)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 182 "parser.yy"
                                                   _1 
                   )
# 182 "parser.yy"
                 : 'simple_statement_or_begin));
# 1301 "parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'select_stmt)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 262 "parser.yy"
                                                               _1 
                   )
# 262 "parser.yy"
                 : 'simple_statement));
# 1312 "parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'query_expression)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 283 "parser.yy"
                                                           _1 
                   )
# 283 "parser.yy"
                 : 'select_stmt));
# 1323 "parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'query_expression_parens)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 284 "parser.yy"
                                                           _1 
                   )
# 284 "parser.yy"
                 : 'select_stmt));
# 1334 "parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'subquery)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 288 "parser.yy"
                                               _1 
                   )
# 288 "parser.yy"
                 : 'row_subquery));
# 1345 "parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'subquery)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 291 "parser.yy"
                                               _1 
                   )
# 291 "parser.yy"
                 : 'table_subquery));
# 1356 "parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'query_expression_parens)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 294 "parser.yy"
                                                                                       _1 
                   )
# 294 "parser.yy"
                 : 'subquery));
# 1367 "parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'query_expression_body)) in
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : 'opt_order_clause)) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : 'opt_limit_clause)) in
            let _4 = (let data = parseState.GetInput(4) in (Microsoft.FSharp.Core.Operators.unbox data : 'opt_locking_clause_list)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 300 "parser.yy"
                                                        
                               let options = [
                                 MbSqlAbSyn.Qs_Option.OptOrder _2
                                 MbSqlAbSyn.Qs_Option.OptLimit _3
                                 MbSqlAbSyn.Qs_Option.OptLocking _4
                                 ]
                               MbSqlAbSyn.Qs.Options (_1,options)
                               
                   )
# 300 "parser.yy"
                 : 'query_expression));
# 1388 "parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 359 "parser.yy"
                                                                       MbSqlAbSyn.Expr.Null 
                   )
# 359 "parser.yy"
                 : 'opt_order_clause));
# 1398 "parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'order_clause)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 360 "parser.yy"
                                                                       MbSqlAbSyn.Expr.ExprList _1 
                   )
# 360 "parser.yy"
                 : 'opt_order_clause));
# 1409 "parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : 'order_list)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 363 "parser.yy"
                                                                       _3 
                   )
# 363 "parser.yy"
                 : 'order_clause));
# 1420 "parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'order_list)) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : 'order_expr)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 366 "parser.yy"
                                                                       _1 @ [_3] 
                   )
# 366 "parser.yy"
                 : 'order_list));
# 1432 "parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'order_expr)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 367 "parser.yy"
                                                                       [_1] 
                   )
# 367 "parser.yy"
                 : 'order_list));
# 1443 "parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'expr)) in
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : 'opt_ordering_direction)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 370 "parser.yy"
                                                            
                                 MbSqlAbSyn.Expr.Unary (_2,_1)
                                 
                   )
# 370 "parser.yy"
                 : 'order_expr));
# 1457 "parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 375 "parser.yy"
                                                       "asc" 
                   )
# 375 "parser.yy"
                 : 'opt_ordering_direction));
# 1467 "parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'ordering_direction)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 376 "parser.yy"
                                                       _1 
                   )
# 376 "parser.yy"
                 : 'opt_ordering_direction));
# 1478 "parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 379 "parser.yy"
                                                       "asc" 
                   )
# 379 "parser.yy"
                 : 'ordering_direction));
# 1488 "parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 380 "parser.yy"
                                                       "desc" 
                   )
# 380 "parser.yy"
                 : 'ordering_direction));
# 1498 "parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 383 "parser.yy"
                                                           MbSqlAbSyn.Expr.Null 
                   )
# 383 "parser.yy"
                 : 'opt_limit_clause));
# 1508 "parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'limit_clause)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 384 "parser.yy"
                                                           MbSqlAbSyn.Expr.ExprList _1 
                   )
# 384 "parser.yy"
                 : 'opt_limit_clause));
# 1519 "parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : 'limit_options)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 387 "parser.yy"
                                                           _2 
                   )
# 387 "parser.yy"
                 : 'limit_clause));
# 1530 "parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'limit_option)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 390 "parser.yy"
                                                                       [_1] 
                   )
# 390 "parser.yy"
                 : 'limit_options));
# 1541 "parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'limit_option)) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : 'limit_option)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 391 "parser.yy"
                                                                       [_1;_3] 
                   )
# 391 "parser.yy"
                 : 'limit_options));
# 1553 "parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'limit_option)) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : 'limit_option)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 392 "parser.yy"
                                                                       [_1;_3] 
                   )
# 392 "parser.yy"
                 : 'limit_options));
# 1565 "parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'ident)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 395 "parser.yy"
                                                   _1 
                   )
# 395 "parser.yy"
                 : 'limit_option));
# 1576 "parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : string)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 399 "parser.yy"
                                                   MbSqlAbSyn.Expr.NodeTyped ("num",_1) 
                   )
# 399 "parser.yy"
                 : 'limit_option));
# 1587 "parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 402 "parser.yy"
                                                           MbSqlAbSyn.Expr.Temp 
                   )
# 402 "parser.yy"
                 : 'opt_simple_limit));
# 1597 "parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : 'limit_option)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 403 "parser.yy"
                                                           MbSqlAbSyn.Expr.Temp 
                   )
# 403 "parser.yy"
                 : 'opt_simple_limit));
# 1608 "parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 406 "parser.yy"
                                                       MbSqlAbSyn.Expr.Null 
                   )
# 406 "parser.yy"
                 : 'opt_locking_clause_list));
# 1618 "parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'locking_clause_list)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 407 "parser.yy"
                                                       MbSqlAbSyn.Expr.ExprList _1 
                   )
# 407 "parser.yy"
                 : 'opt_locking_clause_list));
# 1629 "parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'locking_clause_list)) in
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : 'locking_clause)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 411 "parser.yy"
                                                                       _1 @ [_2] 
                   )
# 411 "parser.yy"
                 : 'locking_clause_list));
# 1641 "parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'locking_clause)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 412 "parser.yy"
                                                                       [_1] 
                   )
# 412 "parser.yy"
                 : 'locking_clause_list));
# 1652 "parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 416 "parser.yy"
                                          MbSqlAbSyn.Expr.Temp 
                   )
# 416 "parser.yy"
                 : 'locking_clause));
# 1662 "parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'query_primary)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 423 "parser.yy"
                                               _1 
                   )
# 423 "parser.yy"
                 : 'query_expression_body));
# 1673 "parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'query_expression_body)) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : 'union_option)) in
            let _4 = (let data = parseState.GetInput(4) in (Microsoft.FSharp.Core.Operators.unbox data : 'query_primary)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 424 "parser.yy"
                                                                                          
                                 MbSqlAbSyn.Qs.Union (_3,_1,_4)
                                 
                   )
# 424 "parser.yy"
                 : 'query_expression_body));
# 1688 "parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'query_expression_parens)) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : 'union_option)) in
            let _4 = (let data = parseState.GetInput(4) in (Microsoft.FSharp.Core.Operators.unbox data : 'query_primary)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 427 "parser.yy"
                                                                                            
                                 MbSqlAbSyn.Qs.Union (_3,_1,_4)
                                 
                   )
# 427 "parser.yy"
                 : 'query_expression_body));
# 1703 "parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'query_expression_body)) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : 'union_option)) in
            let _4 = (let data = parseState.GetInput(4) in (Microsoft.FSharp.Core.Operators.unbox data : 'query_expression_parens)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 431 "parser.yy"
                                                        
                                 MbSqlAbSyn.Qs.Union (_3,_1,_4)
                                 
                   )
# 431 "parser.yy"
                 : 'query_expression_body));
# 1718 "parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'query_expression_parens)) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : 'union_option)) in
            let _4 = (let data = parseState.GetInput(4) in (Microsoft.FSharp.Core.Operators.unbox data : 'query_expression_parens)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 435 "parser.yy"
                                                        
                                 MbSqlAbSyn.Qs.Union (_3,_1,_4)
                                 
                   )
# 435 "parser.yy"
                 : 'query_expression_body));
# 1733 "parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 440 "parser.yy"
                                                   "none" 
                   )
# 440 "parser.yy"
                 : 'union_option));
# 1743 "parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 441 "parser.yy"
                                                   "distinct" 
                   )
# 441 "parser.yy"
                 : 'union_option));
# 1753 "parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 442 "parser.yy"
                                                   "all" 
                   )
# 442 "parser.yy"
                 : 'union_option));
# 1763 "parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : 'query_expression_parens)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 445 "parser.yy"
                                                                           _2 
                   )
# 445 "parser.yy"
                 : 'query_expression_parens));
# 1774 "parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : 'query_expression)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 446 "parser.yy"
                                                                           _2 
                   )
# 446 "parser.yy"
                 : 'query_expression_parens));
# 1785 "parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'query_specification)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 449 "parser.yy"
                                                                           _1 
                   )
# 449 "parser.yy"
                 : 'query_primary));
# 1796 "parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : 'select_options)) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : 'select_item_list)) in
            let _4 = (let data = parseState.GetInput(4) in (Microsoft.FSharp.Core.Operators.unbox data : 'into_clause)) in
            let _5 = (let data = parseState.GetInput(5) in (Microsoft.FSharp.Core.Operators.unbox data : 'opt_from_clause)) in
            let _6 = (let data = parseState.GetInput(6) in (Microsoft.FSharp.Core.Operators.unbox data : 'opt_where_clause)) in
            let _7 = (let data = parseState.GetInput(7) in (Microsoft.FSharp.Core.Operators.unbox data : 'opt_group_clause)) in
            let _8 = (let data = parseState.GetInput(8) in (Microsoft.FSharp.Core.Operators.unbox data : 'opt_having_clause)) in
            let _9 = (let data = parseState.GetInput(9) in (Microsoft.FSharp.Core.Operators.unbox data : 'opt_window_clause)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 461 "parser.yy"
                                                  
                                 MbSqlAbSyn.Qs.Select [
                                     MbSqlAbSyn.Q_Select.SelectOptions _2
                                     MbSqlAbSyn.Q_Select.SelectItems _3
                                     MbSqlAbSyn.Q_Select.SelectInto _4
                                     MbSqlAbSyn.Q_Select.SelectFrom _5
                                     MbSqlAbSyn.Q_Select.SelectWhere _6
                                     MbSqlAbSyn.Q_Select.SelectGroup _7
                                     MbSqlAbSyn.Q_Select.SelectHaving _8
                                     MbSqlAbSyn.Q_Select.SelectWindow _9
                                     ]
                                 
                   )
# 461 "parser.yy"
                 : 'query_specification));
# 1825 "parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : 'select_options)) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : 'select_item_list)) in
            let _4 = (let data = parseState.GetInput(4) in (Microsoft.FSharp.Core.Operators.unbox data : 'opt_from_clause)) in
            let _5 = (let data = parseState.GetInput(5) in (Microsoft.FSharp.Core.Operators.unbox data : 'opt_where_clause)) in
            let _6 = (let data = parseState.GetInput(6) in (Microsoft.FSharp.Core.Operators.unbox data : 'opt_group_clause)) in
            let _7 = (let data = parseState.GetInput(7) in (Microsoft.FSharp.Core.Operators.unbox data : 'opt_having_clause)) in
            let _8 = (let data = parseState.GetInput(8) in (Microsoft.FSharp.Core.Operators.unbox data : 'opt_window_clause)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 480 "parser.yy"
                                                  
                                 //same as above but no into
                                 MbSqlAbSyn.Qs.Select [
                                     MbSqlAbSyn.Q_Select.SelectOptions _2
                                     MbSqlAbSyn.Q_Select.SelectItems _3
                                     MbSqlAbSyn.Q_Select.SelectInto (MbSqlAbSyn.Expr.Null )
                                     MbSqlAbSyn.Q_Select.SelectFrom _4
                                     MbSqlAbSyn.Q_Select.SelectWhere _5
                                     MbSqlAbSyn.Q_Select.SelectGroup _6
                                     MbSqlAbSyn.Q_Select.SelectHaving _7
                                     MbSqlAbSyn.Q_Select.SelectWindow _8
                                     ]
                                 
                   )
# 480 "parser.yy"
                 : 'query_specification));
# 1854 "parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 495 "parser.yy"
                                                       [] 
                   )
# 495 "parser.yy"
                 : 'select_options));
# 1864 "parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'select_option_list)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 496 "parser.yy"
                                                       _1 
                   )
# 496 "parser.yy"
                 : 'select_options));
# 1875 "parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'select_option_list)) in
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : 'select_option)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 499 "parser.yy"
                                                                   _1 @ [_2]
                   )
# 499 "parser.yy"
                 : 'select_option_list));
# 1887 "parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'select_option)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 500 "parser.yy"
                                                                   [_1] 
                   )
# 500 "parser.yy"
                 : 'select_option_list));
# 1898 "parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'query_spec_option)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 503 "parser.yy"
                                                      _1 
                   )
# 503 "parser.yy"
                 : 'select_option));
# 1909 "parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 504 "parser.yy"
                                                 
                                 //might be deprecated
                                 MbSqlAbSyn.Expr.NodeTyped ("option","sql no cache")
                                 
                   )
# 504 "parser.yy"
                 : 'select_option));
# 1922 "parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 510 "parser.yy"
                                                 
                                 MbSqlAbSyn.Expr.NodeTyped ("option","straight join")
                                 
                   )
# 510 "parser.yy"
                 : 'query_spec_option));
# 1934 "parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 513 "parser.yy"
                                                  
                                 MbSqlAbSyn.Expr.NodeTyped ("option","high priority")
                                 
                   )
# 513 "parser.yy"
                 : 'query_spec_option));
# 1946 "parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 516 "parser.yy"
                                             
                                 MbSqlAbSyn.Expr.NodeTyped ("option","distinct")
                                 
                   )
# 516 "parser.yy"
                 : 'query_spec_option));
# 1958 "parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 519 "parser.yy"
                                                     
                                 MbSqlAbSyn.Expr.NodeTyped ("option","small result")
                                 
                   )
# 519 "parser.yy"
                 : 'query_spec_option));
# 1970 "parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 522 "parser.yy"
                                                   
                                 MbSqlAbSyn.Expr.NodeTyped ("option","big result")
                                 
                   )
# 522 "parser.yy"
                 : 'query_spec_option));
# 1982 "parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 525 "parser.yy"
                                                      
                                 MbSqlAbSyn.Expr.NodeTyped ("option","buffer result")
                                 
                   )
# 525 "parser.yy"
                 : 'query_spec_option));
# 1994 "parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 528 "parser.yy"
                                                        
                                 MbSqlAbSyn.Expr.NodeTyped ("option","calc found rows")
                                 
                   )
# 528 "parser.yy"
                 : 'query_spec_option));
# 2006 "parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 531 "parser.yy"
                                        
                                 MbSqlAbSyn.Expr.NodeTyped ("option","all")
                                 
                   )
# 531 "parser.yy"
                 : 'query_spec_option));
# 2018 "parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'select_item_list)) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : 'select_item)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 536 "parser.yy"
                                                                         
                                 _1 @ [_3]
                                 
                   )
# 536 "parser.yy"
                 : 'select_item_list));
# 2032 "parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'select_item)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 539 "parser.yy"
                                            
                                 [_1]
                                 
                   )
# 539 "parser.yy"
                 : 'select_item_list));
# 2045 "parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 542 "parser.yy"
                                         
                                 [MbSqlAbSyn.Expr.Binary ("as",MbSqlAbSyn.Expr.Node "*",MbSqlAbSyn.Expr.Null)]
                                 
                   )
# 542 "parser.yy"
                 : 'select_item_list));
# 2057 "parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'table_wild)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 548 "parser.yy"
                                           
                                 MbSqlAbSyn.Expr.Binary ("as",_1,MbSqlAbSyn.Expr.Null)
                                 
                   )
# 548 "parser.yy"
                 : 'select_item));
# 2070 "parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'expr)) in
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : 'select_alias)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 551 "parser.yy"
                                                  
                                 //$$= NEW_PTN PTI_expr_with_alias(@$, _1, @1.cpp, _2);
                                 MbSqlAbSyn.Expr.Binary ("as",_1,_2)
                                 
                   )
# 551 "parser.yy"
                 : 'select_item));
# 2085 "parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 557 "parser.yy"
                                                   MbSqlAbSyn.Expr.Null 
                   )
# 557 "parser.yy"
                 : 'select_alias));
# 2095 "parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : 'ident)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 558 "parser.yy"
                                                   _2 
                   )
# 558 "parser.yy"
                 : 'select_alias));
# 2106 "parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : string)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 559 "parser.yy"
                                                   MbSqlAbSyn.Expr.NodeTyped ("id",_2) 
                   )
# 559 "parser.yy"
                 : 'select_alias));
# 2117 "parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'ident)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 560 "parser.yy"
                                                   _1 
                   )
# 560 "parser.yy"
                 : 'select_alias));
# 2128 "parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : string)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 561 "parser.yy"
                                                   MbSqlAbSyn.Expr.NodeTyped ("id",_1) 
                   )
# 561 "parser.yy"
                 : 'select_alias));
# 2139 "parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : 'into_destination)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 565 "parser.yy"
                                                          _2 
                   )
# 565 "parser.yy"
                 : 'into_clause));
# 2150 "parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 568 "parser.yy"
                                           MbSqlAbSyn.Expr.Temp 
                   )
# 568 "parser.yy"
                 : 'into_destination));
# 2160 "parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 586 "parser.yy"
                                                                          
                                 MbSqlAbSyn.Expr.Null
                                 
                   )
# 586 "parser.yy"
                 : 'opt_from_clause));
# 2172 "parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'from_clause)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 589 "parser.yy"
                                            
                                 _1
                                 
                   )
# 589 "parser.yy"
                 : 'opt_from_clause));
# 2185 "parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : 'from_tables)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 594 "parser.yy"
                                                      _2 
                   )
# 594 "parser.yy"
                 : 'from_clause));
# 2196 "parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 597 "parser.yy"
                                         
                                 //dual is dummy for no table
                                 MbSqlAbSyn.Expr.Null
                                 
                   )
# 597 "parser.yy"
                 : 'from_tables));
# 2209 "parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'table_reference_list)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 601 "parser.yy"
                                                      MbSqlAbSyn.ExprListTyped ("from-ids",_1) 
                   )
# 601 "parser.yy"
                 : 'from_tables));
# 2220 "parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'table_reference)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 604 "parser.yy"
                                                
                                 [_1]
                                 
                   )
# 604 "parser.yy"
                 : 'table_reference_list));
# 2233 "parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'table_reference_list)) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : 'table_reference)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 607 "parser.yy"
                                                                                 
                                 _1 @ [_3]
                                 
                   )
# 607 "parser.yy"
                 : 'table_reference_list));
# 2247 "parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'table_factor)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 612 "parser.yy"
                                              _1 
                   )
# 612 "parser.yy"
                 : 'table_reference));
# 2258 "parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'joined_table)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 613 "parser.yy"
                                              _1 
                   )
# 613 "parser.yy"
                 : 'table_reference));
# 2269 "parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'table_reference)) in
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : 'inner_join_type)) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : 'table_reference)) in
            let _5 = (let data = parseState.GetInput(5) in (Microsoft.FSharp.Core.Operators.unbox data : 'expr)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 617 "parser.yy"
                                                                                           
                                 MbSqlAbSyn.Expr.Binary (_2,_1,MbSqlAbSyn.Expr.Binary("on",_3,_5))
                                 
                   )
# 617 "parser.yy"
                 : 'joined_table));
# 2285 "parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'table_reference)) in
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : 'inner_join_type)) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : 'table_reference)) in
            let _6 = (let data = parseState.GetInput(6) in (Microsoft.FSharp.Core.Operators.unbox data : 'using_list)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 621 "parser.yy"
                                                             
                                 MbSqlAbSyn.Expr.Binary (_2,_1,MbSqlAbSyn.Expr.Binary("using",_3,_6))
                                 
                   )
# 621 "parser.yy"
                 : 'joined_table));
# 2301 "parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'table_reference)) in
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : 'outer_join_type)) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : 'table_reference)) in
            let _5 = (let data = parseState.GetInput(5) in (Microsoft.FSharp.Core.Operators.unbox data : 'expr)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 624 "parser.yy"
                                                                                           
                                 MbSqlAbSyn.Expr.Binary (_2,_1,MbSqlAbSyn.Expr.Binary("on",_3,_5))
                                 
                   )
# 624 "parser.yy"
                 : 'joined_table));
# 2317 "parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'table_reference)) in
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : 'outer_join_type)) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : 'table_reference)) in
            let _6 = (let data = parseState.GetInput(6) in (Microsoft.FSharp.Core.Operators.unbox data : 'using_list)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 628 "parser.yy"
                                                             
                                 MbSqlAbSyn.Expr.Binary (_2,_1,MbSqlAbSyn.Expr.Binary("using",_3,_6))
                                 
                   )
# 628 "parser.yy"
                 : 'joined_table));
# 2333 "parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'table_reference)) in
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : 'inner_join_type)) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : 'table_reference)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 632 "parser.yy"
                                                              
                                 MbSqlAbSyn.Expr.Binary (_2,_1,_3)
                                 
                   )
# 632 "parser.yy"
                 : 'joined_table));
# 2348 "parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'table_reference)) in
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : 'natural_join_type)) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : 'table_factor)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 635 "parser.yy"
                                                                               
                                 MbSqlAbSyn.Expr.Binary (_2,_1,_3)
                                 
                   )
# 635 "parser.yy"
                 : 'joined_table));
# 2363 "parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : 'opt_inner)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 641 "parser.yy"
                                                                       "natural"+_2+" join" 
                   )
# 641 "parser.yy"
                 : 'natural_join_type));
# 2374 "parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : 'opt_outer)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 642 "parser.yy"
                                                                       "natural right"+_3+" join"
                   )
# 642 "parser.yy"
                 : 'natural_join_type));
# 2385 "parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : 'opt_outer)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 643 "parser.yy"
                                                                       "natural left"+_3+" join"
                   )
# 643 "parser.yy"
                 : 'natural_join_type));
# 2396 "parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 646 "parser.yy"
                                                                   "join" 
                   )
# 646 "parser.yy"
                 : 'inner_join_type));
# 2406 "parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 647 "parser.yy"
                                                                   "inner join" 
                   )
# 647 "parser.yy"
                 : 'inner_join_type));
# 2416 "parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 648 "parser.yy"
                                                                   "cross join" 
                   )
# 648 "parser.yy"
                 : 'inner_join_type));
# 2426 "parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 649 "parser.yy"
                                                                   "straight_join" 
                   )
# 649 "parser.yy"
                 : 'inner_join_type));
# 2436 "parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : 'opt_outer)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 652 "parser.yy"
                                                                   "left"+_2+" join" 
                   )
# 652 "parser.yy"
                 : 'outer_join_type));
# 2447 "parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : 'opt_outer)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 653 "parser.yy"
                                                                   "right"+_2+" join" 
                   )
# 653 "parser.yy"
                 : 'outer_join_type));
# 2458 "parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 656 "parser.yy"
                                               "" 
                   )
# 656 "parser.yy"
                 : 'opt_inner));
# 2468 "parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 657 "parser.yy"
                                               " inner" 
                   )
# 657 "parser.yy"
                 : 'opt_inner));
# 2478 "parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 660 "parser.yy"
                                               "" 
                   )
# 660 "parser.yy"
                 : 'opt_outer));
# 2488 "parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 661 "parser.yy"
                                               " outer" 
                   )
# 661 "parser.yy"
                 : 'opt_outer));
# 2498 "parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 668 "parser.yy"
                                                   MbSqlAbSyn.Expr.Null 
                   )
# 668 "parser.yy"
                 : 'opt_use_partition));
# 2508 "parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'use_partition)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 669 "parser.yy"
                                                   MbSqlAbSyn.Expr.Null 
                   )
# 669 "parser.yy"
                 : 'opt_use_partition));
# 2519 "parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : 'using_list)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 673 "parser.yy"
                                                                            _3 
                   )
# 673 "parser.yy"
                 : 'use_partition));
# 2530 "parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'single_table)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 701 "parser.yy"
                                                               _1 
                   )
# 701 "parser.yy"
                 : 'table_factor));
# 2541 "parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'single_table_parens)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 702 "parser.yy"
                                                               _1 
                   )
# 702 "parser.yy"
                 : 'table_factor));
# 2552 "parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'derived_table)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 703 "parser.yy"
                                                               _1 
                   )
# 703 "parser.yy"
                 : 'table_factor));
# 2563 "parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'joined_table_parens)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 704 "parser.yy"
                                                               _1 
                   )
# 704 "parser.yy"
                 : 'table_factor));
# 2574 "parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'table_reference_list_parens)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 705 "parser.yy"
                                                               MbSqlAbSyn.Expr.ExprList _1 
                   )
# 705 "parser.yy"
                 : 'table_factor));
# 2585 "parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'table_function)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 706 "parser.yy"
                                                               _1 
                   )
# 706 "parser.yy"
                 : 'table_factor));
# 2596 "parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : 'table_reference_list_parens)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 709 "parser.yy"
                                                                              
                                 _2
                                 
                   )
# 709 "parser.yy"
                 : 'table_reference_list_parens));
# 2609 "parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : 'table_reference_list)) in
            let _4 = (let data = parseState.GetInput(4) in (Microsoft.FSharp.Core.Operators.unbox data : 'table_reference)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 712 "parser.yy"
                                                                                                   
                                 _2 @ [_4]
                                 
                   )
# 712 "parser.yy"
                 : 'table_reference_list_parens));
# 2623 "parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : 'single_table_parens)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 717 "parser.yy"
                                                                       _2 
                   )
# 717 "parser.yy"
                 : 'single_table_parens));
# 2634 "parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : 'single_table)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 718 "parser.yy"
                                                                       _2 
                   )
# 718 "parser.yy"
                 : 'single_table_parens));
# 2645 "parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'table_ident)) in
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : 'opt_use_partition)) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : 'opt_table_alias)) in
            let _4 = (let data = parseState.GetInput(4) in (Microsoft.FSharp.Core.Operators.unbox data : 'opt_key_definition)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 721 "parser.yy"
                                                                                                 
                                 //_3 is ExprId -> ExpExprAlias 
                                 MbSqlAbSyn.Expr.ExprListTyped ("single-table-id",[_1|>_3;_4])
                                 
                   )
# 721 "parser.yy"
                 : 'single_table));
# 2662 "parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : 'joined_table_parens)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 727 "parser.yy"
                                                                       _2 
                   )
# 727 "parser.yy"
                 : 'joined_table_parens));
# 2673 "parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : 'joined_table)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 728 "parser.yy"
                                                                       _2 
                   )
# 728 "parser.yy"
                 : 'joined_table_parens));
# 2684 "parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'table_subquery)) in
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : 'opt_table_alias)) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : 'opt_derived_column_list)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 731 "parser.yy"
                                                                                       
                                 let subq = MbSqlAbSyn.Expr.SubQ _1
                                 let collist = _3
                                 let subname = MbSqlAbSyn.Expr.Null|>_2
                                 let subalias1 = MbSqlAbSyn.Expr.Binary ("col_list",subname,collist)
                                 let subalias2 = MbSqlAbSyn.Expr.Binary ("as",subq,subalias1)
                                 subalias2
                                 
                   )
# 731 "parser.yy"
                 : 'derived_table));
# 2704 "parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 741 "parser.yy"
                                            
                                 MbSqlAbSyn.Expr.Empty
                                 
                   )
# 741 "parser.yy"
                 : 'opt_derived_column_list));
# 2716 "parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : 'simple_ident_list)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 744 "parser.yy"
                                                                    
                                 MbSqlAbSyn.Expr.ExprList _2
                                 
                   )
# 744 "parser.yy"
                 : 'opt_derived_column_list));
# 2729 "parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'ident)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 749 "parser.yy"
                                                                       [_1] 
                   )
# 749 "parser.yy"
                 : 'simple_ident_list));
# 2740 "parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'simple_ident_list)) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : 'ident)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 750 "parser.yy"
                                                                       _1 @ [_3] 
                   )
# 750 "parser.yy"
                 : 'simple_ident_list));
# 2752 "parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : 'expr)) in
            let _5 = (let data = parseState.GetInput(5) in (Microsoft.FSharp.Core.Operators.unbox data : 'text_string_sys)) in
            let _6 = (let data = parseState.GetInput(6) in (Microsoft.FSharp.Core.Operators.unbox data : 'columns_clause)) in
            let _8 = (let data = parseState.GetInput(8) in (Microsoft.FSharp.Core.Operators.unbox data : 'opt_table_alias)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 755 "parser.yy"
                                                
                                 // Alias isn't optional, follow derived's behavior
                                 //Not sure what this is, so leave as temp for now
                                 MbSqlAbSyn.Expr.Temp
                                 
                   )
# 755 "parser.yy"
                 : 'table_function));
# 2770 "parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : 'columns_list)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 762 "parser.yy"
                                                                            _3 
                   )
# 762 "parser.yy"
                 : 'columns_clause));
# 2781 "parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'jt_column)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 765 "parser.yy"
                                                                       [_1] 
                   )
# 765 "parser.yy"
                 : 'columns_list));
# 2792 "parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'columns_list)) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : 'jt_column)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 766 "parser.yy"
                                                                       _1 @ [_3] 
                   )
# 766 "parser.yy"
                 : 'columns_list));
# 2804 "parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'ident)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 769 "parser.yy"
                                                               
                                 MbSqlAbSyn.Expr.Temp
                                 
                   )
# 769 "parser.yy"
                 : 'jt_column));
# 2817 "parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'ident)) in
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : 'set_type)) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : 'jt_column_type)) in
            let _5 = (let data = parseState.GetInput(5) in (Microsoft.FSharp.Core.Operators.unbox data : 'text_string_sys)) in
            let _6 = (let data = parseState.GetInput(6) in (Microsoft.FSharp.Core.Operators.unbox data : 'opt_on_empty_or_error)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 773 "parser.yy"
                                                      
                                 MbSqlAbSyn.Expr.Temp
                                 
                   )
# 773 "parser.yy"
                 : 'jt_column));
# 2834 "parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : 'text_string_sys)) in
            let _4 = (let data = parseState.GetInput(4) in (Microsoft.FSharp.Core.Operators.unbox data : 'columns_clause)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 776 "parser.yy"
                                                                                       
                                 MbSqlAbSyn.Expr.Temp
                                 
                   )
# 776 "parser.yy"
                 : 'jt_column));
# 2848 "parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 781 "parser.yy"
                                               MbSqlAbSyn.Expr.Temp 
                   )
# 781 "parser.yy"
                 : 'jt_column_type));
# 2858 "parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 782 "parser.yy"
                                               MbSqlAbSyn.Expr.Temp 
                   )
# 782 "parser.yy"
                 : 'jt_column_type));
# 2868 "parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 785 "parser.yy"
                                                           MbSqlAbSyn.Expr.Temp 
                   )
# 785 "parser.yy"
                 : 'opt_on_empty_or_error));
# 2878 "parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'opt_on_empty)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 786 "parser.yy"
                                                           MbSqlAbSyn.Expr.Temp 
                   )
# 786 "parser.yy"
                 : 'opt_on_empty_or_error));
# 2889 "parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'opt_on_error)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 787 "parser.yy"
                                                           MbSqlAbSyn.Expr.Temp 
                   )
# 787 "parser.yy"
                 : 'opt_on_empty_or_error));
# 2900 "parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'opt_on_empty)) in
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : 'opt_on_error)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 788 "parser.yy"
                                                           MbSqlAbSyn.Expr.Temp 
                   )
# 788 "parser.yy"
                 : 'opt_on_empty_or_error));
# 2912 "parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'opt_on_error)) in
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : 'opt_on_empty)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 789 "parser.yy"
                                                           MbSqlAbSyn.Expr.Temp 
                   )
# 789 "parser.yy"
                 : 'opt_on_empty_or_error));
# 2924 "parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'jt_on_response)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 792 "parser.yy"
                                                                      MbSqlAbSyn.Expr.Temp 
                   )
# 792 "parser.yy"
                 : 'opt_on_empty));
# 2935 "parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'jt_on_response)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 795 "parser.yy"
                                                                      MbSqlAbSyn.Expr.Temp 
                   )
# 795 "parser.yy"
                 : 'opt_on_error));
# 2946 "parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 798 "parser.yy"
                                                               MbSqlAbSyn.Expr.Temp 
                   )
# 798 "parser.yy"
                 : 'jt_on_response));
# 2956 "parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 799 "parser.yy"
                                                               MbSqlAbSyn.Expr.Temp 
                   )
# 799 "parser.yy"
                 : 'jt_on_response));
# 2966 "parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : 'text_string_sys)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 800 "parser.yy"
                                                               MbSqlAbSyn.Expr.Temp 
                   )
# 800 "parser.yy"
                 : 'jt_on_response));
# 2977 "parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 803 "parser.yy"
                                                           MbSqlAbSyn.Expr.Empty
                   )
# 803 "parser.yy"
                 : 'index_hint_clause));
# 2987 "parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 804 "parser.yy"
                                                           MbSqlAbSyn.Expr.Temp 
                   )
# 804 "parser.yy"
                 : 'index_hint_clause));
# 2997 "parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 805 "parser.yy"
                                                           MbSqlAbSyn.Expr.Temp 
                   )
# 805 "parser.yy"
                 : 'index_hint_clause));
# 3007 "parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 806 "parser.yy"
                                                           MbSqlAbSyn.Expr.Temp 
                   )
# 806 "parser.yy"
                 : 'index_hint_clause));
# 3017 "parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 809 "parser.yy"
                                            "force" 
                   )
# 809 "parser.yy"
                 : 'index_hint_type));
# 3027 "parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 810 "parser.yy"
                                            "ignore" 
                   )
# 810 "parser.yy"
                 : 'index_hint_type));
# 3037 "parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'index_hint_type)) in
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : 'key_or_index)) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : 'index_hint_clause)) in
            let _5 = (let data = parseState.GetInput(5) in (Microsoft.FSharp.Core.Operators.unbox data : 'key_usage_list)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 814 "parser.yy"
                                                                 
                                 MbSqlAbSyn.Expr.Temp 
                                 
                   )
# 814 "parser.yy"
                 : 'index_hint_definition));
# 3053 "parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : 'key_or_index)) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : 'index_hint_clause)) in
            let _5 = (let data = parseState.GetInput(5) in (Microsoft.FSharp.Core.Operators.unbox data : 'opt_key_usage_list)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 818 "parser.yy"
                                                                     
                                 MbSqlAbSyn.Expr.Temp 
                                 
                   )
# 818 "parser.yy"
                 : 'index_hint_definition));
# 3068 "parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'index_hint_definition)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 823 "parser.yy"
                                                       [] 
                   )
# 823 "parser.yy"
                 : 'index_hints_list));
# 3079 "parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'index_hints_list)) in
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : 'index_hint_definition)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 824 "parser.yy"
                                                                       
                                 []
                                 
                   )
# 824 "parser.yy"
                 : 'index_hints_list));
# 3093 "parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 829 "parser.yy"
                                                       MbSqlAbSyn.Expr.Empty 
                   )
# 829 "parser.yy"
                 : 'opt_index_hints_list));
# 3103 "parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'index_hints_list)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 830 "parser.yy"
                                                       MbSqlAbSyn.Expr.ExprList _1 
                   )
# 830 "parser.yy"
                 : 'opt_index_hints_list));
# 3114 "parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'opt_where_clause_expr)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 836 "parser.yy"
                                                     _1 
                   )
# 836 "parser.yy"
                 : 'opt_where_clause));
# 3125 "parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 839 "parser.yy"
                                            MbSqlAbSyn.Expr.Null 
                   )
# 839 "parser.yy"
                 : 'opt_where_clause_expr));
# 3135 "parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : 'expr)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 840 "parser.yy"
                                                _2 
                   )
# 840 "parser.yy"
                 : 'opt_where_clause_expr));
# 3146 "parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'opt_index_hints_list)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 844 "parser.yy"
                                                       _1 
                   )
# 844 "parser.yy"
                 : 'opt_key_definition));
# 3157 "parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 852 "parser.yy"
                                                                       MbSqlAbSyn.Expr.Null 
                   )
# 852 "parser.yy"
                 : 'opt_group_clause));
# 3167 "parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : 'group_list)) in
            let _4 = (let data = parseState.GetInput(4) in (Microsoft.FSharp.Core.Operators.unbox data : 'olap_opt)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 853 "parser.yy"
                                                                      
                                 MbSqlAbSyn.Expr.ExprListTyped (_4,_3)
                                 
                   )
# 853 "parser.yy"
                 : 'opt_group_clause));
# 3181 "parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'group_list)) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : 'expr)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 858 "parser.yy"
                                                                   _1 @ [_3] 
                   )
# 858 "parser.yy"
                 : 'group_list));
# 3193 "parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'expr)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 859 "parser.yy"
                                                                   [_1] 
                   )
# 859 "parser.yy"
                 : 'group_list));
# 3204 "parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 862 "parser.yy"
                                               "no-rollup" 
                   )
# 862 "parser.yy"
                 : 'olap_opt));
# 3214 "parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 863 "parser.yy"
                                               "rollup" 
                   )
# 863 "parser.yy"
                 : 'olap_opt));
# 3224 "parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 876 "parser.yy"
                                                   MbSqlAbSyn.Expr.Null 
                   )
# 876 "parser.yy"
                 : 'opt_having_clause));
# 3234 "parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : 'expr)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 877 "parser.yy"
                                                   _2 
                   )
# 877 "parser.yy"
                 : 'opt_having_clause));
# 3245 "parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 882 "parser.yy"
                                                                   MbSqlAbSyn.Expr.Null 
                   )
# 882 "parser.yy"
                 : 'opt_window_clause));
# 3255 "parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : 'window_definition_list)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 883 "parser.yy"
                                                                   MbSqlAbSyn.Expr.ExprList _2 
                   )
# 883 "parser.yy"
                 : 'opt_window_clause));
# 3266 "parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'window_definition)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 887 "parser.yy"
                                                                                       [_1] 
                   )
# 887 "parser.yy"
                 : 'window_definition_list));
# 3277 "parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'window_definition_list)) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : 'window_definition)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 888 "parser.yy"
                                                                                       _1 @ [_3]
                   )
# 888 "parser.yy"
                 : 'window_definition_list));
# 3289 "parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'window_name)) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : 'window_spec)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 892 "parser.yy"
                                                               
                                 MbSqlAbSyn.Expr.Binary ("as",_1,_3)
                                 
                   )
# 892 "parser.yy"
                 : 'window_definition));
# 3303 "parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'ident)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 897 "parser.yy"
                                               _1 
                   )
# 897 "parser.yy"
                 : 'window_name));
# 3314 "parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 901 "parser.yy"
                                                                             MbSqlAbSyn.Expr.Null 
                   )
# 901 "parser.yy"
                 : 'window_spec));
# 3324 "parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 905 "parser.yy"
                                                   MbSqlAbSyn.Expr.Temp 
                   )
# 905 "parser.yy"
                 : 'opt_key_usage_list));
# 3334 "parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'key_usage_list)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 906 "parser.yy"
                                                   MbSqlAbSyn.Expr.Temp 
                   )
# 906 "parser.yy"
                 : 'opt_key_usage_list));
# 3345 "parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'ident)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 910 "parser.yy"
                                                   MbSqlAbSyn.Expr.Temp 
                   )
# 910 "parser.yy"
                 : 'key_usage_element));
# 3356 "parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 911 "parser.yy"
                                                   MbSqlAbSyn.Expr.Temp 
                   )
# 911 "parser.yy"
                 : 'key_usage_element));
# 3366 "parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'key_usage_element)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 915 "parser.yy"
                                                                               MbSqlAbSyn.Expr.Temp 
                   )
# 915 "parser.yy"
                 : 'key_usage_list));
# 3377 "parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'key_usage_list)) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : 'key_usage_element)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 916 "parser.yy"
                                                                               MbSqlAbSyn.Expr.Temp 
                   )
# 916 "parser.yy"
                 : 'key_usage_list));
# 3389 "parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'ident_string_list)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 920 "parser.yy"
                                                   MbSqlAbSyn.Expr.ExprListTyped ("id",_1) 
                   )
# 920 "parser.yy"
                 : 'using_list));
# 3400 "parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'ident)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 924 "parser.yy"
                                                                       [_1] 
                   )
# 924 "parser.yy"
                 : 'ident_string_list));
# 3411 "parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'ident_string_list)) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : 'ident)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 925 "parser.yy"
                                                                       _1 @ [_3] 
                   )
# 925 "parser.yy"
                 : 'ident_string_list));
# 3423 "parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 928 "parser.yy"
                                               "" 
                   )
# 928 "parser.yy"
                 : 'opt_as_or_eq));
# 3433 "parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 929 "parser.yy"
                                               "as" 
                   )
# 929 "parser.yy"
                 : 'opt_as_or_eq));
# 3443 "parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 930 "parser.yy"
                                               "eq" 
                   )
# 930 "parser.yy"
                 : 'opt_as_or_eq));
# 3453 "parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 933 "parser.yy"
                                                   
                                 fun tid ->
                                     match tid with
                                     | MbSqlAbSyn.Expr.ExprListTyped (t,l) -> l.[0]
                                     | MbSqlAbSyn.Expr.ExprList l -> l.[0]
                                     | _ -> tid
                                 
                   )
# 933 "parser.yy"
                 : 'opt_table_alias));
# 3469 "parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'opt_as_or_eq)) in
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : 'ident)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 940 "parser.yy"
                                                   
                                 fun tid ->
                                     MbSqlAbSyn.Expr.Binary (
                                         _1,
                                         tid,
                                         _2
                                         )
                                 
                   )
# 940 "parser.yy"
                 : 'opt_table_alias));
# 3488 "parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 950 "parser.yy"
                                               "" 
                   )
# 950 "parser.yy"
                 : 'opt_all));
# 3498 "parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 951 "parser.yy"
                                               "all" 
                   )
# 951 "parser.yy"
                 : 'opt_all));
# 3508 "parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 954 "parser.yy"
                                           "key" 
                   )
# 954 "parser.yy"
                 : 'key_or_index));
# 3518 "parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 955 "parser.yy"
                                           "index" 
                   )
# 955 "parser.yy"
                 : 'key_or_index));
# 3528 "parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 959 "parser.yy"
                                               "" 
                   )
# 959 "parser.yy"
                 : 'opt_key_or_index));
# 3538 "parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'key_or_index)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 960 "parser.yy"
                                               _1 
                   )
# 960 "parser.yy"
                 : 'opt_key_or_index));
# 3549 "parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 963 "parser.yy"
                                               "keys" 
                   )
# 963 "parser.yy"
                 : 'keys_or_index));
# 3559 "parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 964 "parser.yy"
                                               "index" 
                   )
# 964 "parser.yy"
                 : 'keys_or_index));
# 3569 "parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 965 "parser.yy"
                                               "indexes" 
                   )
# 965 "parser.yy"
                 : 'keys_or_index));
# 3579 "parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 968 "parser.yy"
                                              "" 
                   )
# 968 "parser.yy"
                 : 'opt_unique));
# 3589 "parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 969 "parser.yy"
                                              "unique" 
                   )
# 969 "parser.yy"
                 : 'opt_unique));
# 3599 "parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 978 "parser.yy"
                                               MbSqlAbSyn.Expr.Temp 
                   )
# 978 "parser.yy"
                 : 'set_type));
# 3609 "parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'expr)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 983 "parser.yy"
                                                               [_1] 
                   )
# 983 "parser.yy"
                 : 'expr_list));
# 3620 "parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'expr_list)) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : 'expr)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 984 "parser.yy"
                                                               _1 @ [_3] 
                   )
# 984 "parser.yy"
                 : 'expr_list));
# 3632 "parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'expr)) in
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : 'op_or)) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : 'expr)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 987 "parser.yy"
                                                            
                                 MbSqlAbSyn.Expr.Binary ("or",_1,_3)
                                 
                   )
# 987 "parser.yy"
                 : 'expr));
# 3647 "parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'expr)) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : 'expr)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 990 "parser.yy"
                                                              
                                 MbSqlAbSyn.Expr.Binary ("xor",_1,_3)
                                 
                   )
# 990 "parser.yy"
                 : 'expr));
# 3661 "parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'expr)) in
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : 'op_and)) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : 'expr)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 993 "parser.yy"
                                                              
                                 MbSqlAbSyn.Expr.Binary ("and",_1,_3)
                                 
                   )
# 993 "parser.yy"
                 : 'expr));
# 3676 "parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : 'expr)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 996 "parser.yy"
                                                         
                                 MbSqlAbSyn.Expr.Unary ("not",_2)
                                 
                   )
# 996 "parser.yy"
                 : 'expr));
# 3689 "parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'bool_pri)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 999 "parser.yy"
                                                                      
                                 MbSqlAbSyn.Expr.Binary ("is",_1,MbSqlAbSyn.Expr.NodeTyped ("bool","true"))
                                 
                   )
# 999 "parser.yy"
                 : 'expr));
# 3702 "parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'bool_pri)) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : 'op_not)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 1002 "parser.yy"
                                                                             
                                 //Do it non reversible - that is cannot map back since 
                                 //not true == false
                                 MbSqlAbSyn.Expr.Binary ("is",_1,MbSqlAbSyn.Expr.NodeTyped ("bool","false"))
                                 
                   )
# 1002 "parser.yy"
                 : 'expr));
# 3718 "parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'bool_pri)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 1007 "parser.yy"
                                                                       
                                 MbSqlAbSyn.Expr.Binary ("is",_1,MbSqlAbSyn.Expr.NodeTyped ("bool","false"))
                                 
                   )
# 1007 "parser.yy"
                 : 'expr));
# 3731 "parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'bool_pri)) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : 'op_not)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 1010 "parser.yy"
                                                                              
                                 //Do it non reversible - that is cannot map back. As above
                                 MbSqlAbSyn.Expr.Binary ("is",_1,MbSqlAbSyn.Expr.NodeTyped ("bool","true"))
                                 
                   )
# 1010 "parser.yy"
                 : 'expr));
# 3746 "parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'bool_pri)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 1014 "parser.yy"
                                                                         
                                 //I cant quite figure what unknown is. So treat as key
                                 MbSqlAbSyn.Expr.Binary ("is",_1,MbSqlAbSyn.Expr.NodeTyped ("key","unknown"))
                                 
                   )
# 1014 "parser.yy"
                 : 'expr));
# 3760 "parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'bool_pri)) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : 'op_not)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 1018 "parser.yy"
                                                                                
                                 //The negation of unknown here just become known
                                 MbSqlAbSyn.Expr.Binary ("is",_1,MbSqlAbSyn.Expr.NodeTyped ("key","known"))
                                 
                   )
# 1018 "parser.yy"
                 : 'expr));
# 3775 "parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'bool_pri)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 1022 "parser.yy"
                                         
                                 _1
                                 
                   )
# 1022 "parser.yy"
                 : 'expr));
# 3788 "parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'bool_pri)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 1027 "parser.yy"
                                                                      
                                 MbSqlAbSyn.Expr.Binary ("is",_1,MbSqlAbSyn.Expr.NodeTyped ("key","null"))
                                 
                   )
# 1027 "parser.yy"
                 : 'bool_pri));
# 3801 "parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'bool_pri)) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : 'op_not)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 1030 "parser.yy"
                                                                             
                                 //Done the long way
                                 MbSqlAbSyn.Expr.Binary ("is",_1,MbSqlAbSyn.Expr.Unary ("not",MbSqlAbSyn.Expr.NodeTyped("key","null")))
                               
                   )
# 1030 "parser.yy"
                 : 'bool_pri));
# 3816 "parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'bool_pri)) in
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : 'comp_op)) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : 'predicate)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 1034 "parser.yy"
                                                           
                                 MbSqlAbSyn.Expr.Binary (_2,_1,_3)
                                 
                   )
# 1034 "parser.yy"
                 : 'bool_pri));
# 3831 "parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'predicate)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 1038 "parser.yy"
                                          
                                 _1
                                 
                   )
# 1038 "parser.yy"
                 : 'bool_pri));
# 3844 "parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'bit_expr)) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : 'table_subquery)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 1043 "parser.yy"
                                                              
                                 MbSqlAbSyn.Expr.Binary ("in",_1,MbSqlAbSyn.Expr.SubQ _3)
                                 
                   )
# 1043 "parser.yy"
                 : 'predicate));
# 3858 "parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'bit_expr)) in
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : 'op_not)) in
            let _4 = (let data = parseState.GetInput(4) in (Microsoft.FSharp.Core.Operators.unbox data : 'table_subquery)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 1046 "parser.yy"
                                                                     
                                 MbSqlAbSyn.Expr.Binary ("in",_1,MbSqlAbSyn.Expr.SubQ _4)
                                 
                   )
# 1046 "parser.yy"
                 : 'predicate));
# 3873 "parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'bit_expr)) in
            let _4 = (let data = parseState.GetInput(4) in (Microsoft.FSharp.Core.Operators.unbox data : 'expr)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 1049 "parser.yy"
                                                                      
                                 MbSqlAbSyn.Expr.Binary ("in",_1,_4)
                                 
                   )
# 1049 "parser.yy"
                 : 'predicate));
# 3887 "parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'bit_expr)) in
            let _4 = (let data = parseState.GetInput(4) in (Microsoft.FSharp.Core.Operators.unbox data : 'expr)) in
            let _6 = (let data = parseState.GetInput(6) in (Microsoft.FSharp.Core.Operators.unbox data : 'expr_list)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 1052 "parser.yy"
                                                                                            
                                 MbSqlAbSyn.Expr.Temp
                                 
                   )
# 1052 "parser.yy"
                 : 'predicate));
# 3902 "parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'bit_expr)) in
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : 'op_not)) in
            let _5 = (let data = parseState.GetInput(5) in (Microsoft.FSharp.Core.Operators.unbox data : 'expr)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 1055 "parser.yy"
                                                                             
                                 MbSqlAbSyn.Expr.Unary ("not",MbSqlAbSyn.Expr.Binary ("in",_1,_5))
                                 
                   )
# 1055 "parser.yy"
                 : 'predicate));
# 3917 "parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'bit_expr)) in
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : 'op_not)) in
            let _5 = (let data = parseState.GetInput(5) in (Microsoft.FSharp.Core.Operators.unbox data : 'expr)) in
            let _7 = (let data = parseState.GetInput(7) in (Microsoft.FSharp.Core.Operators.unbox data : 'expr_list)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 1058 "parser.yy"
                                                                                                   
                                 MbSqlAbSyn.Expr.Temp
                                 
                   )
# 1058 "parser.yy"
                 : 'predicate));
# 3933 "parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'bit_expr)) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : 'bit_expr)) in
            let _5 = (let data = parseState.GetInput(5) in (Microsoft.FSharp.Core.Operators.unbox data : 'predicate)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 1061 "parser.yy"
                                                                              
                                 MbSqlAbSyn.Expr.Temp
                                 
                   )
# 1061 "parser.yy"
                 : 'predicate));
# 3948 "parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'bit_expr)) in
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : 'op_not)) in
            let _4 = (let data = parseState.GetInput(4) in (Microsoft.FSharp.Core.Operators.unbox data : 'bit_expr)) in
            let _6 = (let data = parseState.GetInput(6) in (Microsoft.FSharp.Core.Operators.unbox data : 'predicate)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 1064 "parser.yy"
                                                                                     
                                 MbSqlAbSyn.Expr.Temp
                                 
                   )
# 1064 "parser.yy"
                 : 'predicate));
# 3964 "parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'bit_expr)) in
            let _4 = (let data = parseState.GetInput(4) in (Microsoft.FSharp.Core.Operators.unbox data : 'bit_expr)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 1067 "parser.yy"
                                                                    
                                 MbSqlAbSyn.Expr.Temp
                                 
                   )
# 1067 "parser.yy"
                 : 'predicate));
# 3978 "parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'bit_expr)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 1074 "parser.yy"
                                         
                                 _1
                                 
                   )
# 1074 "parser.yy"
                 : 'predicate));
# 3991 "parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'bit_expr)) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : 'bit_expr)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 1080 "parser.yy"
                                                                      
                                 MbSqlAbSyn.Expr.Binary ("|",_1,_3)
                                 
                   )
# 1080 "parser.yy"
                 : 'bit_expr));
# 4005 "parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'bit_expr)) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : 'bit_expr)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 1083 "parser.yy"
                                                                        
                                MbSqlAbSyn.Expr.Binary ("&",_1,_3)
                                 
                   )
# 1083 "parser.yy"
                 : 'bit_expr));
# 4019 "parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'bit_expr)) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : 'bit_expr)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 1086 "parser.yy"
                                                                                    
                                MbSqlAbSyn.Expr.Binary ("<<",_1,_3)
                                 
                   )
# 1086 "parser.yy"
                 : 'bit_expr));
# 4033 "parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'bit_expr)) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : 'bit_expr)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 1089 "parser.yy"
                                                                                      
                                MbSqlAbSyn.Expr.Binary (">>",_1,_3)
                                 
                   )
# 1089 "parser.yy"
                 : 'bit_expr));
# 4047 "parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'bit_expr)) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : 'bit_expr)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 1092 "parser.yy"
                                                                        
                                 MbSqlAbSyn.Expr.Binary ("+",_1,_3)
                                 
                   )
# 1092 "parser.yy"
                 : 'bit_expr));
# 4061 "parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'bit_expr)) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : 'bit_expr)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 1095 "parser.yy"
                                                                          
                                 MbSqlAbSyn.Expr.Binary ("-",_1,_3)
                                 
                   )
# 1095 "parser.yy"
                 : 'bit_expr));
# 4075 "parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'bit_expr)) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : 'bit_expr)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 1100 "parser.yy"
                                                                          
                                 MbSqlAbSyn.Expr.Binary ("*",_1,_3)
                                 
                   )
# 1100 "parser.yy"
                 : 'bit_expr));
# 4089 "parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'bit_expr)) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : 'bit_expr)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 1103 "parser.yy"
                                                                      
                                 MbSqlAbSyn.Expr.Binary ("/",_1,_3)
                                 
                   )
# 1103 "parser.yy"
                 : 'bit_expr));
# 4103 "parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'bit_expr)) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : 'bit_expr)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 1106 "parser.yy"
                                                                        
                                 MbSqlAbSyn.Expr.Binary ("%",_1,_3)
                                 
                   )
# 1106 "parser.yy"
                 : 'bit_expr));
# 4117 "parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'bit_expr)) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : 'bit_expr)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 1109 "parser.yy"
                                                                              
                                 MbSqlAbSyn.Expr.Binary ("/",_1,_3)
                                 
                   )
# 1109 "parser.yy"
                 : 'bit_expr));
# 4131 "parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'bit_expr)) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : 'bit_expr)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 1112 "parser.yy"
                                                                          
                                 MbSqlAbSyn.Expr.Binary ("%",_1,_3)
                                 
                   )
# 1112 "parser.yy"
                 : 'bit_expr));
# 4145 "parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'bit_expr)) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : 'bit_expr)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 1115 "parser.yy"
                                                        
                                 MbSqlAbSyn.Expr.Binary ("^",_1,_3)
                                 
                   )
# 1115 "parser.yy"
                 : 'bit_expr));
# 4159 "parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'simple_expr)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 1118 "parser.yy"
                                            
                                 _1
                                 
                   )
# 1118 "parser.yy"
                 : 'bit_expr));
# 4172 "parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 1123 "parser.yy"
                                              
                   )
# 1123 "parser.yy"
                 : 'op_or));
# 4182 "parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 1124 "parser.yy"
                                              
                   )
# 1124 "parser.yy"
                 : 'op_or));
# 4192 "parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 1128 "parser.yy"
                                              
                   )
# 1128 "parser.yy"
                 : 'op_and));
# 4202 "parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 1129 "parser.yy"
                                              
                   )
# 1129 "parser.yy"
                 : 'op_and));
# 4212 "parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 1133 "parser.yy"
                                              
                   )
# 1133 "parser.yy"
                 : 'op_not));
# 4222 "parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 1134 "parser.yy"
                                              
                   )
# 1134 "parser.yy"
                 : 'op_not));
# 4232 "parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 1138 "parser.yy"
                                           "eq" 
                   )
# 1138 "parser.yy"
                 : 'comp_op));
# 4242 "parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 1139 "parser.yy"
                                           "eq" 
                   )
# 1139 "parser.yy"
                 : 'comp_op));
# 4252 "parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 1140 "parser.yy"
                                           "geq" 
                   )
# 1140 "parser.yy"
                 : 'comp_op));
# 4262 "parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 1141 "parser.yy"
                                           "gt" 
                   )
# 1141 "parser.yy"
                 : 'comp_op));
# 4272 "parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 1142 "parser.yy"
                                           "leq" 
                   )
# 1142 "parser.yy"
                 : 'comp_op));
# 4282 "parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 1143 "parser.yy"
                                           "lt" 
                   )
# 1143 "parser.yy"
                 : 'comp_op));
# 4292 "parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 1144 "parser.yy"
                                           "neq" 
                   )
# 1144 "parser.yy"
                 : 'comp_op));
# 4302 "parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 1148 "parser.yy"
                                           "" 
                   )
# 1148 "parser.yy"
                 : 'all_or_any));
# 4312 "parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 1149 "parser.yy"
                                           "" 
                   )
# 1149 "parser.yy"
                 : 'all_or_any));
# 4322 "parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'simple_ident)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 1153 "parser.yy"
                                                               _1 
                   )
# 1153 "parser.yy"
                 : 'simple_expr));
# 4333 "parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'function_call_keyword)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 1154 "parser.yy"
                                                               _1 
                   )
# 1154 "parser.yy"
                 : 'simple_expr));
# 4344 "parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'function_call_nonkeyword)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 1155 "parser.yy"
                                                               _1 
                   )
# 1155 "parser.yy"
                 : 'simple_expr));
# 4355 "parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'function_call_generic)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 1156 "parser.yy"
                                                               _1 
                   )
# 1156 "parser.yy"
                 : 'simple_expr));
# 4366 "parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'literal)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 1159 "parser.yy"
                                                               _1 
                   )
# 1159 "parser.yy"
                 : 'simple_expr));
# 4377 "parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : 'simple_expr)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 1165 "parser.yy"
                                                                 
                                 MbSqlAbSyn.Expr.Unary ("+",_2)
                                 
                   )
# 1165 "parser.yy"
                 : 'simple_expr));
# 4390 "parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : 'simple_expr)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 1168 "parser.yy"
                                                                  
                                 MbSqlAbSyn.Expr.Unary ("-",_2)
                                 
                   )
# 1168 "parser.yy"
                 : 'simple_expr));
# 4403 "parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : 'simple_expr)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 1171 "parser.yy"
                                                                  
                                 MbSqlAbSyn.Expr.Unary ("~",_2)
                                 
                   )
# 1171 "parser.yy"
                 : 'simple_expr));
# 4416 "parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : 'simple_expr)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 1174 "parser.yy"
                                                                 
                                 MbSqlAbSyn.Expr.Unary ("!",_2)
                                 
                   )
# 1174 "parser.yy"
                 : 'simple_expr));
# 4429 "parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'row_subquery)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 1177 "parser.yy"
                                             
                                 MbSqlAbSyn.Expr.SubQ _1
                                 
                   )
# 1177 "parser.yy"
                 : 'simple_expr));
# 4442 "parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : 'expr)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 1180 "parser.yy"
                                                       
                                 _2
                                 
                   )
# 1180 "parser.yy"
                 : 'simple_expr));
# 4455 "parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : 'expr)) in
            let _4 = (let data = parseState.GetInput(4) in (Microsoft.FSharp.Core.Operators.unbox data : 'expr_list)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 1183 "parser.yy"
                                                                             
                                 MbSqlAbSyn.Expr.ExprList ([_2] @ _4)
                                 
                   )
# 1183 "parser.yy"
                 : 'simple_expr));
# 4469 "parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : 'expr)) in
            let _5 = (let data = parseState.GetInput(5) in (Microsoft.FSharp.Core.Operators.unbox data : 'cast_type)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 1191 "parser.yy"
                                                                                 
                                 let args = MbSqlAbSyn.Expr.ExprList [_3;_5]
                                 MbSqlAbSyn.Expr.FunctionCall (MbSqlAbSyn.Expr.NodeTyped ("id","cast"),args)
                                 
                   )
# 1191 "parser.yy"
                 : 'simple_expr));
# 4484 "parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : 'expr)) in
            let _5 = (let data = parseState.GetInput(5) in (Microsoft.FSharp.Core.Operators.unbox data : 'cast_type)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 1196 "parser.yy"
                                                                                         
                                 let args = MbSqlAbSyn.Expr.ExprList [_3;_5]
                                 MbSqlAbSyn.Expr.FunctionCall (MbSqlAbSyn.Expr.NodeTyped ("id","convert"),args)
                                 
                   )
# 1196 "parser.yy"
                 : 'simple_expr));
# 4499 "parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 1208 "parser.yy"
                                                                                            
                                 MbSqlAbSyn.Expr.NodeTyped ("cast","char")
                                 
                   )
# 1208 "parser.yy"
                 : 'cast_type));
# 4511 "parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'text_literal)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 1212 "parser.yy"
                                                       _1 
                   )
# 1212 "parser.yy"
                 : 'literal));
# 4522 "parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'num_literal)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 1213 "parser.yy"
                                                       _1 
                   )
# 1213 "parser.yy"
                 : 'literal));
# 4533 "parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 1215 "parser.yy"
                                         
                                 MbSqlAbSyn.Expr.NodeTyped ("keyword","null")
                                 
                   )
# 1215 "parser.yy"
                 : 'literal));
# 4545 "parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 1218 "parser.yy"
                                              
                                 MbSqlAbSyn.Expr.NodeTyped ("keyword","false")
                                 
                   )
# 1218 "parser.yy"
                 : 'literal));
# 4557 "parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 1221 "parser.yy"
                                         
                                 MbSqlAbSyn.Expr.NodeTyped ("keyword","true")
                                 
                   )
# 1221 "parser.yy"
                 : 'literal));
# 4569 "parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : string)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 1224 "parser.yy"
                                        
                                 MbSqlAbSyn.Expr.NodeTyped ("hex",_1)
                                 
                   )
# 1224 "parser.yy"
                 : 'literal));
# 4582 "parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : string)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 1227 "parser.yy"
                                        
                                 MbSqlAbSyn.Expr.NodeTyped ("bin",_1)
                                 
                   )
# 1227 "parser.yy"
                 : 'literal));
# 4595 "parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : string)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 1235 "parser.yy"
                                           
                                 MbSqlAbSyn.Expr.NodeTyped ("string",_1)
                                 
                   )
# 1235 "parser.yy"
                 : 'text_literal));
# 4608 "parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : string)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 1246 "parser.yy"
                                           
                                 //check format!
                                 _1
                                 
                   )
# 1246 "parser.yy"
                 : 'text_string_sys));
# 4622 "parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : string)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 1252 "parser.yy"
                                                   MbSqlAbSyn.Expr.NodeTyped ("num",_1) 
                   )
# 1252 "parser.yy"
                 : 'num_literal));
# 4633 "parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : string)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 1256 "parser.yy"
                                                   MbSqlAbSyn.Expr.NodeTyped ("float",_1)
                   )
# 1256 "parser.yy"
                 : 'num_literal));
# 4644 "parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : 'expr_list)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 1262 "parser.yy"
                                                                     
                                 let id = MbSqlAbSyn.Expr.NodeTyped ("id","date")
                                 MbSqlAbSyn.Expr.FunctionCall (id,MbSqlAbSyn.Expr.ExprList _3)
                                 
                   )
# 1262 "parser.yy"
                 : 'function_call_keyword));
# 4658 "parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : 'expr)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 1268 "parser.yy"
                                                                 
                                 let id = MbSqlAbSyn.Expr.NodeTyped ("id","now")
                                 MbSqlAbSyn.Expr.FunctionCall (id,_3)
                                 
                   )
# 1268 "parser.yy"
                 : 'function_call_nonkeyword));
# 4672 "parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'ident_sys)) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : 'opt_udf_expr_list)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 1274 "parser.yy"
                                                                              
                                 MbSqlAbSyn.Expr.FunctionCall (_1,_3)
                                 
                   )
# 1274 "parser.yy"
                 : 'function_call_generic));
# 4686 "parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'ident)) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : 'ident)) in
            let _5 = (let data = parseState.GetInput(5) in (Microsoft.FSharp.Core.Operators.unbox data : 'opt_expr_list)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 1277 "parser.yy"
                                                                                   
                                 let id_list = MbSqlAbSyn.Expr.ExprListTyped ("id",[_1;_3])
                                 MbSqlAbSyn.Expr.FunctionCall (id_list,_5)
                                 
                   )
# 1277 "parser.yy"
                 : 'function_call_generic));
# 4702 "parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 1283 "parser.yy"
                                               MbSqlAbSyn.Expr.Empty 
                   )
# 1283 "parser.yy"
                 : 'opt_expr_list));
# 4712 "parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'expr_list)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 1284 "parser.yy"
                                               MbSqlAbSyn.Expr.ExprList _1 
                   )
# 1284 "parser.yy"
                 : 'opt_expr_list));
# 4723 "parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 1287 "parser.yy"
                                               MbSqlAbSyn.Expr.Null 
                   )
# 1287 "parser.yy"
                 : 'opt_udf_expr_list));
# 4733 "parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'udf_expr_list)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 1288 "parser.yy"
                                               MbSqlAbSyn.Expr.ExprList _1 
                   )
# 1288 "parser.yy"
                 : 'opt_udf_expr_list));
# 4744 "parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'udf_expr)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 1291 "parser.yy"
                                                                       [_1] 
                   )
# 1291 "parser.yy"
                 : 'udf_expr_list));
# 4755 "parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'udf_expr_list)) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : 'udf_expr)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 1292 "parser.yy"
                                                                       _1 @ [_3] 
                   )
# 1292 "parser.yy"
                 : 'udf_expr_list));
# 4767 "parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'expr)) in
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : 'select_alias)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 1296 "parser.yy"
                                                       MbSqlAbSyn.Expr.Binary ("as",_1,_2) 
                   )
# 1296 "parser.yy"
                 : 'udf_expr));
# 4779 "parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : string)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 1303 "parser.yy"
                                               MbSqlAbSyn.Expr.NodeTyped ("id",_1) 
                   )
# 1303 "parser.yy"
                 : 'ident_sys));
# 4790 "parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : string)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 1304 "parser.yy"
                                               MbSqlAbSyn.Expr.NodeTyped ("id",_1) 
                   )
# 1304 "parser.yy"
                 : 'ident_sys));
# 4801 "parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : string)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 1309 "parser.yy"
                                 
                             MbSqlAbSyn.Expr.NodeTyped ("id",_1)
                             
                   )
# 1309 "parser.yy"
                 : 'ident));
# 4814 "parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'ident)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 1313 "parser.yy"
                                                   _1 
                   )
# 1313 "parser.yy"
                 : 'simple_ident));
# 4825 "parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'simple_ident_q)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 1314 "parser.yy"
                                                   _1 
                   )
# 1314 "parser.yy"
                 : 'simple_ident));
# 4836 "parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'ident)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 1317 "parser.yy"
                                                   MbSqlAbSyn.Expr.Temp 
                   )
# 1317 "parser.yy"
                 : 'simple_ident_nospvar));
# 4847 "parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'simple_ident_q)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 1318 "parser.yy"
                                                   MbSqlAbSyn.Expr.Temp 
                   )
# 1318 "parser.yy"
                 : 'simple_ident_nospvar));
# 4858 "parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'ident)) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : 'ident)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 1321 "parser.yy"
                                                   
                                 MbSqlAbSyn.Expr.ExprList [_1;_3]
                                 
                   )
# 1321 "parser.yy"
                 : 'simple_ident_q));
# 4872 "parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'ident)) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : 'ident)) in
            let _5 = (let data = parseState.GetInput(5) in (Microsoft.FSharp.Core.Operators.unbox data : 'ident)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 1324 "parser.yy"
                                                                
                                 MbSqlAbSyn.Expr.ExprList [_1;_3;_5]
                                 
                   )
# 1324 "parser.yy"
                 : 'simple_ident_q));
# 4887 "parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'ident)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 1329 "parser.yy"
                                                       MbSqlAbSyn.Expr.ExprList [_1] 
                   )
# 1329 "parser.yy"
                 : 'table_ident));
# 4898 "parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'ident)) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : 'ident)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 1330 "parser.yy"
                                                       MbSqlAbSyn.Expr.ExprList [_1;_3] 
                   )
# 1330 "parser.yy"
                 : 'table_ident));
# 4910 "parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'ident)) in
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : 'opt_wild)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 1333 "parser.yy"
                                                               MbSqlAbSyn.Expr.ExprList ([_1] @ _2) 
                   )
# 1333 "parser.yy"
                 : 'table_ident_opt_wild));
# 4922 "parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'ident)) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : 'ident)) in
            let _4 = (let data = parseState.GetInput(4) in (Microsoft.FSharp.Core.Operators.unbox data : 'opt_wild)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 1334 "parser.yy"
                                                               MbSqlAbSyn.Expr.ExprList ([_1;_3] @ _4)
                   )
# 1334 "parser.yy"
                 : 'table_ident_opt_wild));
# 4935 "parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 1337 "parser.yy"
                                                   [] 
                   )
# 1337 "parser.yy"
                 : 'opt_wild));
# 4945 "parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 1338 "parser.yy"
                                                   [MbSqlAbSyn.Expr.NodeTyped ("id","*")] 
                   )
# 1338 "parser.yy"
                 : 'opt_wild));
# 4955 "parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'ident)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 1341 "parser.yy"
                                                      
                                 MbSqlAbSyn.Expr.ExprList [_1;MbSqlAbSyn.Expr.NodeTyped ("id","*")]
                                 
                   )
# 1341 "parser.yy"
                 : 'table_wild));
# 4968 "parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'ident)) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : 'ident)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 1344 "parser.yy"
                                                                   
                                 MbSqlAbSyn.Expr.ExprList [_1;_3;MbSqlAbSyn.Expr.NodeTyped ("id","*")]
                                 
                   )
# 1344 "parser.yy"
                 : 'table_wild));
|]
# 4983 "parser.fs"
let tables () : Microsoft.FSharp.Text.Parsing.Tables<_> = 
  { reductions= _fsyacc_reductions ();
    endOfInputTag = _fsyacc_endOfInputTag;
    tagOfToken = tagOfToken;
    dataOfToken = _fsyacc_dataOfToken; 
    actionTableElements = _fsyacc_actionTableElements;
    actionTableRowOffsets = _fsyacc_actionTableRowOffsets;
    stateToProdIdxsTableElements = _fsyacc_stateToProdIdxsTableElements;
    stateToProdIdxsTableRowOffsets = _fsyacc_stateToProdIdxsTableRowOffsets;
    reductionSymbolCounts = _fsyacc_reductionSymbolCounts;
    immediateActions = _fsyacc_immediateActions;
    gotos = _fsyacc_gotos;
    sparseGotoTableRowOffsets = _fsyacc_sparseGotoTableRowOffsets;
    tagOfErrorTerminal = _fsyacc_tagOfErrorTerminal;
    parseError = (fun (ctxt:Microsoft.FSharp.Text.Parsing.ParseErrorContext<_>) -> 
                              match parse_error_rich with 
                              | Some f -> f ctxt
                              | None -> parse_error ctxt.Message);
    numTerminals = 121;
    productionToNonTerminalTable = _fsyacc_productionToNonTerminalTable  }
let engine lexer lexbuf startState = (tables ()).Interpret(lexer, lexbuf, startState)
let start_entry lexer lexbuf : MbSqlAbSyn.Qs list =
    Microsoft.FSharp.Core.Operators.unbox ((tables ()).Interpret(lexer, lexbuf, 0))
