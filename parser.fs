// Implementation file for parser generated by fsyacc
module MbSqlParser
#nowarn "64";; // turn off warnings that type variables used in production annotations are instantiated to concrete type
open Microsoft.FSharp.Text.Lexing
open Microsoft.FSharp.Text.Parsing.ParseHelpers
# 24 "parser.yy"


# 9 "parser.fs"
// This type is the type of tokens accepted by the parser
type token = 
  | VAL_ERROR
  | VAL_EMPTY
  | VAL_BOOL
  | VAL_DUAL
  | VAL_UNKNOWN
  | VAL_FALSE
  | VAL_TRUE
  | VAL_NULL
  | VAL_STRING of (string)
  | VAL_BIN of (string)
  | VAL_HEX of (string)
  | VAL_NUM of (string)
  | VAL_FLOAT of (string)
  | VAL_ID of (string)
  | NOKEY_NOW
  | NOKEY_NESTED
  | NOKEY_PATH
  | NOKEY_ORDINALITY
  | KEY_SQL_NO_CACHE
  | KEY_DATE
  | KEY_WINDOW
  | KEY_HAVING
  | KEY_ROLLUP
  | KEY_SQL_CALC_FOUND_ROWS
  | KEY_SQL_BUFFER_RESULT
  | KEY_SQL_BIG_RESULT
  | KEY_SQL_SMALL_RESULT
  | KEY_HIGH_PRIORITY
  | KEY_PRIMARY
  | KEY_USE
  | KEY_DEFAULT
  | KEY_EXISTS
  | KEY_DISTINCT
  | KEY_PARTITION
  | KEY_OFFSET
  | KEY_DESC
  | KEY_ASC
  | KEY_LIMIT
  | KEY_BY
  | KEY_ORDER
  | KEY_WHERE
  | KEY_FOR
  | KEY_COLUMNS
  | KEY_UNIQUE
  | KEY_INDEXES
  | KEY_INDEX
  | KEY_KEYS
  | KEY_KEY
  | KEY_IGNORE
  | KEY_FORCE
  | KEY_FROM
  | KEY_OUTFILE
  | KEY_ANY
  | KEY_ALL
  | KEY_IS
  | KEY_AS
  | KEY_SELECT
  | OP_AS
  | OP_GROUP
  | OP_OUTER
  | OP_JSON_TABLE
  | OP_MOD_TXT
  | OP_DIV_TXT
  | OP_NOT_TXT
  | OP_OR_TXT
  | OP_AND_TXT
  | OP_IN
  | OP_BETWEEN
  | OP_SOUNDS
  | OP_BOR
  | OP_BAND
  | OP_UP
  | OP_SHIFT_LEFT
  | OP_SHIFT_RIGHT
  | OP_EQ
  | OP_EQ2
  | OP_NEQ
  | OP_NEQ2
  | OP_GT
  | OP_LT
  | OP_GEQ
  | OP_LEQ
  | OP_NOT
  | OP_OR
  | OP_XOR
  | OP_AND
  | OP_TILDE
  | OP_LIKE
  | OP_BANG
  | OP_PLUS
  | OP_MINUS
  | OP_DIV
  | OP_TIMES
  | OP_PERC
  | OP_DOT
  | OP_JOIN
  | OP_INNER
  | OP_CROSS
  | OP_STRAIGHT_JOIN
  | OP_NATURAL
  | OP_LEFT
  | OP_RIGHT
  | OP_ON
  | OP_USING
  | OP_INTO
  | OP_UNION
  | PAR_LPAR
  | PAR_RPAR
  | PAR_LBRACE
  | PAR_RBRACE
  | DELIM_SCOLON
  | DELIM_COMMA
  | END_OF_INPUT
// This type is used to give symbolic names to token indexes, useful for error messages
type tokenId = 
    | TOKEN_VAL_ERROR
    | TOKEN_VAL_EMPTY
    | TOKEN_VAL_BOOL
    | TOKEN_VAL_DUAL
    | TOKEN_VAL_UNKNOWN
    | TOKEN_VAL_FALSE
    | TOKEN_VAL_TRUE
    | TOKEN_VAL_NULL
    | TOKEN_VAL_STRING
    | TOKEN_VAL_BIN
    | TOKEN_VAL_HEX
    | TOKEN_VAL_NUM
    | TOKEN_VAL_FLOAT
    | TOKEN_VAL_ID
    | TOKEN_NOKEY_NOW
    | TOKEN_NOKEY_NESTED
    | TOKEN_NOKEY_PATH
    | TOKEN_NOKEY_ORDINALITY
    | TOKEN_KEY_SQL_NO_CACHE
    | TOKEN_KEY_DATE
    | TOKEN_KEY_WINDOW
    | TOKEN_KEY_HAVING
    | TOKEN_KEY_ROLLUP
    | TOKEN_KEY_SQL_CALC_FOUND_ROWS
    | TOKEN_KEY_SQL_BUFFER_RESULT
    | TOKEN_KEY_SQL_BIG_RESULT
    | TOKEN_KEY_SQL_SMALL_RESULT
    | TOKEN_KEY_HIGH_PRIORITY
    | TOKEN_KEY_PRIMARY
    | TOKEN_KEY_USE
    | TOKEN_KEY_DEFAULT
    | TOKEN_KEY_EXISTS
    | TOKEN_KEY_DISTINCT
    | TOKEN_KEY_PARTITION
    | TOKEN_KEY_OFFSET
    | TOKEN_KEY_DESC
    | TOKEN_KEY_ASC
    | TOKEN_KEY_LIMIT
    | TOKEN_KEY_BY
    | TOKEN_KEY_ORDER
    | TOKEN_KEY_WHERE
    | TOKEN_KEY_FOR
    | TOKEN_KEY_COLUMNS
    | TOKEN_KEY_UNIQUE
    | TOKEN_KEY_INDEXES
    | TOKEN_KEY_INDEX
    | TOKEN_KEY_KEYS
    | TOKEN_KEY_KEY
    | TOKEN_KEY_IGNORE
    | TOKEN_KEY_FORCE
    | TOKEN_KEY_FROM
    | TOKEN_KEY_OUTFILE
    | TOKEN_KEY_ANY
    | TOKEN_KEY_ALL
    | TOKEN_KEY_IS
    | TOKEN_KEY_AS
    | TOKEN_KEY_SELECT
    | TOKEN_OP_AS
    | TOKEN_OP_GROUP
    | TOKEN_OP_OUTER
    | TOKEN_OP_JSON_TABLE
    | TOKEN_OP_MOD_TXT
    | TOKEN_OP_DIV_TXT
    | TOKEN_OP_NOT_TXT
    | TOKEN_OP_OR_TXT
    | TOKEN_OP_AND_TXT
    | TOKEN_OP_IN
    | TOKEN_OP_BETWEEN
    | TOKEN_OP_SOUNDS
    | TOKEN_OP_BOR
    | TOKEN_OP_BAND
    | TOKEN_OP_UP
    | TOKEN_OP_SHIFT_LEFT
    | TOKEN_OP_SHIFT_RIGHT
    | TOKEN_OP_EQ
    | TOKEN_OP_EQ2
    | TOKEN_OP_NEQ
    | TOKEN_OP_NEQ2
    | TOKEN_OP_GT
    | TOKEN_OP_LT
    | TOKEN_OP_GEQ
    | TOKEN_OP_LEQ
    | TOKEN_OP_NOT
    | TOKEN_OP_OR
    | TOKEN_OP_XOR
    | TOKEN_OP_AND
    | TOKEN_OP_TILDE
    | TOKEN_OP_LIKE
    | TOKEN_OP_BANG
    | TOKEN_OP_PLUS
    | TOKEN_OP_MINUS
    | TOKEN_OP_DIV
    | TOKEN_OP_TIMES
    | TOKEN_OP_PERC
    | TOKEN_OP_DOT
    | TOKEN_OP_JOIN
    | TOKEN_OP_INNER
    | TOKEN_OP_CROSS
    | TOKEN_OP_STRAIGHT_JOIN
    | TOKEN_OP_NATURAL
    | TOKEN_OP_LEFT
    | TOKEN_OP_RIGHT
    | TOKEN_OP_ON
    | TOKEN_OP_USING
    | TOKEN_OP_INTO
    | TOKEN_OP_UNION
    | TOKEN_PAR_LPAR
    | TOKEN_PAR_RPAR
    | TOKEN_PAR_LBRACE
    | TOKEN_PAR_RBRACE
    | TOKEN_DELIM_SCOLON
    | TOKEN_DELIM_COMMA
    | TOKEN_END_OF_INPUT
    | TOKEN_end_of_input
    | TOKEN_error
// This type is used to give symbolic names to token indexes, useful for error messages
type nonTerminalId = 
    | NONTERM__startstart_entry
    | NONTERM_start_entry
    | NONTERM_sql_statement
    | NONTERM_opt_end_of_input
    | NONTERM_simple_statement_or_begin
    | NONTERM_simple_statement
    | NONTERM_select_stmt
    | NONTERM_row_subquery
    | NONTERM_table_subquery
    | NONTERM_subquery
    | NONTERM_query_expression
    | NONTERM_opt_order_clause
    | NONTERM_order_clause
    | NONTERM_order_list
    | NONTERM_order_expr
    | NONTERM_opt_ordering_direction
    | NONTERM_ordering_direction
    | NONTERM_opt_limit_clause
    | NONTERM_limit_clause
    | NONTERM_limit_options
    | NONTERM_limit_option
    | NONTERM_opt_simple_limit
    | NONTERM_opt_locking_clause_list
    | NONTERM_locking_clause_list
    | NONTERM_locking_clause
    | NONTERM_query_expression_body
    | NONTERM_union_option
    | NONTERM_query_expression_parens
    | NONTERM_query_primary
    | NONTERM_query_specification
    | NONTERM_select_options
    | NONTERM_select_option_list
    | NONTERM_select_option
    | NONTERM_query_spec_option
    | NONTERM_select_item_list
    | NONTERM_select_item
    | NONTERM_select_alias
    | NONTERM_into_clause
    | NONTERM_into_destination
    | NONTERM_opt_from_clause
    | NONTERM_from_clause
    | NONTERM_from_tables
    | NONTERM_table_reference_list
    | NONTERM_table_reference
    | NONTERM_joined_table
    | NONTERM_natural_join_type
    | NONTERM_inner_join_type
    | NONTERM_outer_join_type
    | NONTERM_opt_inner
    | NONTERM_opt_outer
    | NONTERM_opt_use_partition
    | NONTERM_use_partition
    | NONTERM_table_factor
    | NONTERM_table_reference_list_parens
    | NONTERM_single_table_parens
    | NONTERM_single_table
    | NONTERM_joined_table_parens
    | NONTERM_derived_table
    | NONTERM_opt_derived_column_list
    | NONTERM_simple_ident_list
    | NONTERM_table_function
    | NONTERM_columns_clause
    | NONTERM_columns_list
    | NONTERM_jt_column
    | NONTERM_jt_column_type
    | NONTERM_opt_on_empty_or_error
    | NONTERM_opt_on_empty
    | NONTERM_opt_on_error
    | NONTERM_jt_on_response
    | NONTERM_index_hint_clause
    | NONTERM_index_hint_type
    | NONTERM_index_hint_definition
    | NONTERM_index_hints_list
    | NONTERM_opt_index_hints_list
    | NONTERM_opt_where_clause
    | NONTERM_opt_where_clause_expr
    | NONTERM_opt_key_definition
    | NONTERM_opt_group_clause
    | NONTERM_group_list
    | NONTERM_olap_opt
    | NONTERM_opt_having_clause
    | NONTERM_opt_window_clause
    | NONTERM_window_definition_list
    | NONTERM_window_definition
    | NONTERM_window_name
    | NONTERM_window_spec
    | NONTERM_opt_key_usage_list
    | NONTERM_key_usage_element
    | NONTERM_key_usage_list
    | NONTERM_using_list
    | NONTERM_ident_string_list
    | NONTERM_opt_as_or_eq
    | NONTERM_opt_table_alias
    | NONTERM_opt_all
    | NONTERM_key_or_index
    | NONTERM_opt_key_or_index
    | NONTERM_keys_or_index
    | NONTERM_opt_unique
    | NONTERM_set_type
    | NONTERM_expr_list
    | NONTERM_expr
    | NONTERM_bool_pri
    | NONTERM_predicate
    | NONTERM_bit_expr
    | NONTERM_op_or
    | NONTERM_op_and
    | NONTERM_op_not
    | NONTERM_comp_op
    | NONTERM_all_or_any
    | NONTERM_simple_expr
    | NONTERM_literal
    | NONTERM_text_literal
    | NONTERM_text_string_sys
    | NONTERM_num_literal
    | NONTERM_function_call_keyword
    | NONTERM_function_call_nonkeyword
    | NONTERM_function_call_generic
    | NONTERM_opt_expr_list
    | NONTERM_opt_udf_expr_list
    | NONTERM_udf_expr_list
    | NONTERM_udf_expr
    | NONTERM_ident_sys
    | NONTERM_ident
    | NONTERM_simple_ident
    | NONTERM_simple_ident_nospvar
    | NONTERM_simple_ident_q
    | NONTERM_table_ident
    | NONTERM_table_ident_opt_wild
    | NONTERM_opt_wild
    | NONTERM_table_wild

// This function maps tokens to integer indexes
let tagOfToken (t:token) = 
  match t with
  | VAL_ERROR  -> 0 
  | VAL_EMPTY  -> 1 
  | VAL_BOOL  -> 2 
  | VAL_DUAL  -> 3 
  | VAL_UNKNOWN  -> 4 
  | VAL_FALSE  -> 5 
  | VAL_TRUE  -> 6 
  | VAL_NULL  -> 7 
  | VAL_STRING _ -> 8 
  | VAL_BIN _ -> 9 
  | VAL_HEX _ -> 10 
  | VAL_NUM _ -> 11 
  | VAL_FLOAT _ -> 12 
  | VAL_ID _ -> 13 
  | NOKEY_NOW  -> 14 
  | NOKEY_NESTED  -> 15 
  | NOKEY_PATH  -> 16 
  | NOKEY_ORDINALITY  -> 17 
  | KEY_SQL_NO_CACHE  -> 18 
  | KEY_DATE  -> 19 
  | KEY_WINDOW  -> 20 
  | KEY_HAVING  -> 21 
  | KEY_ROLLUP  -> 22 
  | KEY_SQL_CALC_FOUND_ROWS  -> 23 
  | KEY_SQL_BUFFER_RESULT  -> 24 
  | KEY_SQL_BIG_RESULT  -> 25 
  | KEY_SQL_SMALL_RESULT  -> 26 
  | KEY_HIGH_PRIORITY  -> 27 
  | KEY_PRIMARY  -> 28 
  | KEY_USE  -> 29 
  | KEY_DEFAULT  -> 30 
  | KEY_EXISTS  -> 31 
  | KEY_DISTINCT  -> 32 
  | KEY_PARTITION  -> 33 
  | KEY_OFFSET  -> 34 
  | KEY_DESC  -> 35 
  | KEY_ASC  -> 36 
  | KEY_LIMIT  -> 37 
  | KEY_BY  -> 38 
  | KEY_ORDER  -> 39 
  | KEY_WHERE  -> 40 
  | KEY_FOR  -> 41 
  | KEY_COLUMNS  -> 42 
  | KEY_UNIQUE  -> 43 
  | KEY_INDEXES  -> 44 
  | KEY_INDEX  -> 45 
  | KEY_KEYS  -> 46 
  | KEY_KEY  -> 47 
  | KEY_IGNORE  -> 48 
  | KEY_FORCE  -> 49 
  | KEY_FROM  -> 50 
  | KEY_OUTFILE  -> 51 
  | KEY_ANY  -> 52 
  | KEY_ALL  -> 53 
  | KEY_IS  -> 54 
  | KEY_AS  -> 55 
  | KEY_SELECT  -> 56 
  | OP_AS  -> 57 
  | OP_GROUP  -> 58 
  | OP_OUTER  -> 59 
  | OP_JSON_TABLE  -> 60 
  | OP_MOD_TXT  -> 61 
  | OP_DIV_TXT  -> 62 
  | OP_NOT_TXT  -> 63 
  | OP_OR_TXT  -> 64 
  | OP_AND_TXT  -> 65 
  | OP_IN  -> 66 
  | OP_BETWEEN  -> 67 
  | OP_SOUNDS  -> 68 
  | OP_BOR  -> 69 
  | OP_BAND  -> 70 
  | OP_UP  -> 71 
  | OP_SHIFT_LEFT  -> 72 
  | OP_SHIFT_RIGHT  -> 73 
  | OP_EQ  -> 74 
  | OP_EQ2  -> 75 
  | OP_NEQ  -> 76 
  | OP_NEQ2  -> 77 
  | OP_GT  -> 78 
  | OP_LT  -> 79 
  | OP_GEQ  -> 80 
  | OP_LEQ  -> 81 
  | OP_NOT  -> 82 
  | OP_OR  -> 83 
  | OP_XOR  -> 84 
  | OP_AND  -> 85 
  | OP_TILDE  -> 86 
  | OP_LIKE  -> 87 
  | OP_BANG  -> 88 
  | OP_PLUS  -> 89 
  | OP_MINUS  -> 90 
  | OP_DIV  -> 91 
  | OP_TIMES  -> 92 
  | OP_PERC  -> 93 
  | OP_DOT  -> 94 
  | OP_JOIN  -> 95 
  | OP_INNER  -> 96 
  | OP_CROSS  -> 97 
  | OP_STRAIGHT_JOIN  -> 98 
  | OP_NATURAL  -> 99 
  | OP_LEFT  -> 100 
  | OP_RIGHT  -> 101 
  | OP_ON  -> 102 
  | OP_USING  -> 103 
  | OP_INTO  -> 104 
  | OP_UNION  -> 105 
  | PAR_LPAR  -> 106 
  | PAR_RPAR  -> 107 
  | PAR_LBRACE  -> 108 
  | PAR_RBRACE  -> 109 
  | DELIM_SCOLON  -> 110 
  | DELIM_COMMA  -> 111 
  | END_OF_INPUT  -> 112 

// This function maps integer indexes to symbolic token ids
let tokenTagToTokenId (tokenIdx:int) = 
  match tokenIdx with
  | 0 -> TOKEN_VAL_ERROR 
  | 1 -> TOKEN_VAL_EMPTY 
  | 2 -> TOKEN_VAL_BOOL 
  | 3 -> TOKEN_VAL_DUAL 
  | 4 -> TOKEN_VAL_UNKNOWN 
  | 5 -> TOKEN_VAL_FALSE 
  | 6 -> TOKEN_VAL_TRUE 
  | 7 -> TOKEN_VAL_NULL 
  | 8 -> TOKEN_VAL_STRING 
  | 9 -> TOKEN_VAL_BIN 
  | 10 -> TOKEN_VAL_HEX 
  | 11 -> TOKEN_VAL_NUM 
  | 12 -> TOKEN_VAL_FLOAT 
  | 13 -> TOKEN_VAL_ID 
  | 14 -> TOKEN_NOKEY_NOW 
  | 15 -> TOKEN_NOKEY_NESTED 
  | 16 -> TOKEN_NOKEY_PATH 
  | 17 -> TOKEN_NOKEY_ORDINALITY 
  | 18 -> TOKEN_KEY_SQL_NO_CACHE 
  | 19 -> TOKEN_KEY_DATE 
  | 20 -> TOKEN_KEY_WINDOW 
  | 21 -> TOKEN_KEY_HAVING 
  | 22 -> TOKEN_KEY_ROLLUP 
  | 23 -> TOKEN_KEY_SQL_CALC_FOUND_ROWS 
  | 24 -> TOKEN_KEY_SQL_BUFFER_RESULT 
  | 25 -> TOKEN_KEY_SQL_BIG_RESULT 
  | 26 -> TOKEN_KEY_SQL_SMALL_RESULT 
  | 27 -> TOKEN_KEY_HIGH_PRIORITY 
  | 28 -> TOKEN_KEY_PRIMARY 
  | 29 -> TOKEN_KEY_USE 
  | 30 -> TOKEN_KEY_DEFAULT 
  | 31 -> TOKEN_KEY_EXISTS 
  | 32 -> TOKEN_KEY_DISTINCT 
  | 33 -> TOKEN_KEY_PARTITION 
  | 34 -> TOKEN_KEY_OFFSET 
  | 35 -> TOKEN_KEY_DESC 
  | 36 -> TOKEN_KEY_ASC 
  | 37 -> TOKEN_KEY_LIMIT 
  | 38 -> TOKEN_KEY_BY 
  | 39 -> TOKEN_KEY_ORDER 
  | 40 -> TOKEN_KEY_WHERE 
  | 41 -> TOKEN_KEY_FOR 
  | 42 -> TOKEN_KEY_COLUMNS 
  | 43 -> TOKEN_KEY_UNIQUE 
  | 44 -> TOKEN_KEY_INDEXES 
  | 45 -> TOKEN_KEY_INDEX 
  | 46 -> TOKEN_KEY_KEYS 
  | 47 -> TOKEN_KEY_KEY 
  | 48 -> TOKEN_KEY_IGNORE 
  | 49 -> TOKEN_KEY_FORCE 
  | 50 -> TOKEN_KEY_FROM 
  | 51 -> TOKEN_KEY_OUTFILE 
  | 52 -> TOKEN_KEY_ANY 
  | 53 -> TOKEN_KEY_ALL 
  | 54 -> TOKEN_KEY_IS 
  | 55 -> TOKEN_KEY_AS 
  | 56 -> TOKEN_KEY_SELECT 
  | 57 -> TOKEN_OP_AS 
  | 58 -> TOKEN_OP_GROUP 
  | 59 -> TOKEN_OP_OUTER 
  | 60 -> TOKEN_OP_JSON_TABLE 
  | 61 -> TOKEN_OP_MOD_TXT 
  | 62 -> TOKEN_OP_DIV_TXT 
  | 63 -> TOKEN_OP_NOT_TXT 
  | 64 -> TOKEN_OP_OR_TXT 
  | 65 -> TOKEN_OP_AND_TXT 
  | 66 -> TOKEN_OP_IN 
  | 67 -> TOKEN_OP_BETWEEN 
  | 68 -> TOKEN_OP_SOUNDS 
  | 69 -> TOKEN_OP_BOR 
  | 70 -> TOKEN_OP_BAND 
  | 71 -> TOKEN_OP_UP 
  | 72 -> TOKEN_OP_SHIFT_LEFT 
  | 73 -> TOKEN_OP_SHIFT_RIGHT 
  | 74 -> TOKEN_OP_EQ 
  | 75 -> TOKEN_OP_EQ2 
  | 76 -> TOKEN_OP_NEQ 
  | 77 -> TOKEN_OP_NEQ2 
  | 78 -> TOKEN_OP_GT 
  | 79 -> TOKEN_OP_LT 
  | 80 -> TOKEN_OP_GEQ 
  | 81 -> TOKEN_OP_LEQ 
  | 82 -> TOKEN_OP_NOT 
  | 83 -> TOKEN_OP_OR 
  | 84 -> TOKEN_OP_XOR 
  | 85 -> TOKEN_OP_AND 
  | 86 -> TOKEN_OP_TILDE 
  | 87 -> TOKEN_OP_LIKE 
  | 88 -> TOKEN_OP_BANG 
  | 89 -> TOKEN_OP_PLUS 
  | 90 -> TOKEN_OP_MINUS 
  | 91 -> TOKEN_OP_DIV 
  | 92 -> TOKEN_OP_TIMES 
  | 93 -> TOKEN_OP_PERC 
  | 94 -> TOKEN_OP_DOT 
  | 95 -> TOKEN_OP_JOIN 
  | 96 -> TOKEN_OP_INNER 
  | 97 -> TOKEN_OP_CROSS 
  | 98 -> TOKEN_OP_STRAIGHT_JOIN 
  | 99 -> TOKEN_OP_NATURAL 
  | 100 -> TOKEN_OP_LEFT 
  | 101 -> TOKEN_OP_RIGHT 
  | 102 -> TOKEN_OP_ON 
  | 103 -> TOKEN_OP_USING 
  | 104 -> TOKEN_OP_INTO 
  | 105 -> TOKEN_OP_UNION 
  | 106 -> TOKEN_PAR_LPAR 
  | 107 -> TOKEN_PAR_RPAR 
  | 108 -> TOKEN_PAR_LBRACE 
  | 109 -> TOKEN_PAR_RBRACE 
  | 110 -> TOKEN_DELIM_SCOLON 
  | 111 -> TOKEN_DELIM_COMMA 
  | 112 -> TOKEN_END_OF_INPUT 
  | 115 -> TOKEN_end_of_input
  | 113 -> TOKEN_error
  | _ -> failwith "tokenTagToTokenId: bad token"

/// This function maps production indexes returned in syntax errors to strings representing the non terminal that would be produced by that production
let prodIdxToNonTerminal (prodIdx:int) = 
  match prodIdx with
    | 0 -> NONTERM__startstart_entry 
    | 1 -> NONTERM_start_entry 
    | 2 -> NONTERM_sql_statement 
    | 3 -> NONTERM_sql_statement 
    | 4 -> NONTERM_sql_statement 
    | 5 -> NONTERM_opt_end_of_input 
    | 6 -> NONTERM_opt_end_of_input 
    | 7 -> NONTERM_simple_statement_or_begin 
    | 8 -> NONTERM_simple_statement 
    | 9 -> NONTERM_select_stmt 
    | 10 -> NONTERM_select_stmt 
    | 11 -> NONTERM_row_subquery 
    | 12 -> NONTERM_table_subquery 
    | 13 -> NONTERM_subquery 
    | 14 -> NONTERM_query_expression 
    | 15 -> NONTERM_opt_order_clause 
    | 16 -> NONTERM_opt_order_clause 
    | 17 -> NONTERM_order_clause 
    | 18 -> NONTERM_order_list 
    | 19 -> NONTERM_order_list 
    | 20 -> NONTERM_order_expr 
    | 21 -> NONTERM_opt_ordering_direction 
    | 22 -> NONTERM_opt_ordering_direction 
    | 23 -> NONTERM_ordering_direction 
    | 24 -> NONTERM_ordering_direction 
    | 25 -> NONTERM_opt_limit_clause 
    | 26 -> NONTERM_opt_limit_clause 
    | 27 -> NONTERM_limit_clause 
    | 28 -> NONTERM_limit_options 
    | 29 -> NONTERM_limit_options 
    | 30 -> NONTERM_limit_options 
    | 31 -> NONTERM_limit_option 
    | 32 -> NONTERM_limit_option 
    | 33 -> NONTERM_opt_simple_limit 
    | 34 -> NONTERM_opt_simple_limit 
    | 35 -> NONTERM_opt_locking_clause_list 
    | 36 -> NONTERM_opt_locking_clause_list 
    | 37 -> NONTERM_locking_clause_list 
    | 38 -> NONTERM_locking_clause_list 
    | 39 -> NONTERM_locking_clause 
    | 40 -> NONTERM_query_expression_body 
    | 41 -> NONTERM_query_expression_body 
    | 42 -> NONTERM_query_expression_body 
    | 43 -> NONTERM_query_expression_body 
    | 44 -> NONTERM_query_expression_body 
    | 45 -> NONTERM_union_option 
    | 46 -> NONTERM_union_option 
    | 47 -> NONTERM_union_option 
    | 48 -> NONTERM_query_expression_parens 
    | 49 -> NONTERM_query_expression_parens 
    | 50 -> NONTERM_query_primary 
    | 51 -> NONTERM_query_specification 
    | 52 -> NONTERM_query_specification 
    | 53 -> NONTERM_select_options 
    | 54 -> NONTERM_select_options 
    | 55 -> NONTERM_select_option_list 
    | 56 -> NONTERM_select_option_list 
    | 57 -> NONTERM_select_option 
    | 58 -> NONTERM_select_option 
    | 59 -> NONTERM_query_spec_option 
    | 60 -> NONTERM_query_spec_option 
    | 61 -> NONTERM_query_spec_option 
    | 62 -> NONTERM_query_spec_option 
    | 63 -> NONTERM_query_spec_option 
    | 64 -> NONTERM_query_spec_option 
    | 65 -> NONTERM_query_spec_option 
    | 66 -> NONTERM_query_spec_option 
    | 67 -> NONTERM_select_item_list 
    | 68 -> NONTERM_select_item_list 
    | 69 -> NONTERM_select_item_list 
    | 70 -> NONTERM_select_item 
    | 71 -> NONTERM_select_item 
    | 72 -> NONTERM_select_alias 
    | 73 -> NONTERM_select_alias 
    | 74 -> NONTERM_select_alias 
    | 75 -> NONTERM_select_alias 
    | 76 -> NONTERM_select_alias 
    | 77 -> NONTERM_into_clause 
    | 78 -> NONTERM_into_destination 
    | 79 -> NONTERM_opt_from_clause 
    | 80 -> NONTERM_opt_from_clause 
    | 81 -> NONTERM_from_clause 
    | 82 -> NONTERM_from_tables 
    | 83 -> NONTERM_from_tables 
    | 84 -> NONTERM_table_reference_list 
    | 85 -> NONTERM_table_reference_list 
    | 86 -> NONTERM_table_reference 
    | 87 -> NONTERM_table_reference 
    | 88 -> NONTERM_joined_table 
    | 89 -> NONTERM_joined_table 
    | 90 -> NONTERM_joined_table 
    | 91 -> NONTERM_joined_table 
    | 92 -> NONTERM_joined_table 
    | 93 -> NONTERM_joined_table 
    | 94 -> NONTERM_natural_join_type 
    | 95 -> NONTERM_natural_join_type 
    | 96 -> NONTERM_natural_join_type 
    | 97 -> NONTERM_inner_join_type 
    | 98 -> NONTERM_inner_join_type 
    | 99 -> NONTERM_inner_join_type 
    | 100 -> NONTERM_inner_join_type 
    | 101 -> NONTERM_outer_join_type 
    | 102 -> NONTERM_outer_join_type 
    | 103 -> NONTERM_opt_inner 
    | 104 -> NONTERM_opt_inner 
    | 105 -> NONTERM_opt_outer 
    | 106 -> NONTERM_opt_outer 
    | 107 -> NONTERM_opt_use_partition 
    | 108 -> NONTERM_opt_use_partition 
    | 109 -> NONTERM_use_partition 
    | 110 -> NONTERM_table_factor 
    | 111 -> NONTERM_table_factor 
    | 112 -> NONTERM_table_factor 
    | 113 -> NONTERM_table_factor 
    | 114 -> NONTERM_table_factor 
    | 115 -> NONTERM_table_factor 
    | 116 -> NONTERM_table_reference_list_parens 
    | 117 -> NONTERM_table_reference_list_parens 
    | 118 -> NONTERM_single_table_parens 
    | 119 -> NONTERM_single_table_parens 
    | 120 -> NONTERM_single_table 
    | 121 -> NONTERM_joined_table_parens 
    | 122 -> NONTERM_joined_table_parens 
    | 123 -> NONTERM_derived_table 
    | 124 -> NONTERM_opt_derived_column_list 
    | 125 -> NONTERM_opt_derived_column_list 
    | 126 -> NONTERM_simple_ident_list 
    | 127 -> NONTERM_simple_ident_list 
    | 128 -> NONTERM_table_function 
    | 129 -> NONTERM_columns_clause 
    | 130 -> NONTERM_columns_list 
    | 131 -> NONTERM_columns_list 
    | 132 -> NONTERM_jt_column 
    | 133 -> NONTERM_jt_column 
    | 134 -> NONTERM_jt_column 
    | 135 -> NONTERM_jt_column_type 
    | 136 -> NONTERM_jt_column_type 
    | 137 -> NONTERM_opt_on_empty_or_error 
    | 138 -> NONTERM_opt_on_empty_or_error 
    | 139 -> NONTERM_opt_on_empty_or_error 
    | 140 -> NONTERM_opt_on_empty_or_error 
    | 141 -> NONTERM_opt_on_empty_or_error 
    | 142 -> NONTERM_opt_on_empty 
    | 143 -> NONTERM_opt_on_error 
    | 144 -> NONTERM_jt_on_response 
    | 145 -> NONTERM_jt_on_response 
    | 146 -> NONTERM_jt_on_response 
    | 147 -> NONTERM_index_hint_clause 
    | 148 -> NONTERM_index_hint_clause 
    | 149 -> NONTERM_index_hint_clause 
    | 150 -> NONTERM_index_hint_clause 
    | 151 -> NONTERM_index_hint_type 
    | 152 -> NONTERM_index_hint_type 
    | 153 -> NONTERM_index_hint_definition 
    | 154 -> NONTERM_index_hint_definition 
    | 155 -> NONTERM_index_hints_list 
    | 156 -> NONTERM_index_hints_list 
    | 157 -> NONTERM_opt_index_hints_list 
    | 158 -> NONTERM_opt_index_hints_list 
    | 159 -> NONTERM_opt_where_clause 
    | 160 -> NONTERM_opt_where_clause_expr 
    | 161 -> NONTERM_opt_where_clause_expr 
    | 162 -> NONTERM_opt_key_definition 
    | 163 -> NONTERM_opt_group_clause 
    | 164 -> NONTERM_opt_group_clause 
    | 165 -> NONTERM_group_list 
    | 166 -> NONTERM_group_list 
    | 167 -> NONTERM_olap_opt 
    | 168 -> NONTERM_olap_opt 
    | 169 -> NONTERM_opt_having_clause 
    | 170 -> NONTERM_opt_having_clause 
    | 171 -> NONTERM_opt_window_clause 
    | 172 -> NONTERM_opt_window_clause 
    | 173 -> NONTERM_window_definition_list 
    | 174 -> NONTERM_window_definition_list 
    | 175 -> NONTERM_window_definition 
    | 176 -> NONTERM_window_name 
    | 177 -> NONTERM_window_spec 
    | 178 -> NONTERM_opt_key_usage_list 
    | 179 -> NONTERM_opt_key_usage_list 
    | 180 -> NONTERM_key_usage_element 
    | 181 -> NONTERM_key_usage_element 
    | 182 -> NONTERM_key_usage_list 
    | 183 -> NONTERM_key_usage_list 
    | 184 -> NONTERM_using_list 
    | 185 -> NONTERM_ident_string_list 
    | 186 -> NONTERM_ident_string_list 
    | 187 -> NONTERM_opt_as_or_eq 
    | 188 -> NONTERM_opt_as_or_eq 
    | 189 -> NONTERM_opt_as_or_eq 
    | 190 -> NONTERM_opt_table_alias 
    | 191 -> NONTERM_opt_table_alias 
    | 192 -> NONTERM_opt_all 
    | 193 -> NONTERM_opt_all 
    | 194 -> NONTERM_key_or_index 
    | 195 -> NONTERM_key_or_index 
    | 196 -> NONTERM_opt_key_or_index 
    | 197 -> NONTERM_opt_key_or_index 
    | 198 -> NONTERM_keys_or_index 
    | 199 -> NONTERM_keys_or_index 
    | 200 -> NONTERM_keys_or_index 
    | 201 -> NONTERM_opt_unique 
    | 202 -> NONTERM_opt_unique 
    | 203 -> NONTERM_set_type 
    | 204 -> NONTERM_expr_list 
    | 205 -> NONTERM_expr_list 
    | 206 -> NONTERM_expr 
    | 207 -> NONTERM_expr 
    | 208 -> NONTERM_expr 
    | 209 -> NONTERM_expr 
    | 210 -> NONTERM_expr 
    | 211 -> NONTERM_expr 
    | 212 -> NONTERM_expr 
    | 213 -> NONTERM_expr 
    | 214 -> NONTERM_expr 
    | 215 -> NONTERM_expr 
    | 216 -> NONTERM_expr 
    | 217 -> NONTERM_bool_pri 
    | 218 -> NONTERM_bool_pri 
    | 219 -> NONTERM_bool_pri 
    | 220 -> NONTERM_bool_pri 
    | 221 -> NONTERM_predicate 
    | 222 -> NONTERM_predicate 
    | 223 -> NONTERM_predicate 
    | 224 -> NONTERM_predicate 
    | 225 -> NONTERM_predicate 
    | 226 -> NONTERM_predicate 
    | 227 -> NONTERM_predicate 
    | 228 -> NONTERM_predicate 
    | 229 -> NONTERM_predicate 
    | 230 -> NONTERM_predicate 
    | 231 -> NONTERM_bit_expr 
    | 232 -> NONTERM_bit_expr 
    | 233 -> NONTERM_bit_expr 
    | 234 -> NONTERM_bit_expr 
    | 235 -> NONTERM_bit_expr 
    | 236 -> NONTERM_bit_expr 
    | 237 -> NONTERM_bit_expr 
    | 238 -> NONTERM_bit_expr 
    | 239 -> NONTERM_bit_expr 
    | 240 -> NONTERM_bit_expr 
    | 241 -> NONTERM_bit_expr 
    | 242 -> NONTERM_bit_expr 
    | 243 -> NONTERM_bit_expr 
    | 244 -> NONTERM_op_or 
    | 245 -> NONTERM_op_or 
    | 246 -> NONTERM_op_and 
    | 247 -> NONTERM_op_and 
    | 248 -> NONTERM_op_not 
    | 249 -> NONTERM_op_not 
    | 250 -> NONTERM_comp_op 
    | 251 -> NONTERM_comp_op 
    | 252 -> NONTERM_comp_op 
    | 253 -> NONTERM_comp_op 
    | 254 -> NONTERM_comp_op 
    | 255 -> NONTERM_comp_op 
    | 256 -> NONTERM_comp_op 
    | 257 -> NONTERM_all_or_any 
    | 258 -> NONTERM_all_or_any 
    | 259 -> NONTERM_simple_expr 
    | 260 -> NONTERM_simple_expr 
    | 261 -> NONTERM_simple_expr 
    | 262 -> NONTERM_simple_expr 
    | 263 -> NONTERM_simple_expr 
    | 264 -> NONTERM_simple_expr 
    | 265 -> NONTERM_simple_expr 
    | 266 -> NONTERM_simple_expr 
    | 267 -> NONTERM_simple_expr 
    | 268 -> NONTERM_simple_expr 
    | 269 -> NONTERM_simple_expr 
    | 270 -> NONTERM_simple_expr 
    | 271 -> NONTERM_literal 
    | 272 -> NONTERM_literal 
    | 273 -> NONTERM_literal 
    | 274 -> NONTERM_literal 
    | 275 -> NONTERM_literal 
    | 276 -> NONTERM_literal 
    | 277 -> NONTERM_literal 
    | 278 -> NONTERM_text_literal 
    | 279 -> NONTERM_text_string_sys 
    | 280 -> NONTERM_num_literal 
    | 281 -> NONTERM_num_literal 
    | 282 -> NONTERM_function_call_keyword 
    | 283 -> NONTERM_function_call_nonkeyword 
    | 284 -> NONTERM_function_call_generic 
    | 285 -> NONTERM_function_call_generic 
    | 286 -> NONTERM_opt_expr_list 
    | 287 -> NONTERM_opt_expr_list 
    | 288 -> NONTERM_opt_udf_expr_list 
    | 289 -> NONTERM_opt_udf_expr_list 
    | 290 -> NONTERM_udf_expr_list 
    | 291 -> NONTERM_udf_expr_list 
    | 292 -> NONTERM_udf_expr 
    | 293 -> NONTERM_ident_sys 
    | 294 -> NONTERM_ident_sys 
    | 295 -> NONTERM_ident 
    | 296 -> NONTERM_simple_ident 
    | 297 -> NONTERM_simple_ident 
    | 298 -> NONTERM_simple_ident_nospvar 
    | 299 -> NONTERM_simple_ident_nospvar 
    | 300 -> NONTERM_simple_ident_q 
    | 301 -> NONTERM_simple_ident_q 
    | 302 -> NONTERM_table_ident 
    | 303 -> NONTERM_table_ident 
    | 304 -> NONTERM_table_ident_opt_wild 
    | 305 -> NONTERM_table_ident_opt_wild 
    | 306 -> NONTERM_opt_wild 
    | 307 -> NONTERM_opt_wild 
    | 308 -> NONTERM_table_wild 
    | 309 -> NONTERM_table_wild 
    | _ -> failwith "prodIdxToNonTerminal: bad production index"

let _fsyacc_endOfInputTag = 115 
let _fsyacc_tagOfErrorTerminal = 113

// This function gets the name of a token as a string
let token_to_string (t:token) = 
  match t with 
  | VAL_ERROR  -> "VAL_ERROR" 
  | VAL_EMPTY  -> "VAL_EMPTY" 
  | VAL_BOOL  -> "VAL_BOOL" 
  | VAL_DUAL  -> "VAL_DUAL" 
  | VAL_UNKNOWN  -> "VAL_UNKNOWN" 
  | VAL_FALSE  -> "VAL_FALSE" 
  | VAL_TRUE  -> "VAL_TRUE" 
  | VAL_NULL  -> "VAL_NULL" 
  | VAL_STRING _ -> "VAL_STRING" 
  | VAL_BIN _ -> "VAL_BIN" 
  | VAL_HEX _ -> "VAL_HEX" 
  | VAL_NUM _ -> "VAL_NUM" 
  | VAL_FLOAT _ -> "VAL_FLOAT" 
  | VAL_ID _ -> "VAL_ID" 
  | NOKEY_NOW  -> "NOKEY_NOW" 
  | NOKEY_NESTED  -> "NOKEY_NESTED" 
  | NOKEY_PATH  -> "NOKEY_PATH" 
  | NOKEY_ORDINALITY  -> "NOKEY_ORDINALITY" 
  | KEY_SQL_NO_CACHE  -> "KEY_SQL_NO_CACHE" 
  | KEY_DATE  -> "KEY_DATE" 
  | KEY_WINDOW  -> "KEY_WINDOW" 
  | KEY_HAVING  -> "KEY_HAVING" 
  | KEY_ROLLUP  -> "KEY_ROLLUP" 
  | KEY_SQL_CALC_FOUND_ROWS  -> "KEY_SQL_CALC_FOUND_ROWS" 
  | KEY_SQL_BUFFER_RESULT  -> "KEY_SQL_BUFFER_RESULT" 
  | KEY_SQL_BIG_RESULT  -> "KEY_SQL_BIG_RESULT" 
  | KEY_SQL_SMALL_RESULT  -> "KEY_SQL_SMALL_RESULT" 
  | KEY_HIGH_PRIORITY  -> "KEY_HIGH_PRIORITY" 
  | KEY_PRIMARY  -> "KEY_PRIMARY" 
  | KEY_USE  -> "KEY_USE" 
  | KEY_DEFAULT  -> "KEY_DEFAULT" 
  | KEY_EXISTS  -> "KEY_EXISTS" 
  | KEY_DISTINCT  -> "KEY_DISTINCT" 
  | KEY_PARTITION  -> "KEY_PARTITION" 
  | KEY_OFFSET  -> "KEY_OFFSET" 
  | KEY_DESC  -> "KEY_DESC" 
  | KEY_ASC  -> "KEY_ASC" 
  | KEY_LIMIT  -> "KEY_LIMIT" 
  | KEY_BY  -> "KEY_BY" 
  | KEY_ORDER  -> "KEY_ORDER" 
  | KEY_WHERE  -> "KEY_WHERE" 
  | KEY_FOR  -> "KEY_FOR" 
  | KEY_COLUMNS  -> "KEY_COLUMNS" 
  | KEY_UNIQUE  -> "KEY_UNIQUE" 
  | KEY_INDEXES  -> "KEY_INDEXES" 
  | KEY_INDEX  -> "KEY_INDEX" 
  | KEY_KEYS  -> "KEY_KEYS" 
  | KEY_KEY  -> "KEY_KEY" 
  | KEY_IGNORE  -> "KEY_IGNORE" 
  | KEY_FORCE  -> "KEY_FORCE" 
  | KEY_FROM  -> "KEY_FROM" 
  | KEY_OUTFILE  -> "KEY_OUTFILE" 
  | KEY_ANY  -> "KEY_ANY" 
  | KEY_ALL  -> "KEY_ALL" 
  | KEY_IS  -> "KEY_IS" 
  | KEY_AS  -> "KEY_AS" 
  | KEY_SELECT  -> "KEY_SELECT" 
  | OP_AS  -> "OP_AS" 
  | OP_GROUP  -> "OP_GROUP" 
  | OP_OUTER  -> "OP_OUTER" 
  | OP_JSON_TABLE  -> "OP_JSON_TABLE" 
  | OP_MOD_TXT  -> "OP_MOD_TXT" 
  | OP_DIV_TXT  -> "OP_DIV_TXT" 
  | OP_NOT_TXT  -> "OP_NOT_TXT" 
  | OP_OR_TXT  -> "OP_OR_TXT" 
  | OP_AND_TXT  -> "OP_AND_TXT" 
  | OP_IN  -> "OP_IN" 
  | OP_BETWEEN  -> "OP_BETWEEN" 
  | OP_SOUNDS  -> "OP_SOUNDS" 
  | OP_BOR  -> "OP_BOR" 
  | OP_BAND  -> "OP_BAND" 
  | OP_UP  -> "OP_UP" 
  | OP_SHIFT_LEFT  -> "OP_SHIFT_LEFT" 
  | OP_SHIFT_RIGHT  -> "OP_SHIFT_RIGHT" 
  | OP_EQ  -> "OP_EQ" 
  | OP_EQ2  -> "OP_EQ2" 
  | OP_NEQ  -> "OP_NEQ" 
  | OP_NEQ2  -> "OP_NEQ2" 
  | OP_GT  -> "OP_GT" 
  | OP_LT  -> "OP_LT" 
  | OP_GEQ  -> "OP_GEQ" 
  | OP_LEQ  -> "OP_LEQ" 
  | OP_NOT  -> "OP_NOT" 
  | OP_OR  -> "OP_OR" 
  | OP_XOR  -> "OP_XOR" 
  | OP_AND  -> "OP_AND" 
  | OP_TILDE  -> "OP_TILDE" 
  | OP_LIKE  -> "OP_LIKE" 
  | OP_BANG  -> "OP_BANG" 
  | OP_PLUS  -> "OP_PLUS" 
  | OP_MINUS  -> "OP_MINUS" 
  | OP_DIV  -> "OP_DIV" 
  | OP_TIMES  -> "OP_TIMES" 
  | OP_PERC  -> "OP_PERC" 
  | OP_DOT  -> "OP_DOT" 
  | OP_JOIN  -> "OP_JOIN" 
  | OP_INNER  -> "OP_INNER" 
  | OP_CROSS  -> "OP_CROSS" 
  | OP_STRAIGHT_JOIN  -> "OP_STRAIGHT_JOIN" 
  | OP_NATURAL  -> "OP_NATURAL" 
  | OP_LEFT  -> "OP_LEFT" 
  | OP_RIGHT  -> "OP_RIGHT" 
  | OP_ON  -> "OP_ON" 
  | OP_USING  -> "OP_USING" 
  | OP_INTO  -> "OP_INTO" 
  | OP_UNION  -> "OP_UNION" 
  | PAR_LPAR  -> "PAR_LPAR" 
  | PAR_RPAR  -> "PAR_RPAR" 
  | PAR_LBRACE  -> "PAR_LBRACE" 
  | PAR_RBRACE  -> "PAR_RBRACE" 
  | DELIM_SCOLON  -> "DELIM_SCOLON" 
  | DELIM_COMMA  -> "DELIM_COMMA" 
  | END_OF_INPUT  -> "END_OF_INPUT" 

// This function gets the data carried by a token as an object
let _fsyacc_dataOfToken (t:token) = 
  match t with 
  | VAL_ERROR  -> (null : System.Object) 
  | VAL_EMPTY  -> (null : System.Object) 
  | VAL_BOOL  -> (null : System.Object) 
  | VAL_DUAL  -> (null : System.Object) 
  | VAL_UNKNOWN  -> (null : System.Object) 
  | VAL_FALSE  -> (null : System.Object) 
  | VAL_TRUE  -> (null : System.Object) 
  | VAL_NULL  -> (null : System.Object) 
  | VAL_STRING _fsyacc_x -> Microsoft.FSharp.Core.Operators.box _fsyacc_x 
  | VAL_BIN _fsyacc_x -> Microsoft.FSharp.Core.Operators.box _fsyacc_x 
  | VAL_HEX _fsyacc_x -> Microsoft.FSharp.Core.Operators.box _fsyacc_x 
  | VAL_NUM _fsyacc_x -> Microsoft.FSharp.Core.Operators.box _fsyacc_x 
  | VAL_FLOAT _fsyacc_x -> Microsoft.FSharp.Core.Operators.box _fsyacc_x 
  | VAL_ID _fsyacc_x -> Microsoft.FSharp.Core.Operators.box _fsyacc_x 
  | NOKEY_NOW  -> (null : System.Object) 
  | NOKEY_NESTED  -> (null : System.Object) 
  | NOKEY_PATH  -> (null : System.Object) 
  | NOKEY_ORDINALITY  -> (null : System.Object) 
  | KEY_SQL_NO_CACHE  -> (null : System.Object) 
  | KEY_DATE  -> (null : System.Object) 
  | KEY_WINDOW  -> (null : System.Object) 
  | KEY_HAVING  -> (null : System.Object) 
  | KEY_ROLLUP  -> (null : System.Object) 
  | KEY_SQL_CALC_FOUND_ROWS  -> (null : System.Object) 
  | KEY_SQL_BUFFER_RESULT  -> (null : System.Object) 
  | KEY_SQL_BIG_RESULT  -> (null : System.Object) 
  | KEY_SQL_SMALL_RESULT  -> (null : System.Object) 
  | KEY_HIGH_PRIORITY  -> (null : System.Object) 
  | KEY_PRIMARY  -> (null : System.Object) 
  | KEY_USE  -> (null : System.Object) 
  | KEY_DEFAULT  -> (null : System.Object) 
  | KEY_EXISTS  -> (null : System.Object) 
  | KEY_DISTINCT  -> (null : System.Object) 
  | KEY_PARTITION  -> (null : System.Object) 
  | KEY_OFFSET  -> (null : System.Object) 
  | KEY_DESC  -> (null : System.Object) 
  | KEY_ASC  -> (null : System.Object) 
  | KEY_LIMIT  -> (null : System.Object) 
  | KEY_BY  -> (null : System.Object) 
  | KEY_ORDER  -> (null : System.Object) 
  | KEY_WHERE  -> (null : System.Object) 
  | KEY_FOR  -> (null : System.Object) 
  | KEY_COLUMNS  -> (null : System.Object) 
  | KEY_UNIQUE  -> (null : System.Object) 
  | KEY_INDEXES  -> (null : System.Object) 
  | KEY_INDEX  -> (null : System.Object) 
  | KEY_KEYS  -> (null : System.Object) 
  | KEY_KEY  -> (null : System.Object) 
  | KEY_IGNORE  -> (null : System.Object) 
  | KEY_FORCE  -> (null : System.Object) 
  | KEY_FROM  -> (null : System.Object) 
  | KEY_OUTFILE  -> (null : System.Object) 
  | KEY_ANY  -> (null : System.Object) 
  | KEY_ALL  -> (null : System.Object) 
  | KEY_IS  -> (null : System.Object) 
  | KEY_AS  -> (null : System.Object) 
  | KEY_SELECT  -> (null : System.Object) 
  | OP_AS  -> (null : System.Object) 
  | OP_GROUP  -> (null : System.Object) 
  | OP_OUTER  -> (null : System.Object) 
  | OP_JSON_TABLE  -> (null : System.Object) 
  | OP_MOD_TXT  -> (null : System.Object) 
  | OP_DIV_TXT  -> (null : System.Object) 
  | OP_NOT_TXT  -> (null : System.Object) 
  | OP_OR_TXT  -> (null : System.Object) 
  | OP_AND_TXT  -> (null : System.Object) 
  | OP_IN  -> (null : System.Object) 
  | OP_BETWEEN  -> (null : System.Object) 
  | OP_SOUNDS  -> (null : System.Object) 
  | OP_BOR  -> (null : System.Object) 
  | OP_BAND  -> (null : System.Object) 
  | OP_UP  -> (null : System.Object) 
  | OP_SHIFT_LEFT  -> (null : System.Object) 
  | OP_SHIFT_RIGHT  -> (null : System.Object) 
  | OP_EQ  -> (null : System.Object) 
  | OP_EQ2  -> (null : System.Object) 
  | OP_NEQ  -> (null : System.Object) 
  | OP_NEQ2  -> (null : System.Object) 
  | OP_GT  -> (null : System.Object) 
  | OP_LT  -> (null : System.Object) 
  | OP_GEQ  -> (null : System.Object) 
  | OP_LEQ  -> (null : System.Object) 
  | OP_NOT  -> (null : System.Object) 
  | OP_OR  -> (null : System.Object) 
  | OP_XOR  -> (null : System.Object) 
  | OP_AND  -> (null : System.Object) 
  | OP_TILDE  -> (null : System.Object) 
  | OP_LIKE  -> (null : System.Object) 
  | OP_BANG  -> (null : System.Object) 
  | OP_PLUS  -> (null : System.Object) 
  | OP_MINUS  -> (null : System.Object) 
  | OP_DIV  -> (null : System.Object) 
  | OP_TIMES  -> (null : System.Object) 
  | OP_PERC  -> (null : System.Object) 
  | OP_DOT  -> (null : System.Object) 
  | OP_JOIN  -> (null : System.Object) 
  | OP_INNER  -> (null : System.Object) 
  | OP_CROSS  -> (null : System.Object) 
  | OP_STRAIGHT_JOIN  -> (null : System.Object) 
  | OP_NATURAL  -> (null : System.Object) 
  | OP_LEFT  -> (null : System.Object) 
  | OP_RIGHT  -> (null : System.Object) 
  | OP_ON  -> (null : System.Object) 
  | OP_USING  -> (null : System.Object) 
  | OP_INTO  -> (null : System.Object) 
  | OP_UNION  -> (null : System.Object) 
  | PAR_LPAR  -> (null : System.Object) 
  | PAR_RPAR  -> (null : System.Object) 
  | PAR_LBRACE  -> (null : System.Object) 
  | PAR_RBRACE  -> (null : System.Object) 
  | DELIM_SCOLON  -> (null : System.Object) 
  | DELIM_COMMA  -> (null : System.Object) 
  | END_OF_INPUT  -> (null : System.Object) 
let _fsyacc_gotos = [| 0us; 65535us; 1us; 65535us; 0us; 1us; 2us; 65535us; 0us; 2us; 5us; 8us; 1us; 65535us; 5us; 6us; 2us; 65535us; 0us; 4us; 5us; 4us; 2us; 65535us; 0us; 9us; 5us; 9us; 2us; 65535us; 0us; 10us; 5us; 10us; 49us; 65535us; 23us; 417us; 25us; 417us; 61us; 417us; 62us; 417us; 63us; 417us; 69us; 417us; 95us; 417us; 127us; 417us; 134us; 417us; 200us; 417us; 267us; 417us; 271us; 417us; 274us; 417us; 278us; 417us; 314us; 417us; 325us; 417us; 326us; 417us; 327us; 417us; 328us; 417us; 340us; 417us; 350us; 417us; 353us; 417us; 355us; 417us; 357us; 417us; 359us; 417us; 361us; 417us; 364us; 417us; 378us; 417us; 379us; 417us; 380us; 417us; 381us; 417us; 382us; 417us; 383us; 417us; 384us; 417us; 385us; 417us; 386us; 417us; 387us; 417us; 388us; 417us; 389us; 417us; 409us; 417us; 411us; 417us; 413us; 417us; 415us; 417us; 419us; 417us; 433us; 417us; 436us; 417us; 439us; 417us; 448us; 417us; 453us; 417us; 9us; 65535us; 60us; 190us; 111us; 190us; 117us; 190us; 118us; 190us; 126us; 190us; 133us; 190us; 140us; 190us; 344us; 345us; 347us; 348us; 58us; 65535us; 23us; 13us; 25us; 13us; 60us; 14us; 61us; 13us; 62us; 13us; 63us; 13us; 69us; 13us; 95us; 13us; 111us; 14us; 117us; 14us; 118us; 14us; 126us; 14us; 127us; 13us; 133us; 14us; 134us; 13us; 140us; 14us; 200us; 13us; 267us; 13us; 271us; 13us; 274us; 13us; 278us; 13us; 314us; 13us; 325us; 13us; 326us; 13us; 327us; 13us; 328us; 13us; 340us; 13us; 344us; 14us; 347us; 14us; 350us; 13us; 353us; 13us; 355us; 13us; 357us; 13us; 359us; 13us; 361us; 13us; 364us; 13us; 378us; 13us; 379us; 13us; 380us; 13us; 381us; 13us; 382us; 13us; 383us; 13us; 384us; 13us; 385us; 13us; 386us; 13us; 387us; 13us; 388us; 13us; 389us; 13us; 409us; 13us; 411us; 13us; 413us; 13us; 415us; 13us; 419us; 13us; 433us; 13us; 436us; 13us; 439us; 13us; 448us; 13us; 453us; 13us; 7us; 65535us; 0us; 11us; 5us; 11us; 59us; 65us; 60us; 65us; 61us; 65us; 62us; 65us; 63us; 65us; 1us; 65535us; 17us; 18us; 1us; 65535us; 17us; 21us; 1us; 65535us; 23us; 24us; 2us; 65535us; 23us; 27us; 25us; 26us; 1us; 65535us; 28us; 29us; 1us; 65535us; 28us; 30us; 1us; 65535us; 18us; 19us; 1us; 65535us; 18us; 33us; 1us; 65535us; 34us; 35us; 3us; 65535us; 34us; 36us; 37us; 38us; 39us; 40us; 0us; 65535us; 1us; 65535us; 19us; 20us; 1us; 65535us; 19us; 43us; 2us; 65535us; 19us; 45us; 43us; 44us; 7us; 65535us; 0us; 17us; 5us; 17us; 59us; 17us; 60us; 17us; 61us; 17us; 62us; 17us; 63us; 17us; 2us; 65535us; 48us; 49us; 52us; 53us; 63us; 65535us; 0us; 12us; 5us; 12us; 23us; 15us; 25us; 15us; 49us; 55us; 53us; 56us; 59us; 51us; 60us; 16us; 61us; 16us; 62us; 16us; 63us; 16us; 69us; 15us; 95us; 15us; 111us; 15us; 117us; 15us; 118us; 15us; 126us; 15us; 127us; 15us; 133us; 15us; 134us; 15us; 140us; 15us; 200us; 15us; 267us; 15us; 271us; 15us; 274us; 15us; 278us; 15us; 314us; 15us; 325us; 15us; 326us; 15us; 327us; 15us; 328us; 15us; 340us; 15us; 344us; 15us; 347us; 15us; 350us; 15us; 353us; 15us; 355us; 15us; 357us; 15us; 359us; 15us; 361us; 15us; 364us; 15us; 378us; 15us; 379us; 15us; 380us; 15us; 381us; 15us; 382us; 15us; 383us; 15us; 384us; 15us; 385us; 15us; 386us; 15us; 387us; 15us; 388us; 15us; 389us; 15us; 409us; 15us; 411us; 15us; 413us; 15us; 415us; 15us; 419us; 15us; 433us; 15us; 436us; 15us; 439us; 15us; 448us; 15us; 453us; 15us; 9us; 65535us; 0us; 47us; 5us; 47us; 49us; 50us; 53us; 54us; 59us; 47us; 60us; 47us; 61us; 47us; 62us; 47us; 63us; 47us; 9us; 65535us; 0us; 67us; 5us; 67us; 49us; 67us; 53us; 67us; 59us; 67us; 60us; 67us; 61us; 67us; 62us; 67us; 63us; 67us; 1us; 65535us; 68us; 69us; 1us; 65535us; 68us; 82us; 2us; 65535us; 68us; 84us; 82us; 83us; 2us; 65535us; 68us; 85us; 82us; 85us; 1us; 65535us; 69us; 70us; 2us; 65535us; 69us; 97us; 95us; 96us; 2us; 65535us; 100us; 101us; 324us; 455us; 1us; 65535us; 70us; 71us; 1us; 65535us; 107us; 108us; 2us; 65535us; 70us; 77us; 71us; 72us; 2us; 65535us; 70us; 110us; 71us; 110us; 1us; 65535us; 111us; 112us; 2us; 65535us; 60us; 116us; 111us; 114us; 6us; 65535us; 60us; 115us; 111us; 115us; 117us; 119us; 118us; 120us; 126us; 124us; 133us; 125us; 6us; 65535us; 60us; 123us; 111us; 122us; 117us; 122us; 118us; 122us; 126us; 122us; 133us; 122us; 5us; 65535us; 115us; 140us; 119us; 140us; 120us; 140us; 124us; 140us; 125us; 140us; 5us; 65535us; 115us; 126us; 119us; 126us; 120us; 126us; 124us; 126us; 125us; 126us; 5us; 65535us; 115us; 133us; 119us; 133us; 120us; 133us; 124us; 133us; 125us; 133us; 1us; 65535us; 142us; 143us; 4us; 65535us; 145us; 146us; 148us; 149us; 157us; 158us; 160us; 161us; 1us; 65535us; 184us; 185us; 1us; 65535us; 184us; 165us; 7us; 65535us; 60us; 121us; 111us; 121us; 117us; 121us; 118us; 121us; 126us; 121us; 133us; 121us; 140us; 141us; 7us; 65535us; 60us; 178us; 111us; 177us; 117us; 177us; 118us; 177us; 126us; 177us; 133us; 177us; 140us; 177us; 7us; 65535us; 60us; 173us; 111us; 172us; 117us; 172us; 118us; 172us; 126us; 172us; 133us; 172us; 140us; 172us; 7us; 65535us; 60us; 171us; 111us; 170us; 117us; 170us; 118us; 170us; 126us; 170us; 133us; 170us; 140us; 170us; 7us; 65535us; 60us; 176us; 111us; 175us; 117us; 175us; 118us; 175us; 126us; 175us; 133us; 175us; 140us; 175us; 7us; 65535us; 60us; 174us; 111us; 174us; 117us; 174us; 118us; 174us; 126us; 174us; 133us; 174us; 140us; 174us; 1us; 65535us; 191us; 192us; 1us; 65535us; 193us; 194us; 7us; 65535us; 60us; 179us; 111us; 179us; 117us; 179us; 118us; 179us; 126us; 179us; 133us; 179us; 140us; 179us; 2us; 65535us; 203us; 204us; 224us; 225us; 1us; 65535us; 208us; 209us; 2us; 65535us; 208us; 211us; 212us; 213us; 1us; 65535us; 217us; 218us; 1us; 65535us; 220us; 221us; 2us; 65535us; 220us; 227us; 228us; 230us; 2us; 65535us; 220us; 228us; 227us; 229us; 3us; 65535us; 220us; 232us; 227us; 236us; 228us; 231us; 2us; 65535us; 252us; 253us; 258us; 259us; 2us; 65535us; 186us; 251us; 264us; 251us; 2us; 65535us; 186us; 263us; 264us; 265us; 1us; 65535us; 186us; 264us; 1us; 65535us; 186us; 269us; 2us; 65535us; 72us; 73us; 77us; 78us; 2us; 65535us; 72us; 266us; 77us; 266us; 1us; 65535us; 186us; 187us; 2us; 65535us; 73us; 74us; 78us; 79us; 1us; 65535us; 271us; 272us; 1us; 65535us; 272us; 273us; 2us; 65535us; 74us; 75us; 79us; 80us; 2us; 65535us; 75us; 76us; 80us; 81us; 1us; 65535us; 280us; 281us; 2us; 65535us; 280us; 282us; 283us; 284us; 2us; 65535us; 280us; 285us; 283us; 285us; 1us; 65535us; 286us; 287us; 1us; 65535us; 260us; 261us; 3us; 65535us; 254us; 294us; 260us; 294us; 295us; 296us; 2us; 65535us; 254us; 255us; 260us; 291us; 3us; 65535us; 130us; 131us; 137us; 138us; 167us; 168us; 3us; 65535us; 130us; 297us; 137us; 297us; 167us; 297us; 3us; 65535us; 185us; 303us; 190us; 303us; 205us; 303us; 3us; 65535us; 185us; 186us; 190us; 191us; 205us; 206us; 0us; 65535us; 2us; 65535us; 251us; 252us; 257us; 258us; 0us; 65535us; 0us; 65535us; 0us; 65535us; 1us; 65535us; 214us; 217us; 5us; 65535us; 350us; 309us; 353us; 310us; 419us; 311us; 433us; 312us; 448us; 313us; 27us; 65535us; 23us; 28us; 25us; 28us; 61us; 320us; 62us; 321us; 63us; 322us; 69us; 100us; 95us; 100us; 127us; 128us; 134us; 135us; 200us; 201us; 267us; 268us; 271us; 276us; 274us; 275us; 278us; 279us; 314us; 315us; 325us; 316us; 326us; 317us; 327us; 318us; 328us; 319us; 350us; 308us; 353us; 308us; 419us; 308us; 433us; 308us; 436us; 323us; 439us; 324us; 448us; 308us; 453us; 324us; 27us; 65535us; 23us; 329us; 25us; 329us; 61us; 329us; 62us; 329us; 63us; 329us; 69us; 329us; 95us; 329us; 127us; 329us; 134us; 329us; 200us; 329us; 267us; 329us; 271us; 329us; 274us; 329us; 278us; 329us; 314us; 329us; 325us; 329us; 326us; 329us; 327us; 329us; 328us; 329us; 350us; 329us; 353us; 329us; 419us; 329us; 433us; 329us; 436us; 329us; 439us; 329us; 448us; 329us; 453us; 329us; 30us; 65535us; 23us; 342us; 25us; 342us; 61us; 342us; 62us; 342us; 63us; 342us; 69us; 342us; 95us; 342us; 127us; 342us; 134us; 342us; 200us; 342us; 267us; 342us; 271us; 342us; 274us; 342us; 278us; 342us; 314us; 342us; 325us; 342us; 326us; 342us; 327us; 342us; 328us; 342us; 340us; 341us; 350us; 342us; 353us; 342us; 357us; 358us; 361us; 362us; 419us; 342us; 433us; 342us; 436us; 342us; 439us; 342us; 448us; 342us; 453us; 342us; 45us; 65535us; 23us; 343us; 25us; 343us; 61us; 343us; 62us; 343us; 63us; 343us; 69us; 343us; 95us; 343us; 127us; 343us; 134us; 343us; 200us; 343us; 267us; 343us; 271us; 343us; 274us; 343us; 278us; 343us; 314us; 343us; 325us; 343us; 326us; 343us; 327us; 343us; 328us; 343us; 340us; 343us; 350us; 343us; 353us; 343us; 355us; 356us; 357us; 343us; 359us; 360us; 361us; 343us; 364us; 365us; 378us; 366us; 379us; 367us; 380us; 368us; 381us; 369us; 382us; 370us; 383us; 371us; 384us; 372us; 385us; 373us; 386us; 374us; 387us; 375us; 388us; 376us; 389us; 377us; 419us; 343us; 433us; 343us; 436us; 343us; 439us; 343us; 448us; 343us; 453us; 343us; 20us; 65535us; 28us; 325us; 100us; 325us; 128us; 325us; 135us; 325us; 201us; 325us; 268us; 325us; 275us; 325us; 276us; 325us; 279us; 325us; 308us; 325us; 315us; 325us; 316us; 325us; 317us; 325us; 318us; 325us; 319us; 325us; 320us; 325us; 321us; 325us; 322us; 325us; 323us; 325us; 324us; 325us; 20us; 65535us; 28us; 327us; 100us; 327us; 128us; 327us; 135us; 327us; 201us; 327us; 268us; 327us; 275us; 327us; 276us; 327us; 279us; 327us; 308us; 327us; 315us; 327us; 316us; 327us; 317us; 327us; 318us; 327us; 319us; 327us; 320us; 327us; 321us; 327us; 322us; 327us; 323us; 327us; 324us; 327us; 2us; 65535us; 330us; 332us; 343us; 346us; 1us; 65535us; 329us; 340us; 0us; 65535us; 49us; 65535us; 23us; 390us; 25us; 390us; 61us; 390us; 62us; 390us; 63us; 390us; 69us; 390us; 95us; 390us; 127us; 390us; 134us; 390us; 200us; 390us; 267us; 390us; 271us; 390us; 274us; 390us; 278us; 390us; 314us; 390us; 325us; 390us; 326us; 390us; 327us; 390us; 328us; 390us; 340us; 390us; 350us; 390us; 353us; 390us; 355us; 390us; 357us; 390us; 359us; 390us; 361us; 390us; 364us; 390us; 378us; 390us; 379us; 390us; 380us; 390us; 381us; 390us; 382us; 390us; 383us; 390us; 384us; 390us; 385us; 390us; 386us; 390us; 387us; 390us; 388us; 390us; 389us; 390us; 409us; 410us; 411us; 412us; 413us; 414us; 415us; 416us; 419us; 390us; 433us; 390us; 436us; 390us; 439us; 390us; 448us; 390us; 453us; 390us; 49us; 65535us; 23us; 408us; 25us; 408us; 61us; 408us; 62us; 408us; 63us; 408us; 69us; 408us; 95us; 408us; 127us; 408us; 134us; 408us; 200us; 408us; 267us; 408us; 271us; 408us; 274us; 408us; 278us; 408us; 314us; 408us; 325us; 408us; 326us; 408us; 327us; 408us; 328us; 408us; 340us; 408us; 350us; 408us; 353us; 408us; 355us; 408us; 357us; 408us; 359us; 408us; 361us; 408us; 364us; 408us; 378us; 408us; 379us; 408us; 380us; 408us; 381us; 408us; 382us; 408us; 383us; 408us; 384us; 408us; 385us; 408us; 386us; 408us; 387us; 408us; 388us; 408us; 389us; 408us; 409us; 408us; 411us; 408us; 413us; 408us; 415us; 408us; 419us; 408us; 433us; 408us; 436us; 408us; 439us; 408us; 448us; 408us; 453us; 408us; 49us; 65535us; 23us; 421us; 25us; 421us; 61us; 421us; 62us; 421us; 63us; 421us; 69us; 421us; 95us; 421us; 127us; 421us; 134us; 421us; 200us; 421us; 267us; 421us; 271us; 421us; 274us; 421us; 278us; 421us; 314us; 421us; 325us; 421us; 326us; 421us; 327us; 421us; 328us; 421us; 340us; 421us; 350us; 421us; 353us; 421us; 355us; 421us; 357us; 421us; 359us; 421us; 361us; 421us; 364us; 421us; 378us; 421us; 379us; 421us; 380us; 421us; 381us; 421us; 382us; 421us; 383us; 421us; 384us; 421us; 385us; 421us; 386us; 421us; 387us; 421us; 388us; 421us; 389us; 421us; 409us; 421us; 411us; 421us; 413us; 421us; 415us; 421us; 419us; 421us; 433us; 421us; 436us; 421us; 439us; 421us; 448us; 421us; 453us; 421us; 4us; 65535us; 202us; 203us; 219us; 220us; 223us; 224us; 241us; 242us; 49us; 65535us; 23us; 422us; 25us; 422us; 61us; 422us; 62us; 422us; 63us; 422us; 69us; 422us; 95us; 422us; 127us; 422us; 134us; 422us; 200us; 422us; 267us; 422us; 271us; 422us; 274us; 422us; 278us; 422us; 314us; 422us; 325us; 422us; 326us; 422us; 327us; 422us; 328us; 422us; 340us; 422us; 350us; 422us; 353us; 422us; 355us; 422us; 357us; 422us; 359us; 422us; 361us; 422us; 364us; 422us; 378us; 422us; 379us; 422us; 380us; 422us; 381us; 422us; 382us; 422us; 383us; 422us; 384us; 422us; 385us; 422us; 386us; 422us; 387us; 422us; 388us; 422us; 389us; 422us; 409us; 422us; 411us; 422us; 413us; 422us; 415us; 422us; 419us; 422us; 433us; 422us; 436us; 422us; 439us; 422us; 448us; 422us; 453us; 422us; 49us; 65535us; 23us; 405us; 25us; 405us; 61us; 405us; 62us; 405us; 63us; 405us; 69us; 405us; 95us; 405us; 127us; 405us; 134us; 405us; 200us; 405us; 267us; 405us; 271us; 405us; 274us; 405us; 278us; 405us; 314us; 405us; 325us; 405us; 326us; 405us; 327us; 405us; 328us; 405us; 340us; 405us; 350us; 405us; 353us; 405us; 355us; 405us; 357us; 405us; 359us; 405us; 361us; 405us; 364us; 405us; 378us; 405us; 379us; 405us; 380us; 405us; 381us; 405us; 382us; 405us; 383us; 405us; 384us; 405us; 385us; 405us; 386us; 405us; 387us; 405us; 388us; 405us; 389us; 405us; 409us; 405us; 411us; 405us; 413us; 405us; 415us; 405us; 419us; 405us; 433us; 405us; 436us; 405us; 439us; 405us; 448us; 405us; 453us; 405us; 49us; 65535us; 23us; 406us; 25us; 406us; 61us; 406us; 62us; 406us; 63us; 406us; 69us; 406us; 95us; 406us; 127us; 406us; 134us; 406us; 200us; 406us; 267us; 406us; 271us; 406us; 274us; 406us; 278us; 406us; 314us; 406us; 325us; 406us; 326us; 406us; 327us; 406us; 328us; 406us; 340us; 406us; 350us; 406us; 353us; 406us; 355us; 406us; 357us; 406us; 359us; 406us; 361us; 406us; 364us; 406us; 378us; 406us; 379us; 406us; 380us; 406us; 381us; 406us; 382us; 406us; 383us; 406us; 384us; 406us; 385us; 406us; 386us; 406us; 387us; 406us; 388us; 406us; 389us; 406us; 409us; 406us; 411us; 406us; 413us; 406us; 415us; 406us; 419us; 406us; 433us; 406us; 436us; 406us; 439us; 406us; 448us; 406us; 453us; 406us; 49us; 65535us; 23us; 407us; 25us; 407us; 61us; 407us; 62us; 407us; 63us; 407us; 69us; 407us; 95us; 407us; 127us; 407us; 134us; 407us; 200us; 407us; 267us; 407us; 271us; 407us; 274us; 407us; 278us; 407us; 314us; 407us; 325us; 407us; 326us; 407us; 327us; 407us; 328us; 407us; 340us; 407us; 350us; 407us; 353us; 407us; 355us; 407us; 357us; 407us; 359us; 407us; 361us; 407us; 364us; 407us; 378us; 407us; 379us; 407us; 380us; 407us; 381us; 407us; 382us; 407us; 383us; 407us; 384us; 407us; 385us; 407us; 386us; 407us; 387us; 407us; 388us; 407us; 389us; 407us; 409us; 407us; 411us; 407us; 413us; 407us; 415us; 407us; 419us; 407us; 433us; 407us; 436us; 407us; 439us; 407us; 448us; 407us; 453us; 407us; 1us; 65535us; 448us; 449us; 1us; 65535us; 439us; 440us; 1us; 65535us; 439us; 451us; 2us; 65535us; 439us; 452us; 453us; 454us; 49us; 65535us; 23us; 438us; 25us; 438us; 61us; 438us; 62us; 438us; 63us; 438us; 69us; 438us; 95us; 438us; 127us; 438us; 134us; 438us; 200us; 438us; 267us; 438us; 271us; 438us; 274us; 438us; 278us; 438us; 314us; 438us; 325us; 438us; 326us; 438us; 327us; 438us; 328us; 438us; 340us; 438us; 350us; 438us; 353us; 438us; 355us; 438us; 357us; 438us; 359us; 438us; 361us; 438us; 364us; 438us; 378us; 438us; 379us; 438us; 380us; 438us; 381us; 438us; 382us; 438us; 383us; 438us; 384us; 438us; 385us; 438us; 386us; 438us; 387us; 438us; 388us; 438us; 389us; 438us; 409us; 438us; 411us; 438us; 413us; 438us; 415us; 438us; 419us; 438us; 433us; 438us; 436us; 438us; 439us; 438us; 448us; 438us; 453us; 438us; 81us; 65535us; 23us; 442us; 25us; 442us; 34us; 41us; 37us; 41us; 39us; 41us; 60us; 462us; 61us; 442us; 62us; 442us; 63us; 442us; 69us; 443us; 95us; 443us; 100us; 105us; 102us; 103us; 111us; 462us; 117us; 462us; 118us; 462us; 126us; 462us; 127us; 442us; 130us; 298us; 133us; 462us; 134us; 442us; 137us; 298us; 140us; 462us; 167us; 298us; 193us; 196us; 197us; 198us; 200us; 442us; 208us; 214us; 212us; 214us; 254us; 292us; 260us; 292us; 267us; 442us; 271us; 442us; 274us; 442us; 278us; 442us; 280us; 288us; 283us; 288us; 295us; 292us; 299us; 300us; 303us; 304us; 314us; 442us; 324us; 105us; 325us; 442us; 326us; 442us; 327us; 442us; 328us; 442us; 340us; 442us; 350us; 442us; 353us; 442us; 355us; 442us; 357us; 442us; 359us; 442us; 361us; 442us; 364us; 442us; 378us; 442us; 379us; 442us; 380us; 442us; 381us; 442us; 382us; 442us; 383us; 442us; 384us; 442us; 385us; 442us; 386us; 442us; 387us; 442us; 388us; 442us; 389us; 442us; 409us; 442us; 411us; 442us; 413us; 442us; 415us; 442us; 419us; 442us; 433us; 442us; 436us; 442us; 439us; 442us; 444us; 446us; 445us; 447us; 448us; 442us; 453us; 442us; 459us; 461us; 460us; 461us; 463us; 464us; 49us; 65535us; 23us; 404us; 25us; 404us; 61us; 404us; 62us; 404us; 63us; 404us; 69us; 404us; 95us; 404us; 127us; 404us; 134us; 404us; 200us; 404us; 267us; 404us; 271us; 404us; 274us; 404us; 278us; 404us; 314us; 404us; 325us; 404us; 326us; 404us; 327us; 404us; 328us; 404us; 340us; 404us; 350us; 404us; 353us; 404us; 355us; 404us; 357us; 404us; 359us; 404us; 361us; 404us; 364us; 404us; 378us; 404us; 379us; 404us; 380us; 404us; 381us; 404us; 382us; 404us; 383us; 404us; 384us; 404us; 385us; 404us; 386us; 404us; 387us; 404us; 388us; 404us; 389us; 404us; 409us; 404us; 411us; 404us; 413us; 404us; 415us; 404us; 419us; 404us; 433us; 404us; 436us; 404us; 439us; 404us; 448us; 404us; 453us; 404us; 0us; 65535us; 49us; 65535us; 23us; 458us; 25us; 458us; 61us; 458us; 62us; 458us; 63us; 458us; 69us; 458us; 95us; 458us; 127us; 458us; 134us; 458us; 200us; 458us; 267us; 458us; 271us; 458us; 274us; 458us; 278us; 458us; 314us; 458us; 325us; 458us; 326us; 458us; 327us; 458us; 328us; 458us; 340us; 458us; 350us; 458us; 353us; 458us; 355us; 458us; 357us; 458us; 359us; 458us; 361us; 458us; 364us; 458us; 378us; 458us; 379us; 458us; 380us; 458us; 381us; 458us; 382us; 458us; 383us; 458us; 384us; 458us; 385us; 458us; 386us; 458us; 387us; 458us; 388us; 458us; 389us; 458us; 409us; 458us; 411us; 458us; 413us; 458us; 415us; 458us; 419us; 458us; 433us; 458us; 436us; 458us; 439us; 458us; 448us; 458us; 453us; 458us; 7us; 65535us; 60us; 184us; 111us; 184us; 117us; 184us; 118us; 184us; 126us; 184us; 133us; 184us; 140us; 184us; 0us; 65535us; 0us; 65535us; 2us; 65535us; 69us; 99us; 95us; 99us; |]
let _fsyacc_sparseGotoTableRowOffsets = [|0us; 1us; 3us; 6us; 8us; 11us; 14us; 17us; 67us; 77us; 136us; 144us; 146us; 148us; 150us; 153us; 155us; 157us; 159us; 161us; 163us; 167us; 168us; 170us; 172us; 175us; 183us; 186us; 250us; 260us; 270us; 272us; 274us; 277us; 280us; 282us; 285us; 288us; 290us; 292us; 295us; 298us; 300us; 303us; 310us; 317us; 323us; 329us; 335us; 337us; 342us; 344us; 346us; 354us; 362us; 370us; 378us; 386us; 394us; 396us; 398us; 406us; 409us; 411us; 414us; 416us; 418us; 421us; 424us; 428us; 431us; 434us; 437us; 439us; 441us; 444us; 447us; 449us; 452us; 454us; 456us; 459us; 462us; 464us; 467us; 470us; 472us; 474us; 478us; 481us; 485us; 489us; 493us; 497us; 498us; 501us; 502us; 503us; 504us; 506us; 512us; 540us; 568us; 599us; 645us; 666us; 687us; 690us; 692us; 693us; 743us; 793us; 843us; 848us; 898us; 948us; 998us; 1048us; 1050us; 1052us; 1054us; 1057us; 1107us; 1189us; 1239us; 1240us; 1290us; 1298us; 1299us; 1300us; |]
let _fsyacc_stateToProdIdxsTableElements = [| 1us; 0us; 1us; 0us; 1us; 1us; 1us; 2us; 2us; 3us; 4us; 1us; 3us; 1us; 3us; 1us; 4us; 1us; 6us; 1us; 7us; 1us; 8us; 1us; 9us; 3us; 10us; 42us; 44us; 1us; 11us; 1us; 12us; 1us; 13us; 4us; 13us; 42us; 44us; 48us; 3us; 14us; 41us; 43us; 1us; 14us; 1us; 14us; 1us; 14us; 1us; 16us; 1us; 17us; 1us; 17us; 2us; 17us; 18us; 1us; 18us; 1us; 18us; 1us; 19us; 4us; 20us; 206us; 207us; 208us; 1us; 20us; 1us; 22us; 1us; 23us; 1us; 24us; 1us; 26us; 1us; 27us; 1us; 27us; 3us; 28us; 29us; 30us; 1us; 29us; 1us; 29us; 1us; 30us; 1us; 30us; 1us; 31us; 1us; 32us; 2us; 36us; 37us; 1us; 37us; 1us; 38us; 1us; 39us; 1us; 40us; 2us; 41us; 43us; 2us; 41us; 43us; 1us; 41us; 3us; 42us; 44us; 48us; 2us; 42us; 44us; 2us; 42us; 44us; 1us; 42us; 1us; 43us; 1us; 44us; 1us; 46us; 1us; 47us; 2us; 48us; 49us; 8us; 48us; 49us; 116us; 117us; 118us; 119us; 121us; 122us; 4us; 48us; 49us; 223us; 224us; 4us; 48us; 49us; 225us; 226us; 4us; 48us; 49us; 269us; 270us; 1us; 48us; 1us; 49us; 1us; 49us; 1us; 50us; 2us; 51us; 52us; 2us; 51us; 52us; 3us; 51us; 52us; 67us; 1us; 51us; 1us; 51us; 1us; 51us; 1us; 51us; 1us; 51us; 1us; 51us; 1us; 52us; 1us; 52us; 1us; 52us; 1us; 52us; 1us; 52us; 2us; 54us; 55us; 1us; 55us; 1us; 56us; 1us; 57us; 1us; 58us; 1us; 59us; 1us; 60us; 1us; 61us; 1us; 62us; 1us; 63us; 1us; 64us; 1us; 65us; 1us; 66us; 1us; 67us; 1us; 67us; 1us; 68us; 1us; 69us; 1us; 70us; 4us; 71us; 206us; 207us; 208us; 1us; 71us; 2us; 73us; 74us; 1us; 73us; 1us; 74us; 1us; 75us; 1us; 76us; 1us; 77us; 1us; 77us; 1us; 78us; 1us; 80us; 1us; 81us; 1us; 81us; 1us; 82us; 2us; 83us; 85us; 7us; 84us; 88us; 89us; 90us; 91us; 92us; 93us; 2us; 85us; 117us; 1us; 85us; 2us; 85us; 117us; 7us; 85us; 88us; 89us; 90us; 91us; 92us; 93us; 8us; 85us; 88us; 89us; 90us; 91us; 92us; 93us; 117us; 1us; 86us; 1us; 87us; 2us; 87us; 122us; 9us; 88us; 88us; 89us; 89us; 90us; 91us; 92us; 92us; 93us; 8us; 88us; 89us; 90us; 90us; 91us; 91us; 92us; 93us; 3us; 88us; 89us; 92us; 1us; 88us; 4us; 88us; 206us; 207us; 208us; 1us; 89us; 1us; 89us; 1us; 89us; 1us; 89us; 2us; 90us; 91us; 1us; 90us; 4us; 90us; 206us; 207us; 208us; 1us; 91us; 1us; 91us; 1us; 91us; 1us; 91us; 1us; 93us; 1us; 93us; 3us; 94us; 95us; 96us; 1us; 94us; 1us; 94us; 1us; 95us; 1us; 95us; 1us; 95us; 1us; 96us; 1us; 96us; 1us; 96us; 1us; 97us; 1us; 98us; 1us; 98us; 1us; 99us; 1us; 99us; 1us; 100us; 1us; 101us; 1us; 101us; 1us; 101us; 1us; 102us; 1us; 102us; 1us; 102us; 1us; 104us; 1us; 106us; 1us; 108us; 1us; 109us; 1us; 109us; 1us; 109us; 1us; 109us; 1us; 110us; 2us; 110us; 119us; 1us; 111us; 2us; 111us; 118us; 1us; 112us; 1us; 113us; 2us; 113us; 121us; 1us; 114us; 2us; 114us; 116us; 1us; 115us; 1us; 116us; 1us; 117us; 1us; 118us; 1us; 119us; 1us; 120us; 1us; 120us; 1us; 120us; 1us; 120us; 1us; 121us; 1us; 122us; 1us; 123us; 1us; 123us; 1us; 123us; 1us; 125us; 2us; 125us; 127us; 1us; 125us; 1us; 126us; 1us; 127us; 1us; 127us; 1us; 128us; 1us; 128us; 4us; 128us; 206us; 207us; 208us; 1us; 128us; 1us; 128us; 1us; 128us; 1us; 128us; 1us; 128us; 1us; 129us; 1us; 129us; 2us; 129us; 131us; 1us; 129us; 1us; 130us; 1us; 131us; 1us; 131us; 2us; 132us; 133us; 1us; 132us; 1us; 132us; 1us; 133us; 1us; 133us; 1us; 133us; 1us; 133us; 1us; 133us; 1us; 134us; 1us; 134us; 1us; 134us; 1us; 134us; 1us; 136us; 2us; 138us; 140us; 2us; 139us; 141us; 1us; 140us; 1us; 141us; 1us; 142us; 2us; 142us; 143us; 1us; 142us; 2us; 142us; 143us; 1us; 142us; 1us; 143us; 1us; 143us; 1us; 143us; 1us; 144us; 1us; 145us; 1us; 146us; 1us; 146us; 3us; 148us; 149us; 150us; 1us; 148us; 1us; 149us; 1us; 149us; 1us; 150us; 1us; 150us; 1us; 151us; 1us; 152us; 1us; 153us; 1us; 153us; 1us; 153us; 1us; 153us; 2us; 153us; 183us; 1us; 153us; 1us; 154us; 1us; 154us; 1us; 154us; 1us; 154us; 1us; 154us; 1us; 154us; 1us; 155us; 2us; 156us; 158us; 1us; 156us; 1us; 159us; 1us; 161us; 4us; 161us; 206us; 207us; 208us; 1us; 162us; 1us; 164us; 1us; 164us; 2us; 164us; 165us; 1us; 164us; 1us; 165us; 4us; 165us; 206us; 207us; 208us; 4us; 166us; 206us; 207us; 208us; 1us; 168us; 1us; 170us; 4us; 170us; 206us; 207us; 208us; 1us; 172us; 2us; 172us; 174us; 1us; 173us; 1us; 174us; 1us; 174us; 1us; 175us; 1us; 175us; 1us; 175us; 1us; 176us; 1us; 177us; 1us; 177us; 2us; 179us; 183us; 1us; 180us; 1us; 181us; 1us; 182us; 1us; 183us; 1us; 183us; 2us; 184us; 186us; 1us; 185us; 1us; 186us; 1us; 186us; 1us; 188us; 1us; 189us; 1us; 191us; 1us; 191us; 1us; 194us; 1us; 195us; 1us; 203us; 4us; 204us; 206us; 207us; 208us; 2us; 205us; 224us; 2us; 205us; 226us; 2us; 205us; 270us; 2us; 205us; 282us; 2us; 205us; 287us; 1us; 205us; 4us; 205us; 206us; 207us; 208us; 4us; 206us; 206us; 207us; 208us; 4us; 206us; 207us; 207us; 208us; 4us; 206us; 207us; 208us; 208us; 4us; 206us; 207us; 208us; 209us; 5us; 206us; 207us; 208us; 223us; 224us; 5us; 206us; 207us; 208us; 225us; 226us; 5us; 206us; 207us; 208us; 269us; 270us; 4us; 206us; 207us; 208us; 283us; 4us; 206us; 207us; 208us; 292us; 1us; 206us; 1us; 207us; 1us; 208us; 1us; 209us; 10us; 210us; 211us; 212us; 213us; 214us; 215us; 216us; 217us; 218us; 219us; 8us; 210us; 211us; 212us; 213us; 214us; 215us; 217us; 218us; 1us; 210us; 4us; 211us; 213us; 215us; 218us; 1us; 211us; 1us; 212us; 1us; 213us; 1us; 214us; 1us; 215us; 1us; 217us; 1us; 218us; 1us; 219us; 1us; 219us; 1us; 220us; 22us; 221us; 222us; 223us; 224us; 225us; 226us; 227us; 228us; 229us; 230us; 231us; 232us; 233us; 234us; 235us; 236us; 237us; 238us; 239us; 240us; 241us; 242us; 3us; 221us; 223us; 224us; 1us; 221us; 4us; 222us; 225us; 226us; 228us; 3us; 222us; 225us; 226us; 1us; 222us; 1us; 223us; 1us; 224us; 1us; 224us; 1us; 225us; 1us; 226us; 1us; 226us; 1us; 227us; 13us; 227us; 231us; 232us; 233us; 234us; 235us; 236us; 237us; 238us; 239us; 240us; 241us; 242us; 1us; 227us; 1us; 227us; 1us; 228us; 13us; 228us; 231us; 232us; 233us; 234us; 235us; 236us; 237us; 238us; 239us; 240us; 241us; 242us; 1us; 228us; 1us; 228us; 1us; 229us; 1us; 229us; 13us; 229us; 231us; 232us; 233us; 234us; 235us; 236us; 237us; 238us; 239us; 240us; 241us; 242us; 13us; 231us; 231us; 232us; 233us; 234us; 235us; 236us; 237us; 238us; 239us; 240us; 241us; 242us; 13us; 231us; 232us; 232us; 233us; 234us; 235us; 236us; 237us; 238us; 239us; 240us; 241us; 242us; 13us; 231us; 232us; 233us; 233us; 234us; 235us; 236us; 237us; 238us; 239us; 240us; 241us; 242us; 13us; 231us; 232us; 233us; 234us; 234us; 235us; 236us; 237us; 238us; 239us; 240us; 241us; 242us; 13us; 231us; 232us; 233us; 234us; 235us; 235us; 236us; 237us; 238us; 239us; 240us; 241us; 242us; 13us; 231us; 232us; 233us; 234us; 235us; 236us; 236us; 237us; 238us; 239us; 240us; 241us; 242us; 13us; 231us; 232us; 233us; 234us; 235us; 236us; 237us; 237us; 238us; 239us; 240us; 241us; 242us; 13us; 231us; 232us; 233us; 234us; 235us; 236us; 237us; 238us; 238us; 239us; 240us; 241us; 242us; 13us; 231us; 232us; 233us; 234us; 235us; 236us; 237us; 238us; 239us; 239us; 240us; 241us; 242us; 13us; 231us; 232us; 233us; 234us; 235us; 236us; 237us; 238us; 239us; 240us; 240us; 241us; 242us; 13us; 231us; 232us; 233us; 234us; 235us; 236us; 237us; 238us; 239us; 240us; 241us; 241us; 242us; 13us; 231us; 232us; 233us; 234us; 235us; 236us; 237us; 238us; 239us; 240us; 241us; 242us; 242us; 1us; 231us; 1us; 232us; 1us; 233us; 1us; 234us; 1us; 235us; 1us; 236us; 1us; 237us; 1us; 238us; 1us; 239us; 1us; 240us; 1us; 241us; 1us; 242us; 1us; 243us; 1us; 244us; 1us; 245us; 1us; 246us; 1us; 247us; 1us; 248us; 1us; 249us; 1us; 250us; 1us; 251us; 1us; 252us; 1us; 253us; 1us; 254us; 1us; 255us; 1us; 256us; 1us; 259us; 1us; 260us; 1us; 261us; 1us; 262us; 1us; 263us; 1us; 264us; 1us; 264us; 1us; 265us; 1us; 265us; 1us; 266us; 1us; 266us; 1us; 267us; 1us; 267us; 1us; 268us; 1us; 269us; 1us; 270us; 1us; 270us; 1us; 271us; 1us; 272us; 1us; 273us; 1us; 274us; 1us; 275us; 1us; 276us; 1us; 277us; 2us; 278us; 294us; 1us; 279us; 1us; 280us; 1us; 281us; 1us; 282us; 1us; 282us; 1us; 282us; 1us; 283us; 1us; 283us; 1us; 283us; 1us; 284us; 1us; 284us; 1us; 284us; 1us; 284us; 4us; 285us; 296us; 300us; 301us; 6us; 285us; 296us; 300us; 301us; 308us; 309us; 3us; 285us; 300us; 301us; 5us; 285us; 300us; 301us; 308us; 309us; 3us; 285us; 300us; 301us; 4us; 285us; 300us; 301us; 309us; 1us; 285us; 1us; 285us; 1us; 285us; 2us; 289us; 291us; 1us; 290us; 1us; 291us; 1us; 291us; 1us; 292us; 2us; 293us; 295us; 1us; 295us; 1us; 297us; 1us; 301us; 2us; 301us; 309us; 1us; 301us; 2us; 302us; 303us; 1us; 303us; 1us; 303us; 1us; 308us; 1us; 309us; |]
let _fsyacc_stateToProdIdxsTableRowOffsets = [|0us; 2us; 4us; 6us; 8us; 11us; 13us; 15us; 17us; 19us; 21us; 23us; 25us; 29us; 31us; 33us; 35us; 40us; 44us; 46us; 48us; 50us; 52us; 54us; 56us; 59us; 61us; 63us; 65us; 70us; 72us; 74us; 76us; 78us; 80us; 82us; 84us; 88us; 90us; 92us; 94us; 96us; 98us; 100us; 103us; 105us; 107us; 109us; 111us; 114us; 117us; 119us; 123us; 126us; 129us; 131us; 133us; 135us; 137us; 139us; 142us; 151us; 156us; 161us; 166us; 168us; 170us; 172us; 174us; 177us; 180us; 184us; 186us; 188us; 190us; 192us; 194us; 196us; 198us; 200us; 202us; 204us; 206us; 209us; 211us; 213us; 215us; 217us; 219us; 221us; 223us; 225us; 227us; 229us; 231us; 233us; 235us; 237us; 239us; 241us; 243us; 248us; 250us; 253us; 255us; 257us; 259us; 261us; 263us; 265us; 267us; 269us; 271us; 273us; 275us; 278us; 286us; 289us; 291us; 294us; 302us; 311us; 313us; 315us; 318us; 328us; 337us; 341us; 343us; 348us; 350us; 352us; 354us; 356us; 359us; 361us; 366us; 368us; 370us; 372us; 374us; 376us; 378us; 382us; 384us; 386us; 388us; 390us; 392us; 394us; 396us; 398us; 400us; 402us; 404us; 406us; 408us; 410us; 412us; 414us; 416us; 418us; 420us; 422us; 424us; 426us; 428us; 430us; 432us; 434us; 436us; 438us; 441us; 443us; 446us; 448us; 450us; 453us; 455us; 458us; 460us; 462us; 464us; 466us; 468us; 470us; 472us; 474us; 476us; 478us; 480us; 482us; 484us; 486us; 488us; 491us; 493us; 495us; 497us; 499us; 501us; 503us; 508us; 510us; 512us; 514us; 516us; 518us; 520us; 522us; 525us; 527us; 529us; 531us; 533us; 536us; 538us; 540us; 542us; 544us; 546us; 548us; 550us; 552us; 554us; 556us; 558us; 560us; 563us; 566us; 568us; 570us; 572us; 575us; 577us; 580us; 582us; 584us; 586us; 588us; 590us; 592us; 594us; 596us; 600us; 602us; 604us; 606us; 608us; 610us; 612us; 614us; 616us; 618us; 620us; 622us; 625us; 627us; 629us; 631us; 633us; 635us; 637us; 639us; 641us; 644us; 646us; 648us; 650us; 655us; 657us; 659us; 661us; 664us; 666us; 668us; 673us; 678us; 680us; 682us; 687us; 689us; 692us; 694us; 696us; 698us; 700us; 702us; 704us; 706us; 708us; 710us; 713us; 715us; 717us; 719us; 721us; 723us; 726us; 728us; 730us; 732us; 734us; 736us; 738us; 740us; 742us; 744us; 746us; 751us; 754us; 757us; 760us; 763us; 766us; 768us; 773us; 778us; 783us; 788us; 793us; 799us; 805us; 811us; 816us; 821us; 823us; 825us; 827us; 829us; 840us; 849us; 851us; 856us; 858us; 860us; 862us; 864us; 866us; 868us; 870us; 872us; 874us; 876us; 899us; 903us; 905us; 910us; 914us; 916us; 918us; 920us; 922us; 924us; 926us; 928us; 930us; 944us; 946us; 948us; 950us; 964us; 966us; 968us; 970us; 972us; 986us; 1000us; 1014us; 1028us; 1042us; 1056us; 1070us; 1084us; 1098us; 1112us; 1126us; 1140us; 1154us; 1156us; 1158us; 1160us; 1162us; 1164us; 1166us; 1168us; 1170us; 1172us; 1174us; 1176us; 1178us; 1180us; 1182us; 1184us; 1186us; 1188us; 1190us; 1192us; 1194us; 1196us; 1198us; 1200us; 1202us; 1204us; 1206us; 1208us; 1210us; 1212us; 1214us; 1216us; 1218us; 1220us; 1222us; 1224us; 1226us; 1228us; 1230us; 1232us; 1234us; 1236us; 1238us; 1240us; 1242us; 1244us; 1246us; 1248us; 1250us; 1252us; 1254us; 1257us; 1259us; 1261us; 1263us; 1265us; 1267us; 1269us; 1271us; 1273us; 1275us; 1277us; 1279us; 1281us; 1283us; 1288us; 1295us; 1299us; 1305us; 1309us; 1314us; 1316us; 1318us; 1320us; 1323us; 1325us; 1327us; 1329us; 1331us; 1334us; 1336us; 1338us; 1340us; 1343us; 1345us; 1348us; 1350us; 1352us; 1354us; |]
let _fsyacc_action_rows = 467
let _fsyacc_actionTableElements = [|3us; 32768us; 56us; 68us; 106us; 59us; 112us; 3us; 0us; 49152us; 0us; 16385us; 0us; 16386us; 2us; 32768us; 110us; 5us; 112us; 7us; 3us; 16389us; 56us; 68us; 106us; 59us; 112us; 3us; 0us; 16387us; 0us; 16388us; 0us; 16390us; 0us; 16391us; 0us; 16392us; 0us; 16393us; 1us; 16394us; 105us; 52us; 0us; 16395us; 0us; 16396us; 0us; 16397us; 2us; 16397us; 105us; 52us; 107us; 64us; 2us; 16399us; 39us; 22us; 105us; 48us; 1us; 16409us; 37us; 34us; 1us; 16419us; 41us; 46us; 0us; 16398us; 0us; 16400us; 1us; 32768us; 38us; 23us; 17us; 32768us; 5us; 424us; 6us; 425us; 7us; 423us; 8us; 428us; 9us; 427us; 10us; 426us; 11us; 430us; 12us; 431us; 13us; 456us; 14us; 435us; 19us; 432us; 82us; 328us; 86us; 413us; 88us; 415us; 89us; 409us; 90us; 411us; 106us; 63us; 1us; 16401us; 111us; 25us; 17us; 32768us; 5us; 424us; 6us; 425us; 7us; 423us; 8us; 428us; 9us; 427us; 10us; 426us; 11us; 430us; 12us; 431us; 13us; 456us; 14us; 435us; 19us; 432us; 82us; 328us; 86us; 413us; 88us; 415us; 89us; 409us; 90us; 411us; 106us; 63us; 0us; 16402us; 0us; 16403us; 7us; 16405us; 35us; 32us; 36us; 31us; 64us; 392us; 65us; 394us; 83us; 391us; 84us; 326us; 85us; 393us; 0us; 16404us; 0us; 16406us; 0us; 16407us; 0us; 16408us; 0us; 16410us; 2us; 32768us; 11us; 42us; 13us; 457us; 0us; 16411us; 2us; 16412us; 34us; 39us; 111us; 37us; 2us; 32768us; 11us; 42us; 13us; 457us; 0us; 16413us; 2us; 32768us; 11us; 42us; 13us; 457us; 0us; 16414us; 0us; 16415us; 0us; 16416us; 1us; 16420us; 41us; 46us; 0us; 16421us; 0us; 16422us; 0us; 16423us; 0us; 16424us; 2us; 16429us; 32us; 57us; 53us; 58us; 2us; 32768us; 56us; 68us; 106us; 59us; 0us; 16425us; 2us; 32768us; 105us; 52us; 107us; 64us; 2us; 16429us; 32us; 57us; 53us; 58us; 2us; 32768us; 56us; 68us; 106us; 59us; 0us; 16426us; 0us; 16427us; 0us; 16428us; 0us; 16430us; 0us; 16431us; 2us; 32768us; 56us; 68us; 106us; 59us; 4us; 32768us; 13us; 457us; 56us; 68us; 60us; 199us; 106us; 60us; 18us; 32768us; 5us; 424us; 6us; 425us; 7us; 423us; 8us; 428us; 9us; 427us; 10us; 426us; 11us; 430us; 12us; 431us; 13us; 456us; 14us; 435us; 19us; 432us; 56us; 68us; 82us; 328us; 86us; 413us; 88us; 415us; 89us; 409us; 90us; 411us; 106us; 63us; 18us; 32768us; 5us; 424us; 6us; 425us; 7us; 423us; 8us; 428us; 9us; 427us; 10us; 426us; 11us; 430us; 12us; 431us; 13us; 456us; 14us; 435us; 19us; 432us; 56us; 68us; 82us; 328us; 86us; 413us; 88us; 415us; 89us; 409us; 90us; 411us; 106us; 63us; 18us; 32768us; 5us; 424us; 6us; 425us; 7us; 423us; 8us; 428us; 9us; 427us; 10us; 426us; 11us; 430us; 12us; 431us; 13us; 456us; 14us; 435us; 19us; 432us; 56us; 68us; 82us; 328us; 86us; 413us; 88us; 415us; 89us; 409us; 90us; 411us; 106us; 63us; 0us; 16432us; 1us; 32768us; 107us; 66us; 0us; 16433us; 0us; 16434us; 9us; 16437us; 18us; 86us; 23us; 93us; 24us; 92us; 25us; 91us; 26us; 90us; 27us; 88us; 32us; 89us; 53us; 94us; 98us; 87us; 18us; 32768us; 5us; 424us; 6us; 425us; 7us; 423us; 8us; 428us; 9us; 427us; 10us; 426us; 11us; 430us; 12us; 431us; 13us; 456us; 14us; 435us; 19us; 432us; 82us; 328us; 86us; 413us; 88us; 415us; 89us; 409us; 90us; 411us; 92us; 98us; 106us; 63us; 3us; 16463us; 50us; 111us; 104us; 107us; 111us; 95us; 1us; 16463us; 50us; 111us; 1us; 16544us; 40us; 267us; 1us; 16547us; 58us; 270us; 1us; 16553us; 21us; 278us; 1us; 16555us; 20us; 280us; 0us; 16435us; 1us; 16544us; 40us; 267us; 1us; 16547us; 58us; 270us; 1us; 16553us; 21us; 278us; 1us; 16555us; 20us; 280us; 0us; 16436us; 9us; 16438us; 18us; 86us; 23us; 93us; 24us; 92us; 25us; 91us; 26us; 90us; 27us; 88us; 32us; 89us; 53us; 94us; 98us; 87us; 0us; 16439us; 0us; 16440us; 0us; 16441us; 0us; 16442us; 0us; 16443us; 0us; 16444us; 0us; 16445us; 0us; 16446us; 0us; 16447us; 0us; 16448us; 0us; 16449us; 0us; 16450us; 17us; 32768us; 5us; 424us; 6us; 425us; 7us; 423us; 8us; 428us; 9us; 427us; 10us; 426us; 11us; 430us; 12us; 431us; 13us; 456us; 14us; 435us; 19us; 432us; 82us; 328us; 86us; 413us; 88us; 415us; 89us; 409us; 90us; 411us; 106us; 63us; 0us; 16451us; 0us; 16452us; 0us; 16453us; 0us; 16454us; 8us; 16456us; 8us; 106us; 13us; 457us; 55us; 102us; 64us; 392us; 65us; 394us; 83us; 391us; 84us; 326us; 85us; 393us; 0us; 16455us; 2us; 32768us; 8us; 104us; 13us; 457us; 0us; 16457us; 0us; 16458us; 0us; 16459us; 0us; 16460us; 1us; 32768us; 51us; 109us; 0us; 16461us; 0us; 16462us; 0us; 16464us; 4us; 32768us; 3us; 113us; 13us; 457us; 60us; 199us; 106us; 60us; 0us; 16465us; 0us; 16466us; 1us; 16467us; 111us; 117us; 7us; 16468us; 95us; 151us; 96us; 152us; 97us; 154us; 98us; 156us; 99us; 142us; 100us; 157us; 101us; 160us; 1us; 32768us; 111us; 118us; 3us; 32768us; 13us; 457us; 60us; 199us; 106us; 60us; 3us; 32768us; 13us; 457us; 60us; 199us; 106us; 60us; 7us; 16469us; 95us; 151us; 96us; 152us; 97us; 154us; 98us; 156us; 99us; 142us; 100us; 157us; 101us; 160us; 8us; 16469us; 95us; 151us; 96us; 152us; 97us; 154us; 98us; 156us; 99us; 142us; 100us; 157us; 101us; 160us; 107us; 181us; 0us; 16470us; 0us; 16471us; 1us; 16471us; 107us; 189us; 9us; 16476us; 95us; 151us; 96us; 152us; 97us; 154us; 98us; 156us; 99us; 142us; 100us; 157us; 101us; 160us; 102us; 127us; 103us; 129us; 9us; 32768us; 95us; 151us; 96us; 152us; 97us; 154us; 98us; 156us; 99us; 142us; 100us; 157us; 101us; 160us; 102us; 134us; 103us; 136us; 3us; 32768us; 13us; 457us; 60us; 199us; 106us; 60us; 17us; 32768us; 5us; 424us; 6us; 425us; 7us; 423us; 8us; 428us; 9us; 427us; 10us; 426us; 11us; 430us; 12us; 431us; 13us; 456us; 14us; 435us; 19us; 432us; 82us; 328us; 86us; 413us; 88us; 415us; 89us; 409us; 90us; 411us; 106us; 63us; 5us; 16472us; 64us; 392us; 65us; 394us; 83us; 391us; 84us; 326us; 85us; 393us; 1us; 32768us; 106us; 130us; 1us; 32768us; 13us; 457us; 1us; 32768us; 107us; 132us; 0us; 16473us; 3us; 32768us; 13us; 457us; 60us; 199us; 106us; 60us; 17us; 32768us; 5us; 424us; 6us; 425us; 7us; 423us; 8us; 428us; 9us; 427us; 10us; 426us; 11us; 430us; 12us; 431us; 13us; 456us; 14us; 435us; 19us; 432us; 82us; 328us; 86us; 413us; 88us; 415us; 89us; 409us; 90us; 411us; 106us; 63us; 5us; 16474us; 64us; 392us; 65us; 394us; 83us; 391us; 84us; 326us; 85us; 393us; 1us; 32768us; 106us; 137us; 1us; 32768us; 13us; 457us; 1us; 32768us; 107us; 139us; 0us; 16475us; 3us; 32768us; 13us; 457us; 60us; 199us; 106us; 60us; 0us; 16477us; 3us; 16487us; 96us; 163us; 100us; 148us; 101us; 145us; 1us; 32768us; 95us; 144us; 0us; 16478us; 1us; 16489us; 59us; 164us; 1us; 32768us; 95us; 147us; 0us; 16479us; 1us; 16489us; 59us; 164us; 1us; 32768us; 95us; 150us; 0us; 16480us; 0us; 16481us; 1us; 32768us; 95us; 153us; 0us; 16482us; 1us; 32768us; 95us; 155us; 0us; 16483us; 0us; 16484us; 1us; 16489us; 59us; 164us; 1us; 32768us; 95us; 159us; 0us; 16485us; 1us; 16489us; 59us; 164us; 1us; 32768us; 95us; 162us; 0us; 16486us; 0us; 16488us; 0us; 16490us; 0us; 16492us; 1us; 32768us; 106us; 167us; 1us; 32768us; 13us; 457us; 1us; 32768us; 107us; 169us; 0us; 16493us; 0us; 16494us; 1us; 16494us; 107us; 183us; 0us; 16495us; 1us; 16495us; 107us; 182us; 0us; 16496us; 0us; 16497us; 1us; 16497us; 107us; 188us; 0us; 16498us; 1us; 16498us; 107us; 180us; 0us; 16499us; 0us; 16500us; 0us; 16501us; 0us; 16502us; 0us; 16503us; 1us; 16491us; 33us; 166us; 26us; 16571us; 20us; 16574us; 21us; 16574us; 29us; 16574us; 37us; 16574us; 39us; 16574us; 40us; 16574us; 41us; 16574us; 48us; 16574us; 49us; 16574us; 57us; 301us; 58us; 16574us; 74us; 302us; 95us; 16574us; 96us; 16574us; 97us; 16574us; 98us; 16574us; 99us; 16574us; 100us; 16574us; 101us; 16574us; 102us; 16574us; 103us; 16574us; 105us; 16574us; 107us; 16574us; 110us; 16574us; 111us; 16574us; 112us; 16574us; 3us; 16541us; 29us; 257us; 48us; 250us; 49us; 249us; 0us; 16504us; 0us; 16505us; 0us; 16506us; 24us; 16571us; 20us; 16574us; 21us; 16574us; 37us; 16574us; 39us; 16574us; 40us; 16574us; 41us; 16574us; 57us; 301us; 58us; 16574us; 74us; 302us; 95us; 16574us; 96us; 16574us; 97us; 16574us; 98us; 16574us; 99us; 16574us; 100us; 16574us; 101us; 16574us; 102us; 16574us; 103us; 16574us; 105us; 16574us; 106us; 16574us; 107us; 16574us; 110us; 16574us; 111us; 16574us; 112us; 16574us; 1us; 16508us; 106us; 193us; 0us; 16507us; 1us; 32768us; 13us; 457us; 2us; 32768us; 107us; 195us; 111us; 197us; 0us; 16509us; 0us; 16510us; 1us; 32768us; 13us; 457us; 0us; 16511us; 1us; 32768us; 106us; 200us; 17us; 32768us; 5us; 424us; 6us; 425us; 7us; 423us; 8us; 428us; 9us; 427us; 10us; 426us; 11us; 430us; 12us; 431us; 13us; 456us; 14us; 435us; 19us; 432us; 82us; 328us; 86us; 413us; 88us; 415us; 89us; 409us; 90us; 411us; 106us; 63us; 6us; 32768us; 64us; 392us; 65us; 394us; 83us; 391us; 84us; 326us; 85us; 393us; 111us; 202us; 1us; 32768us; 8us; 429us; 1us; 32768us; 42us; 207us; 1us; 32768us; 107us; 205us; 23us; 16571us; 20us; 16574us; 21us; 16574us; 37us; 16574us; 39us; 16574us; 40us; 16574us; 41us; 16574us; 57us; 301us; 58us; 16574us; 74us; 302us; 95us; 16574us; 96us; 16574us; 97us; 16574us; 98us; 16574us; 99us; 16574us; 100us; 16574us; 101us; 16574us; 102us; 16574us; 103us; 16574us; 105us; 16574us; 107us; 16574us; 110us; 16574us; 111us; 16574us; 112us; 16574us; 0us; 16512us; 1us; 32768us; 106us; 208us; 2us; 32768us; 13us; 457us; 15us; 222us; 2us; 32768us; 107us; 210us; 111us; 212us; 0us; 16513us; 0us; 16514us; 2us; 32768us; 13us; 457us; 15us; 222us; 0us; 16515us; 2us; 32768us; 2us; 307us; 41us; 215us; 1us; 32768us; 17us; 216us; 0us; 16516us; 1us; 16519us; 31us; 226us; 1us; 32768us; 16us; 219us; 1us; 32768us; 8us; 429us; 3us; 16521us; 0us; 239us; 7us; 240us; 30us; 241us; 0us; 16517us; 1us; 32768us; 16us; 223us; 1us; 32768us; 8us; 429us; 1us; 32768us; 42us; 207us; 0us; 16518us; 0us; 16520us; 3us; 16522us; 0us; 239us; 7us; 240us; 30us; 241us; 3us; 16523us; 0us; 239us; 7us; 240us; 30us; 241us; 0us; 16524us; 0us; 16525us; 1us; 32768us; 102us; 233us; 1us; 32768us; 102us; 234us; 1us; 32768us; 1us; 235us; 2us; 32768us; 0us; 238us; 1us; 235us; 0us; 16526us; 1us; 32768us; 102us; 237us; 1us; 32768us; 0us; 238us; 0us; 16527us; 0us; 16528us; 0us; 16529us; 1us; 32768us; 8us; 429us; 0us; 16530us; 3us; 32768us; 39us; 245us; 58us; 247us; 95us; 244us; 0us; 16532us; 1us; 32768us; 38us; 246us; 0us; 16533us; 1us; 32768us; 38us; 248us; 0us; 16534us; 0us; 16535us; 0us; 16536us; 2us; 32768us; 45us; 306us; 47us; 305us; 1us; 16531us; 41us; 243us; 1us; 32768us; 106us; 254us; 2us; 32768us; 13us; 457us; 28us; 293us; 2us; 32768us; 107us; 256us; 111us; 295us; 0us; 16537us; 2us; 32768us; 45us; 306us; 47us; 305us; 1us; 16531us; 41us; 243us; 1us; 32768us; 106us; 260us; 2us; 16562us; 13us; 457us; 28us; 293us; 1us; 32768us; 107us; 262us; 0us; 16538us; 0us; 16539us; 3us; 16542us; 29us; 257us; 48us; 250us; 49us; 249us; 0us; 16540us; 0us; 16543us; 17us; 32768us; 5us; 424us; 6us; 425us; 7us; 423us; 8us; 428us; 9us; 427us; 10us; 426us; 11us; 430us; 12us; 431us; 13us; 456us; 14us; 435us; 19us; 432us; 82us; 328us; 86us; 413us; 88us; 415us; 89us; 409us; 90us; 411us; 106us; 63us; 5us; 16545us; 64us; 392us; 65us; 394us; 83us; 391us; 84us; 326us; 85us; 393us; 0us; 16546us; 1us; 32768us; 38us; 271us; 17us; 32768us; 5us; 424us; 6us; 425us; 7us; 423us; 8us; 428us; 9us; 427us; 10us; 426us; 11us; 430us; 12us; 431us; 13us; 456us; 14us; 435us; 19us; 432us; 82us; 328us; 86us; 413us; 88us; 415us; 89us; 409us; 90us; 411us; 106us; 63us; 2us; 16551us; 22us; 277us; 111us; 274us; 0us; 16548us; 17us; 32768us; 5us; 424us; 6us; 425us; 7us; 423us; 8us; 428us; 9us; 427us; 10us; 426us; 11us; 430us; 12us; 431us; 13us; 456us; 14us; 435us; 19us; 432us; 82us; 328us; 86us; 413us; 88us; 415us; 89us; 409us; 90us; 411us; 106us; 63us; 5us; 16549us; 64us; 392us; 65us; 394us; 83us; 391us; 84us; 326us; 85us; 393us; 5us; 16550us; 64us; 392us; 65us; 394us; 83us; 391us; 84us; 326us; 85us; 393us; 0us; 16552us; 17us; 32768us; 5us; 424us; 6us; 425us; 7us; 423us; 8us; 428us; 9us; 427us; 10us; 426us; 11us; 430us; 12us; 431us; 13us; 456us; 14us; 435us; 19us; 432us; 82us; 328us; 86us; 413us; 88us; 415us; 89us; 409us; 90us; 411us; 106us; 63us; 5us; 16554us; 64us; 392us; 65us; 394us; 83us; 391us; 84us; 326us; 85us; 393us; 1us; 32768us; 13us; 457us; 1us; 16556us; 111us; 283us; 0us; 16557us; 1us; 32768us; 13us; 457us; 0us; 16558us; 1us; 32768us; 55us; 286us; 1us; 32768us; 106us; 289us; 0us; 16559us; 0us; 16560us; 1us; 32768us; 107us; 290us; 0us; 16561us; 1us; 16563us; 111us; 295us; 0us; 16564us; 0us; 16565us; 0us; 16566us; 2us; 32768us; 13us; 457us; 28us; 293us; 0us; 16567us; 1us; 16568us; 111us; 299us; 0us; 16569us; 1us; 32768us; 13us; 457us; 0us; 16570us; 0us; 16572us; 0us; 16573us; 1us; 32768us; 13us; 457us; 0us; 16575us; 0us; 16578us; 0us; 16579us; 0us; 16587us; 5us; 16588us; 64us; 392us; 65us; 394us; 83us; 391us; 84us; 326us; 85us; 393us; 2us; 32768us; 107us; 351us; 111us; 314us; 2us; 32768us; 107us; 354us; 111us; 314us; 2us; 32768us; 107us; 420us; 111us; 314us; 2us; 32768us; 107us; 434us; 111us; 314us; 1us; 16671us; 111us; 314us; 17us; 32768us; 5us; 424us; 6us; 425us; 7us; 423us; 8us; 428us; 9us; 427us; 10us; 426us; 11us; 430us; 12us; 431us; 13us; 456us; 14us; 435us; 19us; 432us; 82us; 328us; 86us; 413us; 88us; 415us; 89us; 409us; 90us; 411us; 106us; 63us; 5us; 16589us; 64us; 392us; 65us; 394us; 83us; 391us; 84us; 326us; 85us; 393us; 3us; 16590us; 65us; 394us; 84us; 326us; 85us; 393us; 2us; 16591us; 65us; 394us; 85us; 393us; 0us; 16592us; 0us; 16593us; 7us; 32768us; 64us; 392us; 65us; 394us; 83us; 391us; 84us; 326us; 85us; 393us; 107us; 349us; 111us; 350us; 7us; 32768us; 64us; 392us; 65us; 394us; 83us; 391us; 84us; 326us; 85us; 393us; 107us; 352us; 111us; 353us; 7us; 32768us; 64us; 392us; 65us; 394us; 83us; 391us; 84us; 326us; 85us; 393us; 107us; 418us; 111us; 419us; 6us; 32768us; 64us; 392us; 65us; 394us; 83us; 391us; 84us; 326us; 85us; 393us; 107us; 437us; 8us; 16456us; 8us; 106us; 13us; 457us; 55us; 102us; 64us; 392us; 65us; 394us; 83us; 391us; 84us; 326us; 85us; 393us; 17us; 32768us; 5us; 424us; 6us; 425us; 7us; 423us; 8us; 428us; 9us; 427us; 10us; 426us; 11us; 430us; 12us; 431us; 13us; 456us; 14us; 435us; 19us; 432us; 82us; 328us; 86us; 413us; 88us; 415us; 89us; 409us; 90us; 411us; 106us; 63us; 17us; 32768us; 5us; 424us; 6us; 425us; 7us; 423us; 8us; 428us; 9us; 427us; 10us; 426us; 11us; 430us; 12us; 431us; 13us; 456us; 14us; 435us; 19us; 432us; 82us; 328us; 86us; 413us; 88us; 415us; 89us; 409us; 90us; 411us; 106us; 63us; 17us; 32768us; 5us; 424us; 6us; 425us; 7us; 423us; 8us; 428us; 9us; 427us; 10us; 426us; 11us; 430us; 12us; 431us; 13us; 456us; 14us; 435us; 19us; 432us; 82us; 328us; 86us; 413us; 88us; 415us; 89us; 409us; 90us; 411us; 106us; 63us; 17us; 32768us; 5us; 424us; 6us; 425us; 7us; 423us; 8us; 428us; 9us; 427us; 10us; 426us; 11us; 430us; 12us; 431us; 13us; 456us; 14us; 435us; 19us; 432us; 82us; 328us; 86us; 413us; 88us; 415us; 89us; 409us; 90us; 411us; 106us; 63us; 8us; 16600us; 54us; 330us; 74us; 397us; 75us; 398us; 76us; 403us; 78us; 400us; 79us; 402us; 80us; 399us; 81us; 401us; 6us; 32768us; 4us; 336us; 5us; 334us; 6us; 331us; 7us; 338us; 63us; 396us; 88us; 395us; 0us; 16594us; 4us; 32768us; 4us; 337us; 5us; 335us; 6us; 333us; 7us; 339us; 0us; 16595us; 0us; 16596us; 0us; 16597us; 0us; 16598us; 0us; 16599us; 0us; 16601us; 0us; 16602us; 16us; 32768us; 5us; 424us; 6us; 425us; 7us; 423us; 8us; 428us; 9us; 427us; 10us; 426us; 11us; 430us; 12us; 431us; 13us; 456us; 14us; 435us; 19us; 432us; 86us; 413us; 88us; 415us; 89us; 409us; 90us; 411us; 106us; 63us; 0us; 16603us; 0us; 16604us; 17us; 16614us; 61us; 388us; 62us; 387us; 63us; 396us; 66us; 344us; 67us; 355us; 68us; 363us; 69us; 378us; 70us; 379us; 71us; 389us; 72us; 380us; 73us; 381us; 88us; 395us; 89us; 382us; 90us; 383us; 91us; 385us; 92us; 384us; 93us; 386us; 1us; 32768us; 106us; 61us; 0us; 16605us; 2us; 32768us; 66us; 347us; 67us; 359us; 1us; 32768us; 106us; 62us; 0us; 16606us; 0us; 16607us; 17us; 32768us; 5us; 424us; 6us; 425us; 7us; 423us; 8us; 428us; 9us; 427us; 10us; 426us; 11us; 430us; 12us; 431us; 13us; 456us; 14us; 435us; 19us; 432us; 82us; 328us; 86us; 413us; 88us; 415us; 89us; 409us; 90us; 411us; 106us; 63us; 0us; 16608us; 0us; 16609us; 17us; 32768us; 5us; 424us; 6us; 425us; 7us; 423us; 8us; 428us; 9us; 427us; 10us; 426us; 11us; 430us; 12us; 431us; 13us; 456us; 14us; 435us; 19us; 432us; 82us; 328us; 86us; 413us; 88us; 415us; 89us; 409us; 90us; 411us; 106us; 63us; 0us; 16610us; 16us; 32768us; 5us; 424us; 6us; 425us; 7us; 423us; 8us; 428us; 9us; 427us; 10us; 426us; 11us; 430us; 12us; 431us; 13us; 456us; 14us; 435us; 19us; 432us; 86us; 413us; 88us; 415us; 89us; 409us; 90us; 411us; 106us; 63us; 13us; 32768us; 61us; 388us; 62us; 387us; 69us; 378us; 70us; 379us; 71us; 389us; 72us; 380us; 73us; 381us; 85us; 357us; 89us; 382us; 90us; 383us; 91us; 385us; 92us; 384us; 93us; 386us; 16us; 32768us; 5us; 424us; 6us; 425us; 7us; 423us; 8us; 428us; 9us; 427us; 10us; 426us; 11us; 430us; 12us; 431us; 13us; 456us; 14us; 435us; 19us; 432us; 86us; 413us; 88us; 415us; 89us; 409us; 90us; 411us; 106us; 63us; 0us; 16611us; 16us; 32768us; 5us; 424us; 6us; 425us; 7us; 423us; 8us; 428us; 9us; 427us; 10us; 426us; 11us; 430us; 12us; 431us; 13us; 456us; 14us; 435us; 19us; 432us; 86us; 413us; 88us; 415us; 89us; 409us; 90us; 411us; 106us; 63us; 13us; 32768us; 61us; 388us; 62us; 387us; 69us; 378us; 70us; 379us; 71us; 389us; 72us; 380us; 73us; 381us; 85us; 361us; 89us; 382us; 90us; 383us; 91us; 385us; 92us; 384us; 93us; 386us; 16us; 32768us; 5us; 424us; 6us; 425us; 7us; 423us; 8us; 428us; 9us; 427us; 10us; 426us; 11us; 430us; 12us; 431us; 13us; 456us; 14us; 435us; 19us; 432us; 86us; 413us; 88us; 415us; 89us; 409us; 90us; 411us; 106us; 63us; 0us; 16612us; 1us; 32768us; 87us; 364us; 16us; 32768us; 5us; 424us; 6us; 425us; 7us; 423us; 8us; 428us; 9us; 427us; 10us; 426us; 11us; 430us; 12us; 431us; 13us; 456us; 14us; 435us; 19us; 432us; 86us; 413us; 88us; 415us; 89us; 409us; 90us; 411us; 106us; 63us; 12us; 16613us; 61us; 388us; 62us; 387us; 69us; 378us; 70us; 379us; 71us; 389us; 72us; 380us; 73us; 381us; 89us; 382us; 90us; 383us; 91us; 385us; 92us; 384us; 93us; 386us; 11us; 16615us; 61us; 388us; 62us; 387us; 70us; 379us; 71us; 389us; 72us; 380us; 73us; 381us; 89us; 382us; 90us; 383us; 91us; 385us; 92us; 384us; 93us; 386us; 12us; 16616us; 61us; 388us; 62us; 387us; 69us; 378us; 70us; 379us; 71us; 389us; 72us; 380us; 73us; 381us; 89us; 382us; 90us; 383us; 91us; 385us; 92us; 384us; 93us; 386us; 9us; 16617us; 61us; 388us; 62us; 387us; 70us; 379us; 71us; 389us; 89us; 382us; 90us; 383us; 91us; 385us; 92us; 384us; 93us; 386us; 9us; 16618us; 61us; 388us; 62us; 387us; 70us; 379us; 71us; 389us; 89us; 382us; 90us; 383us; 91us; 385us; 92us; 384us; 93us; 386us; 7us; 16619us; 61us; 388us; 62us; 387us; 70us; 379us; 71us; 389us; 91us; 385us; 92us; 384us; 93us; 386us; 7us; 16620us; 61us; 388us; 62us; 387us; 70us; 379us; 71us; 389us; 91us; 385us; 92us; 384us; 93us; 386us; 2us; 16621us; 70us; 379us; 71us; 389us; 2us; 16622us; 70us; 379us; 71us; 389us; 2us; 16623us; 70us; 379us; 71us; 389us; 2us; 16624us; 70us; 379us; 71us; 389us; 12us; 16625us; 61us; 388us; 62us; 387us; 69us; 378us; 70us; 379us; 71us; 389us; 72us; 380us; 73us; 381us; 89us; 382us; 90us; 383us; 91us; 385us; 92us; 384us; 93us; 386us; 1us; 16626us; 70us; 379us; 16us; 32768us; 5us; 424us; 6us; 425us; 7us; 423us; 8us; 428us; 9us; 427us; 10us; 426us; 11us; 430us; 12us; 431us; 13us; 456us; 14us; 435us; 19us; 432us; 86us; 413us; 88us; 415us; 89us; 409us; 90us; 411us; 106us; 63us; 16us; 32768us; 5us; 424us; 6us; 425us; 7us; 423us; 8us; 428us; 9us; 427us; 10us; 426us; 11us; 430us; 12us; 431us; 13us; 456us; 14us; 435us; 19us; 432us; 86us; 413us; 88us; 415us; 89us; 409us; 90us; 411us; 106us; 63us; 16us; 32768us; 5us; 424us; 6us; 425us; 7us; 423us; 8us; 428us; 9us; 427us; 10us; 426us; 11us; 430us; 12us; 431us; 13us; 456us; 14us; 435us; 19us; 432us; 86us; 413us; 88us; 415us; 89us; 409us; 90us; 411us; 106us; 63us; 16us; 32768us; 5us; 424us; 6us; 425us; 7us; 423us; 8us; 428us; 9us; 427us; 10us; 426us; 11us; 430us; 12us; 431us; 13us; 456us; 14us; 435us; 19us; 432us; 86us; 413us; 88us; 415us; 89us; 409us; 90us; 411us; 106us; 63us; 16us; 32768us; 5us; 424us; 6us; 425us; 7us; 423us; 8us; 428us; 9us; 427us; 10us; 426us; 11us; 430us; 12us; 431us; 13us; 456us; 14us; 435us; 19us; 432us; 86us; 413us; 88us; 415us; 89us; 409us; 90us; 411us; 106us; 63us; 16us; 32768us; 5us; 424us; 6us; 425us; 7us; 423us; 8us; 428us; 9us; 427us; 10us; 426us; 11us; 430us; 12us; 431us; 13us; 456us; 14us; 435us; 19us; 432us; 86us; 413us; 88us; 415us; 89us; 409us; 90us; 411us; 106us; 63us; 16us; 32768us; 5us; 424us; 6us; 425us; 7us; 423us; 8us; 428us; 9us; 427us; 10us; 426us; 11us; 430us; 12us; 431us; 13us; 456us; 14us; 435us; 19us; 432us; 86us; 413us; 88us; 415us; 89us; 409us; 90us; 411us; 106us; 63us; 16us; 32768us; 5us; 424us; 6us; 425us; 7us; 423us; 8us; 428us; 9us; 427us; 10us; 426us; 11us; 430us; 12us; 431us; 13us; 456us; 14us; 435us; 19us; 432us; 86us; 413us; 88us; 415us; 89us; 409us; 90us; 411us; 106us; 63us; 16us; 32768us; 5us; 424us; 6us; 425us; 7us; 423us; 8us; 428us; 9us; 427us; 10us; 426us; 11us; 430us; 12us; 431us; 13us; 456us; 14us; 435us; 19us; 432us; 86us; 413us; 88us; 415us; 89us; 409us; 90us; 411us; 106us; 63us; 16us; 32768us; 5us; 424us; 6us; 425us; 7us; 423us; 8us; 428us; 9us; 427us; 10us; 426us; 11us; 430us; 12us; 431us; 13us; 456us; 14us; 435us; 19us; 432us; 86us; 413us; 88us; 415us; 89us; 409us; 90us; 411us; 106us; 63us; 16us; 32768us; 5us; 424us; 6us; 425us; 7us; 423us; 8us; 428us; 9us; 427us; 10us; 426us; 11us; 430us; 12us; 431us; 13us; 456us; 14us; 435us; 19us; 432us; 86us; 413us; 88us; 415us; 89us; 409us; 90us; 411us; 106us; 63us; 16us; 32768us; 5us; 424us; 6us; 425us; 7us; 423us; 8us; 428us; 9us; 427us; 10us; 426us; 11us; 430us; 12us; 431us; 13us; 456us; 14us; 435us; 19us; 432us; 86us; 413us; 88us; 415us; 89us; 409us; 90us; 411us; 106us; 63us; 0us; 16627us; 0us; 16628us; 0us; 16629us; 0us; 16630us; 0us; 16631us; 0us; 16632us; 0us; 16633us; 0us; 16634us; 0us; 16635us; 0us; 16636us; 0us; 16637us; 0us; 16638us; 0us; 16639us; 0us; 16640us; 0us; 16643us; 0us; 16644us; 0us; 16645us; 0us; 16646us; 0us; 16647us; 16us; 32768us; 5us; 424us; 6us; 425us; 7us; 423us; 8us; 428us; 9us; 427us; 10us; 426us; 11us; 430us; 12us; 431us; 13us; 456us; 14us; 435us; 19us; 432us; 86us; 413us; 88us; 415us; 89us; 409us; 90us; 411us; 106us; 63us; 0us; 16648us; 16us; 32768us; 5us; 424us; 6us; 425us; 7us; 423us; 8us; 428us; 9us; 427us; 10us; 426us; 11us; 430us; 12us; 431us; 13us; 456us; 14us; 435us; 19us; 432us; 86us; 413us; 88us; 415us; 89us; 409us; 90us; 411us; 106us; 63us; 0us; 16649us; 16us; 32768us; 5us; 424us; 6us; 425us; 7us; 423us; 8us; 428us; 9us; 427us; 10us; 426us; 11us; 430us; 12us; 431us; 13us; 456us; 14us; 435us; 19us; 432us; 86us; 413us; 88us; 415us; 89us; 409us; 90us; 411us; 106us; 63us; 0us; 16650us; 16us; 32768us; 5us; 424us; 6us; 425us; 7us; 423us; 8us; 428us; 9us; 427us; 10us; 426us; 11us; 430us; 12us; 431us; 13us; 456us; 14us; 435us; 19us; 432us; 86us; 413us; 88us; 415us; 89us; 409us; 90us; 411us; 106us; 63us; 0us; 16651us; 0us; 16652us; 0us; 16653us; 17us; 32768us; 5us; 424us; 6us; 425us; 7us; 423us; 8us; 428us; 9us; 427us; 10us; 426us; 11us; 430us; 12us; 431us; 13us; 456us; 14us; 435us; 19us; 432us; 82us; 328us; 86us; 413us; 88us; 415us; 89us; 409us; 90us; 411us; 106us; 63us; 0us; 16654us; 0us; 16655us; 0us; 16656us; 0us; 16657us; 0us; 16658us; 0us; 16659us; 0us; 16660us; 0us; 16661us; 1us; 16662us; 106us; 16678us; 0us; 16663us; 0us; 16664us; 0us; 16665us; 1us; 32768us; 106us; 433us; 17us; 32768us; 5us; 424us; 6us; 425us; 7us; 423us; 8us; 428us; 9us; 427us; 10us; 426us; 11us; 430us; 12us; 431us; 13us; 456us; 14us; 435us; 19us; 432us; 82us; 328us; 86us; 413us; 88us; 415us; 89us; 409us; 90us; 411us; 106us; 63us; 0us; 16666us; 1us; 32768us; 106us; 436us; 17us; 32768us; 5us; 424us; 6us; 425us; 7us; 423us; 8us; 428us; 9us; 427us; 10us; 426us; 11us; 430us; 12us; 431us; 13us; 456us; 14us; 435us; 19us; 432us; 82us; 328us; 86us; 413us; 88us; 415us; 89us; 409us; 90us; 411us; 106us; 63us; 0us; 16667us; 1us; 32768us; 106us; 439us; 17us; 16672us; 5us; 424us; 6us; 425us; 7us; 423us; 8us; 428us; 9us; 427us; 10us; 426us; 11us; 430us; 12us; 431us; 13us; 456us; 14us; 435us; 19us; 432us; 82us; 328us; 86us; 413us; 88us; 415us; 89us; 409us; 90us; 411us; 106us; 63us; 1us; 32768us; 107us; 441us; 0us; 16668us; 1us; 16680us; 94us; 444us; 1us; 16680us; 94us; 445us; 1us; 32768us; 13us; 457us; 2us; 32768us; 13us; 457us; 92us; 465us; 2us; 16684us; 94us; 459us; 106us; 448us; 2us; 16684us; 94us; 460us; 106us; 448us; 17us; 16670us; 5us; 424us; 6us; 425us; 7us; 423us; 8us; 428us; 9us; 427us; 10us; 426us; 11us; 430us; 12us; 431us; 13us; 456us; 14us; 435us; 19us; 432us; 82us; 328us; 86us; 413us; 88us; 415us; 89us; 409us; 90us; 411us; 106us; 63us; 1us; 32768us; 107us; 450us; 0us; 16669us; 1us; 16673us; 111us; 453us; 0us; 16674us; 17us; 32768us; 5us; 424us; 6us; 425us; 7us; 423us; 8us; 428us; 9us; 427us; 10us; 426us; 11us; 430us; 12us; 431us; 13us; 456us; 14us; 435us; 19us; 432us; 82us; 328us; 86us; 413us; 88us; 415us; 89us; 409us; 90us; 411us; 106us; 63us; 0us; 16675us; 0us; 16676us; 56us; 16679us; 0us; 16677us; 1us; 16677us; 2us; 16677us; 3us; 16677us; 4us; 16677us; 5us; 16677us; 6us; 16677us; 7us; 16677us; 9us; 16677us; 10us; 16677us; 11us; 16677us; 12us; 16677us; 14us; 16677us; 15us; 16677us; 16us; 16677us; 17us; 16677us; 18us; 16677us; 19us; 16677us; 23us; 16677us; 24us; 16677us; 25us; 16677us; 26us; 16677us; 27us; 16677us; 28us; 16677us; 29us; 16677us; 30us; 16677us; 31us; 16677us; 32us; 16677us; 33us; 16677us; 34us; 16677us; 38us; 16677us; 42us; 16677us; 43us; 16677us; 44us; 16677us; 45us; 16677us; 46us; 16677us; 47us; 16677us; 48us; 16677us; 49us; 16677us; 51us; 16677us; 52us; 16677us; 53us; 16677us; 56us; 16677us; 57us; 16677us; 59us; 16677us; 60us; 16677us; 77us; 16677us; 82us; 16677us; 86us; 16677us; 87us; 16677us; 106us; 16677us; 108us; 16677us; 109us; 16677us; 113us; 16677us; 114us; 16677us; 115us; 16677us; 0us; 16679us; 0us; 16681us; 1us; 32768us; 13us; 457us; 2us; 32768us; 13us; 457us; 92us; 466us; 0us; 16685us; 1us; 16686us; 94us; 463us; 1us; 32768us; 13us; 457us; 0us; 16687us; 0us; 16692us; 0us; 16693us; |]
let _fsyacc_actionTableRowOffsets = [|0us; 4us; 5us; 6us; 7us; 10us; 14us; 15us; 16us; 17us; 18us; 19us; 20us; 22us; 23us; 24us; 25us; 28us; 31us; 33us; 35us; 36us; 37us; 39us; 57us; 59us; 77us; 78us; 79us; 87us; 88us; 89us; 90us; 91us; 92us; 95us; 96us; 99us; 102us; 103us; 106us; 107us; 108us; 109us; 111us; 112us; 113us; 114us; 115us; 118us; 121us; 122us; 125us; 128us; 131us; 132us; 133us; 134us; 135us; 136us; 139us; 144us; 163us; 182us; 201us; 202us; 204us; 205us; 206us; 216us; 235us; 239us; 241us; 243us; 245us; 247us; 249us; 250us; 252us; 254us; 256us; 258us; 259us; 269us; 270us; 271us; 272us; 273us; 274us; 275us; 276us; 277us; 278us; 279us; 280us; 281us; 299us; 300us; 301us; 302us; 303us; 312us; 313us; 316us; 317us; 318us; 319us; 320us; 322us; 323us; 324us; 325us; 330us; 331us; 332us; 334us; 342us; 344us; 348us; 352us; 360us; 369us; 370us; 371us; 373us; 383us; 393us; 397us; 415us; 421us; 423us; 425us; 427us; 428us; 432us; 450us; 456us; 458us; 460us; 462us; 463us; 467us; 468us; 472us; 474us; 475us; 477us; 479us; 480us; 482us; 484us; 485us; 486us; 488us; 489us; 491us; 492us; 493us; 495us; 497us; 498us; 500us; 502us; 503us; 504us; 505us; 506us; 508us; 510us; 512us; 513us; 514us; 516us; 517us; 519us; 520us; 521us; 523us; 524us; 526us; 527us; 528us; 529us; 530us; 531us; 533us; 560us; 564us; 565us; 566us; 567us; 592us; 594us; 595us; 597us; 600us; 601us; 602us; 604us; 605us; 607us; 625us; 632us; 634us; 636us; 638us; 662us; 663us; 665us; 668us; 671us; 672us; 673us; 676us; 677us; 680us; 682us; 683us; 685us; 687us; 689us; 693us; 694us; 696us; 698us; 700us; 701us; 702us; 706us; 710us; 711us; 712us; 714us; 716us; 718us; 721us; 722us; 724us; 726us; 727us; 728us; 729us; 731us; 732us; 736us; 737us; 739us; 740us; 742us; 743us; 744us; 745us; 748us; 750us; 752us; 755us; 758us; 759us; 762us; 764us; 766us; 769us; 771us; 772us; 773us; 777us; 778us; 779us; 797us; 803us; 804us; 806us; 824us; 827us; 828us; 846us; 852us; 858us; 859us; 877us; 883us; 885us; 887us; 888us; 890us; 891us; 893us; 895us; 896us; 897us; 899us; 900us; 902us; 903us; 904us; 905us; 908us; 909us; 911us; 912us; 914us; 915us; 916us; 917us; 919us; 920us; 921us; 922us; 923us; 929us; 932us; 935us; 938us; 941us; 943us; 961us; 967us; 971us; 974us; 975us; 976us; 984us; 992us; 1000us; 1007us; 1016us; 1034us; 1052us; 1070us; 1088us; 1097us; 1104us; 1105us; 1110us; 1111us; 1112us; 1113us; 1114us; 1115us; 1116us; 1117us; 1134us; 1135us; 1136us; 1154us; 1156us; 1157us; 1160us; 1162us; 1163us; 1164us; 1182us; 1183us; 1184us; 1202us; 1203us; 1220us; 1234us; 1251us; 1252us; 1269us; 1283us; 1300us; 1301us; 1303us; 1320us; 1333us; 1345us; 1358us; 1368us; 1378us; 1386us; 1394us; 1397us; 1400us; 1403us; 1406us; 1419us; 1421us; 1438us; 1455us; 1472us; 1489us; 1506us; 1523us; 1540us; 1557us; 1574us; 1591us; 1608us; 1625us; 1626us; 1627us; 1628us; 1629us; 1630us; 1631us; 1632us; 1633us; 1634us; 1635us; 1636us; 1637us; 1638us; 1639us; 1640us; 1641us; 1642us; 1643us; 1644us; 1661us; 1662us; 1679us; 1680us; 1697us; 1698us; 1715us; 1716us; 1717us; 1718us; 1736us; 1737us; 1738us; 1739us; 1740us; 1741us; 1742us; 1743us; 1744us; 1746us; 1747us; 1748us; 1749us; 1751us; 1769us; 1770us; 1772us; 1790us; 1791us; 1793us; 1811us; 1813us; 1814us; 1816us; 1818us; 1820us; 1823us; 1826us; 1829us; 1847us; 1849us; 1850us; 1852us; 1853us; 1871us; 1872us; 1873us; 1930us; 1931us; 1932us; 1934us; 1937us; 1938us; 1940us; 1942us; 1943us; 1944us; |]
let _fsyacc_reductionSymbolCounts = [|1us; 1us; 1us; 3us; 2us; 0us; 1us; 1us; 1us; 1us; 1us; 1us; 1us; 1us; 4us; 0us; 1us; 3us; 3us; 1us; 2us; 0us; 1us; 1us; 1us; 0us; 1us; 2us; 1us; 3us; 3us; 1us; 1us; 0us; 2us; 0us; 1us; 2us; 1us; 1us; 1us; 4us; 4us; 4us; 4us; 0us; 1us; 1us; 3us; 3us; 1us; 9us; 8us; 0us; 1us; 2us; 1us; 1us; 1us; 1us; 1us; 1us; 1us; 1us; 1us; 1us; 1us; 3us; 1us; 1us; 1us; 2us; 0us; 2us; 2us; 1us; 1us; 2us; 1us; 0us; 1us; 2us; 1us; 1us; 1us; 3us; 1us; 1us; 5us; 7us; 5us; 7us; 3us; 3us; 3us; 4us; 4us; 1us; 2us; 2us; 1us; 3us; 3us; 0us; 1us; 0us; 1us; 0us; 1us; 4us; 1us; 1us; 1us; 1us; 1us; 1us; 3us; 5us; 3us; 3us; 4us; 3us; 3us; 3us; 0us; 3us; 1us; 3us; 8us; 4us; 1us; 3us; 3us; 6us; 4us; 0us; 1us; 0us; 1us; 1us; 2us; 2us; 3us; 3us; 1us; 1us; 2us; 0us; 2us; 3us; 3us; 1us; 1us; 6us; 6us; 1us; 2us; 0us; 1us; 1us; 0us; 2us; 1us; 0us; 4us; 3us; 1us; 0us; 1us; 0us; 2us; 0us; 2us; 1us; 3us; 3us; 1us; 2us; 0us; 1us; 1us; 1us; 1us; 3us; 1us; 1us; 3us; 0us; 1us; 1us; 0us; 2us; 0us; 1us; 1us; 1us; 0us; 1us; 1us; 1us; 1us; 0us; 1us; 1us; 1us; 3us; 3us; 3us; 3us; 2us; 3us; 4us; 3us; 4us; 3us; 4us; 1us; 3us; 4us; 3us; 1us; 3us; 4us; 5us; 7us; 6us; 8us; 5us; 6us; 4us; 1us; 3us; 3us; 3us; 3us; 3us; 3us; 3us; 3us; 3us; 3us; 3us; 3us; 1us; 1us; 1us; 1us; 1us; 1us; 1us; 1us; 1us; 1us; 1us; 1us; 1us; 1us; 1us; 1us; 1us; 1us; 1us; 1us; 1us; 2us; 2us; 2us; 2us; 1us; 3us; 5us; 1us; 1us; 1us; 1us; 1us; 1us; 1us; 1us; 1us; 1us; 1us; 4us; 4us; 4us; 6us; 0us; 1us; 0us; 1us; 1us; 3us; 2us; 1us; 1us; 1us; 1us; 1us; 1us; 1us; 3us; 5us; 1us; 3us; 2us; 4us; 0us; 2us; 3us; 5us; |]
let _fsyacc_productionToNonTerminalTable = [|0us; 1us; 2us; 2us; 2us; 3us; 3us; 4us; 5us; 6us; 6us; 7us; 8us; 9us; 10us; 11us; 11us; 12us; 13us; 13us; 14us; 15us; 15us; 16us; 16us; 17us; 17us; 18us; 19us; 19us; 19us; 20us; 20us; 21us; 21us; 22us; 22us; 23us; 23us; 24us; 25us; 25us; 25us; 25us; 25us; 26us; 26us; 26us; 27us; 27us; 28us; 29us; 29us; 30us; 30us; 31us; 31us; 32us; 32us; 33us; 33us; 33us; 33us; 33us; 33us; 33us; 33us; 34us; 34us; 34us; 35us; 35us; 36us; 36us; 36us; 36us; 36us; 37us; 38us; 39us; 39us; 40us; 41us; 41us; 42us; 42us; 43us; 43us; 44us; 44us; 44us; 44us; 44us; 44us; 45us; 45us; 45us; 46us; 46us; 46us; 46us; 47us; 47us; 48us; 48us; 49us; 49us; 50us; 50us; 51us; 52us; 52us; 52us; 52us; 52us; 52us; 53us; 53us; 54us; 54us; 55us; 56us; 56us; 57us; 58us; 58us; 59us; 59us; 60us; 61us; 62us; 62us; 63us; 63us; 63us; 64us; 64us; 65us; 65us; 65us; 65us; 65us; 66us; 67us; 68us; 68us; 68us; 69us; 69us; 69us; 69us; 70us; 70us; 71us; 71us; 72us; 72us; 73us; 73us; 74us; 75us; 75us; 76us; 77us; 77us; 78us; 78us; 79us; 79us; 80us; 80us; 81us; 81us; 82us; 82us; 83us; 84us; 85us; 86us; 86us; 87us; 87us; 88us; 88us; 89us; 90us; 90us; 91us; 91us; 91us; 92us; 92us; 93us; 93us; 94us; 94us; 95us; 95us; 96us; 96us; 96us; 97us; 97us; 98us; 99us; 99us; 100us; 100us; 100us; 100us; 100us; 100us; 100us; 100us; 100us; 100us; 100us; 101us; 101us; 101us; 101us; 102us; 102us; 102us; 102us; 102us; 102us; 102us; 102us; 102us; 102us; 103us; 103us; 103us; 103us; 103us; 103us; 103us; 103us; 103us; 103us; 103us; 103us; 103us; 104us; 104us; 105us; 105us; 106us; 106us; 107us; 107us; 107us; 107us; 107us; 107us; 107us; 108us; 108us; 109us; 109us; 109us; 109us; 109us; 109us; 109us; 109us; 109us; 109us; 109us; 109us; 110us; 110us; 110us; 110us; 110us; 110us; 110us; 111us; 112us; 113us; 113us; 114us; 115us; 116us; 116us; 117us; 117us; 118us; 118us; 119us; 119us; 120us; 121us; 121us; 122us; 123us; 123us; 124us; 124us; 125us; 125us; 126us; 126us; 127us; 127us; 128us; 128us; 129us; 129us; |]
let _fsyacc_immediateActions = [|65535us; 49152us; 16385us; 16386us; 65535us; 65535us; 16387us; 16388us; 16390us; 16391us; 16392us; 16393us; 65535us; 16395us; 16396us; 16397us; 65535us; 65535us; 65535us; 65535us; 16398us; 16400us; 65535us; 65535us; 65535us; 65535us; 16402us; 16403us; 65535us; 16404us; 16406us; 16407us; 16408us; 16410us; 65535us; 16411us; 65535us; 65535us; 16413us; 65535us; 16414us; 16415us; 16416us; 65535us; 16421us; 16422us; 16423us; 16424us; 65535us; 65535us; 16425us; 65535us; 65535us; 65535us; 16426us; 16427us; 16428us; 16430us; 16431us; 65535us; 65535us; 65535us; 65535us; 65535us; 16432us; 65535us; 16433us; 16434us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 16435us; 65535us; 65535us; 65535us; 65535us; 16436us; 65535us; 16439us; 16440us; 16441us; 16442us; 16443us; 16444us; 16445us; 16446us; 16447us; 16448us; 16449us; 16450us; 65535us; 16451us; 16452us; 16453us; 16454us; 65535us; 16455us; 65535us; 16457us; 16458us; 16459us; 16460us; 65535us; 16461us; 16462us; 16464us; 65535us; 16465us; 16466us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 16470us; 16471us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 16473us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 16475us; 65535us; 16477us; 65535us; 65535us; 16478us; 65535us; 65535us; 16479us; 65535us; 65535us; 16480us; 16481us; 65535us; 16482us; 65535us; 16483us; 16484us; 65535us; 65535us; 16485us; 65535us; 65535us; 16486us; 16488us; 16490us; 16492us; 65535us; 65535us; 65535us; 16493us; 16494us; 65535us; 16495us; 65535us; 16496us; 16497us; 65535us; 16498us; 65535us; 16499us; 16500us; 16501us; 16502us; 16503us; 65535us; 65535us; 65535us; 16504us; 16505us; 16506us; 65535us; 65535us; 16507us; 65535us; 65535us; 16509us; 16510us; 65535us; 16511us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 16512us; 65535us; 65535us; 65535us; 16513us; 16514us; 65535us; 16515us; 65535us; 65535us; 16516us; 65535us; 65535us; 65535us; 65535us; 16517us; 65535us; 65535us; 65535us; 16518us; 16520us; 65535us; 65535us; 16524us; 16525us; 65535us; 65535us; 65535us; 65535us; 16526us; 65535us; 65535us; 16527us; 16528us; 16529us; 65535us; 16530us; 65535us; 16532us; 65535us; 16533us; 65535us; 16534us; 16535us; 16536us; 65535us; 65535us; 65535us; 65535us; 65535us; 16537us; 65535us; 65535us; 65535us; 65535us; 65535us; 16538us; 16539us; 65535us; 16540us; 16543us; 65535us; 65535us; 16546us; 65535us; 65535us; 65535us; 16548us; 65535us; 65535us; 65535us; 16552us; 65535us; 65535us; 65535us; 65535us; 16557us; 65535us; 16558us; 65535us; 65535us; 16559us; 16560us; 65535us; 16561us; 65535us; 16564us; 16565us; 16566us; 65535us; 16567us; 65535us; 16569us; 65535us; 16570us; 16572us; 16573us; 65535us; 16575us; 16578us; 16579us; 16587us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 16594us; 65535us; 16595us; 16596us; 16597us; 16598us; 16599us; 16601us; 16602us; 65535us; 16603us; 16604us; 65535us; 65535us; 16605us; 65535us; 65535us; 16606us; 16607us; 65535us; 16608us; 16609us; 65535us; 16610us; 65535us; 65535us; 65535us; 16611us; 65535us; 65535us; 65535us; 16612us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 16627us; 16628us; 16629us; 16630us; 16631us; 16632us; 16633us; 16634us; 16635us; 16636us; 16637us; 16638us; 16639us; 16640us; 16643us; 16644us; 16645us; 16646us; 16647us; 65535us; 16648us; 65535us; 16649us; 65535us; 16650us; 65535us; 16651us; 16652us; 16653us; 65535us; 16654us; 16655us; 16656us; 16657us; 16658us; 16659us; 16660us; 16661us; 65535us; 16663us; 16664us; 16665us; 65535us; 65535us; 16666us; 65535us; 65535us; 16667us; 65535us; 65535us; 65535us; 16668us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 16669us; 65535us; 16674us; 65535us; 16675us; 16676us; 65535us; 16679us; 16681us; 65535us; 65535us; 16685us; 65535us; 65535us; 16687us; 16692us; 16693us; |]
let _fsyacc_reductions ()  =    [| 
# 1174 "parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : MbSqlAbSyn.Qs list)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
                      raise (Microsoft.FSharp.Text.Parsing.Accept(Microsoft.FSharp.Core.Operators.box _1))
                   )
                 : '_startstart_entry));
# 1183 "parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'sql_statement)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 153 "parser.yy"
                                               _1 
                   )
# 153 "parser.yy"
                 : MbSqlAbSyn.Qs list));
# 1194 "parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 158 "parser.yy"
                                              [] 
                   )
# 158 "parser.yy"
                 : 'sql_statement));
# 1204 "parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'simple_statement_or_begin)) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : 'opt_end_of_input)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 159 "parser.yy"
                                                                                        
                                 //we found a wellformed query...
                                 //join the queries parser-wise instead of inside the action
                                 //as done in the original
                                 [_1] @ _3
                                 
                   )
# 159 "parser.yy"
                 : 'sql_statement));
# 1221 "parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'simple_statement_or_begin)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 165 "parser.yy"
                                                                       
                                 //single query, not terminated.
                                 [_1]
                                 
                   )
# 165 "parser.yy"
                 : 'sql_statement));
# 1235 "parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 171 "parser.yy"
                                                   [] 
                   )
# 171 "parser.yy"
                 : 'opt_end_of_input));
# 1245 "parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'sql_statement)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 172 "parser.yy"
                                                   _1 
                   )
# 172 "parser.yy"
                 : 'opt_end_of_input));
# 1256 "parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'simple_statement)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 175 "parser.yy"
                                                   _1 
                   )
# 175 "parser.yy"
                 : 'simple_statement_or_begin));
# 1267 "parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'select_stmt)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 255 "parser.yy"
                                                               _1 
                   )
# 255 "parser.yy"
                 : 'simple_statement));
# 1278 "parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'query_expression)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 276 "parser.yy"
                                                           _1 
                   )
# 276 "parser.yy"
                 : 'select_stmt));
# 1289 "parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'query_expression_parens)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 277 "parser.yy"
                                                           _1 
                   )
# 277 "parser.yy"
                 : 'select_stmt));
# 1300 "parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'subquery)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 281 "parser.yy"
                                               _1 
                   )
# 281 "parser.yy"
                 : 'row_subquery));
# 1311 "parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'subquery)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 284 "parser.yy"
                                               _1 
                   )
# 284 "parser.yy"
                 : 'table_subquery));
# 1322 "parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'query_expression_parens)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 287 "parser.yy"
                                                                                       _1 
                   )
# 287 "parser.yy"
                 : 'subquery));
# 1333 "parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'query_expression_body)) in
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : 'opt_order_clause)) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : 'opt_limit_clause)) in
            let _4 = (let data = parseState.GetInput(4) in (Microsoft.FSharp.Core.Operators.unbox data : 'opt_locking_clause_list)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 293 "parser.yy"
                                                        
                               let options = [
                                 MbSqlAbSyn.Qs_Option.OptOrder _2
                                 MbSqlAbSyn.Qs_Option.OptLimit _3
                                 MbSqlAbSyn.Qs_Option.OptLocking _4
                                 ]
                               MbSqlAbSyn.Qs.Options (_1,options)
                               
                   )
# 293 "parser.yy"
                 : 'query_expression));
# 1354 "parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 352 "parser.yy"
                                                                       MbSqlAbSyn.Expr.Null 
                   )
# 352 "parser.yy"
                 : 'opt_order_clause));
# 1364 "parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'order_clause)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 353 "parser.yy"
                                                                       MbSqlAbSyn.Expr.ExprList _1 
                   )
# 353 "parser.yy"
                 : 'opt_order_clause));
# 1375 "parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : 'order_list)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 356 "parser.yy"
                                                                       _3 
                   )
# 356 "parser.yy"
                 : 'order_clause));
# 1386 "parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'order_list)) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : 'order_expr)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 359 "parser.yy"
                                                                       _1 @ [_3] 
                   )
# 359 "parser.yy"
                 : 'order_list));
# 1398 "parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'order_expr)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 360 "parser.yy"
                                                                       [_1] 
                   )
# 360 "parser.yy"
                 : 'order_list));
# 1409 "parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'expr)) in
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : 'opt_ordering_direction)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 363 "parser.yy"
                                                            
                                 MbSqlAbSyn.Expr.Unary (_2,_1)
                                 
                   )
# 363 "parser.yy"
                 : 'order_expr));
# 1423 "parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 368 "parser.yy"
                                                       "asc" 
                   )
# 368 "parser.yy"
                 : 'opt_ordering_direction));
# 1433 "parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'ordering_direction)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 369 "parser.yy"
                                                       _1 
                   )
# 369 "parser.yy"
                 : 'opt_ordering_direction));
# 1444 "parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 372 "parser.yy"
                                                       "asc" 
                   )
# 372 "parser.yy"
                 : 'ordering_direction));
# 1454 "parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 373 "parser.yy"
                                                       "desc" 
                   )
# 373 "parser.yy"
                 : 'ordering_direction));
# 1464 "parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 376 "parser.yy"
                                                           MbSqlAbSyn.Expr.Null 
                   )
# 376 "parser.yy"
                 : 'opt_limit_clause));
# 1474 "parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'limit_clause)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 377 "parser.yy"
                                                           MbSqlAbSyn.Expr.ExprList _1 
                   )
# 377 "parser.yy"
                 : 'opt_limit_clause));
# 1485 "parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : 'limit_options)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 380 "parser.yy"
                                                           _2 
                   )
# 380 "parser.yy"
                 : 'limit_clause));
# 1496 "parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'limit_option)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 383 "parser.yy"
                                                                       [_1] 
                   )
# 383 "parser.yy"
                 : 'limit_options));
# 1507 "parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'limit_option)) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : 'limit_option)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 384 "parser.yy"
                                                                       [_1;_3] 
                   )
# 384 "parser.yy"
                 : 'limit_options));
# 1519 "parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'limit_option)) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : 'limit_option)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 385 "parser.yy"
                                                                       [_1;_3] 
                   )
# 385 "parser.yy"
                 : 'limit_options));
# 1531 "parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'ident)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 388 "parser.yy"
                                                   _1 
                   )
# 388 "parser.yy"
                 : 'limit_option));
# 1542 "parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : string)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 392 "parser.yy"
                                                   MbSqlAbSyn.Expr.NodeTyped ("num",_1) 
                   )
# 392 "parser.yy"
                 : 'limit_option));
# 1553 "parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 395 "parser.yy"
                                                           MbSqlAbSyn.Expr.Temp 
                   )
# 395 "parser.yy"
                 : 'opt_simple_limit));
# 1563 "parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : 'limit_option)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 396 "parser.yy"
                                                           MbSqlAbSyn.Expr.Temp 
                   )
# 396 "parser.yy"
                 : 'opt_simple_limit));
# 1574 "parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 399 "parser.yy"
                                                       MbSqlAbSyn.Expr.Null 
                   )
# 399 "parser.yy"
                 : 'opt_locking_clause_list));
# 1584 "parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'locking_clause_list)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 400 "parser.yy"
                                                       MbSqlAbSyn.Expr.ExprList _1 
                   )
# 400 "parser.yy"
                 : 'opt_locking_clause_list));
# 1595 "parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'locking_clause_list)) in
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : 'locking_clause)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 404 "parser.yy"
                                                                       _1 @ [_2] 
                   )
# 404 "parser.yy"
                 : 'locking_clause_list));
# 1607 "parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'locking_clause)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 405 "parser.yy"
                                                                       [_1] 
                   )
# 405 "parser.yy"
                 : 'locking_clause_list));
# 1618 "parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 409 "parser.yy"
                                          MbSqlAbSyn.Expr.Temp 
                   )
# 409 "parser.yy"
                 : 'locking_clause));
# 1628 "parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'query_primary)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 416 "parser.yy"
                                               _1 
                   )
# 416 "parser.yy"
                 : 'query_expression_body));
# 1639 "parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'query_expression_body)) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : 'union_option)) in
            let _4 = (let data = parseState.GetInput(4) in (Microsoft.FSharp.Core.Operators.unbox data : 'query_primary)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 417 "parser.yy"
                                                                                          
                                 MbSqlAbSyn.Qs.Union (_3,_1,_4)
                                 
                   )
# 417 "parser.yy"
                 : 'query_expression_body));
# 1654 "parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'query_expression_parens)) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : 'union_option)) in
            let _4 = (let data = parseState.GetInput(4) in (Microsoft.FSharp.Core.Operators.unbox data : 'query_primary)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 420 "parser.yy"
                                                                                            
                                 MbSqlAbSyn.Qs.Union (_3,_1,_4)
                                 
                   )
# 420 "parser.yy"
                 : 'query_expression_body));
# 1669 "parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'query_expression_body)) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : 'union_option)) in
            let _4 = (let data = parseState.GetInput(4) in (Microsoft.FSharp.Core.Operators.unbox data : 'query_expression_parens)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 424 "parser.yy"
                                                        
                                 MbSqlAbSyn.Qs.Union (_3,_1,_4)
                                 
                   )
# 424 "parser.yy"
                 : 'query_expression_body));
# 1684 "parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'query_expression_parens)) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : 'union_option)) in
            let _4 = (let data = parseState.GetInput(4) in (Microsoft.FSharp.Core.Operators.unbox data : 'query_expression_parens)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 428 "parser.yy"
                                                        
                                 MbSqlAbSyn.Qs.Union (_3,_1,_4)
                                 
                   )
# 428 "parser.yy"
                 : 'query_expression_body));
# 1699 "parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 433 "parser.yy"
                                                   "none" 
                   )
# 433 "parser.yy"
                 : 'union_option));
# 1709 "parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 434 "parser.yy"
                                                   "distinct" 
                   )
# 434 "parser.yy"
                 : 'union_option));
# 1719 "parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 435 "parser.yy"
                                                   "all" 
                   )
# 435 "parser.yy"
                 : 'union_option));
# 1729 "parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : 'query_expression_parens)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 438 "parser.yy"
                                                                           _2 
                   )
# 438 "parser.yy"
                 : 'query_expression_parens));
# 1740 "parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : 'query_expression)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 439 "parser.yy"
                                                                           _2 
                   )
# 439 "parser.yy"
                 : 'query_expression_parens));
# 1751 "parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'query_specification)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 442 "parser.yy"
                                                                           _1 
                   )
# 442 "parser.yy"
                 : 'query_primary));
# 1762 "parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : 'select_options)) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : 'select_item_list)) in
            let _4 = (let data = parseState.GetInput(4) in (Microsoft.FSharp.Core.Operators.unbox data : 'into_clause)) in
            let _5 = (let data = parseState.GetInput(5) in (Microsoft.FSharp.Core.Operators.unbox data : 'opt_from_clause)) in
            let _6 = (let data = parseState.GetInput(6) in (Microsoft.FSharp.Core.Operators.unbox data : 'opt_where_clause)) in
            let _7 = (let data = parseState.GetInput(7) in (Microsoft.FSharp.Core.Operators.unbox data : 'opt_group_clause)) in
            let _8 = (let data = parseState.GetInput(8) in (Microsoft.FSharp.Core.Operators.unbox data : 'opt_having_clause)) in
            let _9 = (let data = parseState.GetInput(9) in (Microsoft.FSharp.Core.Operators.unbox data : 'opt_window_clause)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 454 "parser.yy"
                                                  
                                 MbSqlAbSyn.Qs.Select [
                                     MbSqlAbSyn.Q_Select.SelectOptions _2
                                     MbSqlAbSyn.Q_Select.SelectItems _3
                                     MbSqlAbSyn.Q_Select.SelectInto _4
                                     MbSqlAbSyn.Q_Select.SelectFrom _5
                                     MbSqlAbSyn.Q_Select.SelectWhere _6
                                     MbSqlAbSyn.Q_Select.SelectGroup _7
                                     MbSqlAbSyn.Q_Select.SelectHaving _8
                                     MbSqlAbSyn.Q_Select.SelectWindow _9
                                     ]
                                 
                   )
# 454 "parser.yy"
                 : 'query_specification));
# 1791 "parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : 'select_options)) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : 'select_item_list)) in
            let _4 = (let data = parseState.GetInput(4) in (Microsoft.FSharp.Core.Operators.unbox data : 'opt_from_clause)) in
            let _5 = (let data = parseState.GetInput(5) in (Microsoft.FSharp.Core.Operators.unbox data : 'opt_where_clause)) in
            let _6 = (let data = parseState.GetInput(6) in (Microsoft.FSharp.Core.Operators.unbox data : 'opt_group_clause)) in
            let _7 = (let data = parseState.GetInput(7) in (Microsoft.FSharp.Core.Operators.unbox data : 'opt_having_clause)) in
            let _8 = (let data = parseState.GetInput(8) in (Microsoft.FSharp.Core.Operators.unbox data : 'opt_window_clause)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 473 "parser.yy"
                                                  
                                 //same as above but no into
                                 MbSqlAbSyn.Qs.Select [
                                     MbSqlAbSyn.Q_Select.SelectOptions _2
                                     MbSqlAbSyn.Q_Select.SelectItems _3
                                     MbSqlAbSyn.Q_Select.SelectInto (MbSqlAbSyn.Expr.Null )
                                     MbSqlAbSyn.Q_Select.SelectFrom _4
                                     MbSqlAbSyn.Q_Select.SelectWhere _5
                                     MbSqlAbSyn.Q_Select.SelectGroup _6
                                     MbSqlAbSyn.Q_Select.SelectHaving _7
                                     MbSqlAbSyn.Q_Select.SelectWindow _8
                                     ]
                                 
                   )
# 473 "parser.yy"
                 : 'query_specification));
# 1820 "parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 488 "parser.yy"
                                                       [] 
                   )
# 488 "parser.yy"
                 : 'select_options));
# 1830 "parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'select_option_list)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 489 "parser.yy"
                                                       _1 
                   )
# 489 "parser.yy"
                 : 'select_options));
# 1841 "parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'select_option_list)) in
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : 'select_option)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 492 "parser.yy"
                                                                   _1 @ [_2]
                   )
# 492 "parser.yy"
                 : 'select_option_list));
# 1853 "parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'select_option)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 493 "parser.yy"
                                                                   [_1] 
                   )
# 493 "parser.yy"
                 : 'select_option_list));
# 1864 "parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'query_spec_option)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 496 "parser.yy"
                                                      _1 
                   )
# 496 "parser.yy"
                 : 'select_option));
# 1875 "parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 497 "parser.yy"
                                                 
                                 //might be deprecated
                                 MbSqlAbSyn.Expr.NodeTyped ("option","sql no cache")
                                 
                   )
# 497 "parser.yy"
                 : 'select_option));
# 1888 "parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 503 "parser.yy"
                                                 
                                 MbSqlAbSyn.Expr.NodeTyped ("option","straight join")
                                 
                   )
# 503 "parser.yy"
                 : 'query_spec_option));
# 1900 "parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 506 "parser.yy"
                                                  
                                 MbSqlAbSyn.Expr.NodeTyped ("option","high priority")
                                 
                   )
# 506 "parser.yy"
                 : 'query_spec_option));
# 1912 "parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 509 "parser.yy"
                                             
                                 MbSqlAbSyn.Expr.NodeTyped ("option","distinct")
                                 
                   )
# 509 "parser.yy"
                 : 'query_spec_option));
# 1924 "parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 512 "parser.yy"
                                                     
                                 MbSqlAbSyn.Expr.NodeTyped ("option","small result")
                                 
                   )
# 512 "parser.yy"
                 : 'query_spec_option));
# 1936 "parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 515 "parser.yy"
                                                   
                                 MbSqlAbSyn.Expr.NodeTyped ("option","big result")
                                 
                   )
# 515 "parser.yy"
                 : 'query_spec_option));
# 1948 "parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 518 "parser.yy"
                                                      
                                 MbSqlAbSyn.Expr.NodeTyped ("option","buffer result")
                                 
                   )
# 518 "parser.yy"
                 : 'query_spec_option));
# 1960 "parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 521 "parser.yy"
                                                        
                                 MbSqlAbSyn.Expr.NodeTyped ("option","calc found rows")
                                 
                   )
# 521 "parser.yy"
                 : 'query_spec_option));
# 1972 "parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 524 "parser.yy"
                                        
                                 MbSqlAbSyn.Expr.NodeTyped ("option","all")
                                 
                   )
# 524 "parser.yy"
                 : 'query_spec_option));
# 1984 "parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'select_item_list)) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : 'select_item)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 529 "parser.yy"
                                                                         
                                 _1 @ [_3]
                                 
                   )
# 529 "parser.yy"
                 : 'select_item_list));
# 1998 "parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'select_item)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 532 "parser.yy"
                                            
                                 [_1]
                                 
                   )
# 532 "parser.yy"
                 : 'select_item_list));
# 2011 "parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 535 "parser.yy"
                                         
                                 [MbSqlAbSyn.Expr.Binary ("as",MbSqlAbSyn.Expr.Node "*",MbSqlAbSyn.Expr.Null)]
                                 
                   )
# 535 "parser.yy"
                 : 'select_item_list));
# 2023 "parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'table_wild)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 541 "parser.yy"
                                           
                                 MbSqlAbSyn.Expr.Binary ("as",_1,MbSqlAbSyn.Expr.Null)
                                 
                   )
# 541 "parser.yy"
                 : 'select_item));
# 2036 "parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'expr)) in
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : 'select_alias)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 544 "parser.yy"
                                                  
                                 //$$= NEW_PTN PTI_expr_with_alias(@$, _1, @1.cpp, _2);
                                 MbSqlAbSyn.Expr.Binary ("as",_1,_2)
                                 
                   )
# 544 "parser.yy"
                 : 'select_item));
# 2051 "parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 550 "parser.yy"
                                                   MbSqlAbSyn.Expr.Null 
                   )
# 550 "parser.yy"
                 : 'select_alias));
# 2061 "parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : 'ident)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 551 "parser.yy"
                                                   _2 
                   )
# 551 "parser.yy"
                 : 'select_alias));
# 2072 "parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : string)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 552 "parser.yy"
                                                   MbSqlAbSyn.Expr.NodeTyped ("id",_2) 
                   )
# 552 "parser.yy"
                 : 'select_alias));
# 2083 "parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'ident)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 553 "parser.yy"
                                                   _1 
                   )
# 553 "parser.yy"
                 : 'select_alias));
# 2094 "parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : string)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 554 "parser.yy"
                                                   MbSqlAbSyn.Expr.NodeTyped ("id",_1) 
                   )
# 554 "parser.yy"
                 : 'select_alias));
# 2105 "parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : 'into_destination)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 558 "parser.yy"
                                                          _2 
                   )
# 558 "parser.yy"
                 : 'into_clause));
# 2116 "parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 561 "parser.yy"
                                           MbSqlAbSyn.Expr.Temp 
                   )
# 561 "parser.yy"
                 : 'into_destination));
# 2126 "parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 579 "parser.yy"
                                                                          
                                 MbSqlAbSyn.Expr.Null
                                 
                   )
# 579 "parser.yy"
                 : 'opt_from_clause));
# 2138 "parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'from_clause)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 582 "parser.yy"
                                            
                                 _1
                                 
                   )
# 582 "parser.yy"
                 : 'opt_from_clause));
# 2151 "parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : 'from_tables)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 587 "parser.yy"
                                                      _2 
                   )
# 587 "parser.yy"
                 : 'from_clause));
# 2162 "parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 590 "parser.yy"
                                         
                                 //dual is dummy for no table
                                 MbSqlAbSyn.Expr.Null
                                 
                   )
# 590 "parser.yy"
                 : 'from_tables));
# 2175 "parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'table_reference_list)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 594 "parser.yy"
                                                      MbSqlAbSyn.ExprListTyped ("from-ids",_1) 
                   )
# 594 "parser.yy"
                 : 'from_tables));
# 2186 "parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'table_reference)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 597 "parser.yy"
                                                
                                 [_1]
                                 
                   )
# 597 "parser.yy"
                 : 'table_reference_list));
# 2199 "parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'table_reference_list)) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : 'table_reference)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 600 "parser.yy"
                                                                                 
                                 _1 @ [_3]
                                 
                   )
# 600 "parser.yy"
                 : 'table_reference_list));
# 2213 "parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'table_factor)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 605 "parser.yy"
                                              _1 
                   )
# 605 "parser.yy"
                 : 'table_reference));
# 2224 "parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'joined_table)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 606 "parser.yy"
                                              _1 
                   )
# 606 "parser.yy"
                 : 'table_reference));
# 2235 "parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'table_reference)) in
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : 'inner_join_type)) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : 'table_reference)) in
            let _5 = (let data = parseState.GetInput(5) in (Microsoft.FSharp.Core.Operators.unbox data : 'expr)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 610 "parser.yy"
                                                                                           
                                 MbSqlAbSyn.Expr.Binary (_2,_1,MbSqlAbSyn.Expr.Binary("on",_3,_5))
                                 
                   )
# 610 "parser.yy"
                 : 'joined_table));
# 2251 "parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'table_reference)) in
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : 'inner_join_type)) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : 'table_reference)) in
            let _6 = (let data = parseState.GetInput(6) in (Microsoft.FSharp.Core.Operators.unbox data : 'using_list)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 614 "parser.yy"
                                                             
                                 MbSqlAbSyn.Expr.Binary (_2,_1,MbSqlAbSyn.Expr.Binary("using",_3,_6))
                                 
                   )
# 614 "parser.yy"
                 : 'joined_table));
# 2267 "parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'table_reference)) in
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : 'outer_join_type)) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : 'table_reference)) in
            let _5 = (let data = parseState.GetInput(5) in (Microsoft.FSharp.Core.Operators.unbox data : 'expr)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 617 "parser.yy"
                                                                                           
                                 MbSqlAbSyn.Expr.Binary (_2,_1,MbSqlAbSyn.Expr.Binary("on",_3,_5))
                                 
                   )
# 617 "parser.yy"
                 : 'joined_table));
# 2283 "parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'table_reference)) in
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : 'outer_join_type)) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : 'table_reference)) in
            let _6 = (let data = parseState.GetInput(6) in (Microsoft.FSharp.Core.Operators.unbox data : 'using_list)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 621 "parser.yy"
                                                             
                                 MbSqlAbSyn.Expr.Binary (_2,_1,MbSqlAbSyn.Expr.Binary("using",_3,_6))
                                 
                   )
# 621 "parser.yy"
                 : 'joined_table));
# 2299 "parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'table_reference)) in
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : 'inner_join_type)) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : 'table_reference)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 625 "parser.yy"
                                                              
                                 MbSqlAbSyn.Expr.Binary (_2,_1,_3)
                                 
                   )
# 625 "parser.yy"
                 : 'joined_table));
# 2314 "parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'table_reference)) in
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : 'natural_join_type)) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : 'table_factor)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 628 "parser.yy"
                                                                               
                                 MbSqlAbSyn.Expr.Binary (_2,_1,_3)
                                 
                   )
# 628 "parser.yy"
                 : 'joined_table));
# 2329 "parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : 'opt_inner)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 634 "parser.yy"
                                                                       "natural"+_2+" join" 
                   )
# 634 "parser.yy"
                 : 'natural_join_type));
# 2340 "parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : 'opt_outer)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 635 "parser.yy"
                                                                       "natural right"+_3+" join"
                   )
# 635 "parser.yy"
                 : 'natural_join_type));
# 2351 "parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : 'opt_outer)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 636 "parser.yy"
                                                                       "natural left"+_3+" join"
                   )
# 636 "parser.yy"
                 : 'natural_join_type));
# 2362 "parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 639 "parser.yy"
                                                                   "join" 
                   )
# 639 "parser.yy"
                 : 'inner_join_type));
# 2372 "parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 640 "parser.yy"
                                                                   "inner join" 
                   )
# 640 "parser.yy"
                 : 'inner_join_type));
# 2382 "parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 641 "parser.yy"
                                                                   "cross join" 
                   )
# 641 "parser.yy"
                 : 'inner_join_type));
# 2392 "parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 642 "parser.yy"
                                                                   "straight_join" 
                   )
# 642 "parser.yy"
                 : 'inner_join_type));
# 2402 "parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : 'opt_outer)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 645 "parser.yy"
                                                                   "left"+_2+" join" 
                   )
# 645 "parser.yy"
                 : 'outer_join_type));
# 2413 "parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : 'opt_outer)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 646 "parser.yy"
                                                                   "right"+_2+" join" 
                   )
# 646 "parser.yy"
                 : 'outer_join_type));
# 2424 "parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 649 "parser.yy"
                                               "" 
                   )
# 649 "parser.yy"
                 : 'opt_inner));
# 2434 "parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 650 "parser.yy"
                                               " inner" 
                   )
# 650 "parser.yy"
                 : 'opt_inner));
# 2444 "parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 653 "parser.yy"
                                               "" 
                   )
# 653 "parser.yy"
                 : 'opt_outer));
# 2454 "parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 654 "parser.yy"
                                               " outer" 
                   )
# 654 "parser.yy"
                 : 'opt_outer));
# 2464 "parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 661 "parser.yy"
                                                   MbSqlAbSyn.Expr.Null 
                   )
# 661 "parser.yy"
                 : 'opt_use_partition));
# 2474 "parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'use_partition)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 662 "parser.yy"
                                                   MbSqlAbSyn.Expr.Null 
                   )
# 662 "parser.yy"
                 : 'opt_use_partition));
# 2485 "parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : 'using_list)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 666 "parser.yy"
                                                                            _3 
                   )
# 666 "parser.yy"
                 : 'use_partition));
# 2496 "parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'single_table)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 694 "parser.yy"
                                                               _1 
                   )
# 694 "parser.yy"
                 : 'table_factor));
# 2507 "parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'single_table_parens)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 695 "parser.yy"
                                                               _1 
                   )
# 695 "parser.yy"
                 : 'table_factor));
# 2518 "parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'derived_table)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 696 "parser.yy"
                                                               _1 
                   )
# 696 "parser.yy"
                 : 'table_factor));
# 2529 "parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'joined_table_parens)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 697 "parser.yy"
                                                               _1 
                   )
# 697 "parser.yy"
                 : 'table_factor));
# 2540 "parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'table_reference_list_parens)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 698 "parser.yy"
                                                               MbSqlAbSyn.Expr.ExprList _1 
                   )
# 698 "parser.yy"
                 : 'table_factor));
# 2551 "parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'table_function)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 699 "parser.yy"
                                                               _1 
                   )
# 699 "parser.yy"
                 : 'table_factor));
# 2562 "parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : 'table_reference_list_parens)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 702 "parser.yy"
                                                                              
                                 _2
                                 
                   )
# 702 "parser.yy"
                 : 'table_reference_list_parens));
# 2575 "parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : 'table_reference_list)) in
            let _4 = (let data = parseState.GetInput(4) in (Microsoft.FSharp.Core.Operators.unbox data : 'table_reference)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 705 "parser.yy"
                                                                                                   
                                 _2 @ [_4]
                                 
                   )
# 705 "parser.yy"
                 : 'table_reference_list_parens));
# 2589 "parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : 'single_table_parens)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 710 "parser.yy"
                                                                       _2 
                   )
# 710 "parser.yy"
                 : 'single_table_parens));
# 2600 "parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : 'single_table)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 711 "parser.yy"
                                                                       _2 
                   )
# 711 "parser.yy"
                 : 'single_table_parens));
# 2611 "parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'table_ident)) in
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : 'opt_use_partition)) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : 'opt_table_alias)) in
            let _4 = (let data = parseState.GetInput(4) in (Microsoft.FSharp.Core.Operators.unbox data : 'opt_key_definition)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 714 "parser.yy"
                                                                                                 
                                 //_3 is ExprId -> ExpExprAlias 
                                 MbSqlAbSyn.Expr.ExprListTyped ("single-table-id",[_1|>_3;_4])
                                 
                   )
# 714 "parser.yy"
                 : 'single_table));
# 2628 "parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : 'joined_table_parens)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 720 "parser.yy"
                                                                       _2 
                   )
# 720 "parser.yy"
                 : 'joined_table_parens));
# 2639 "parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : 'joined_table)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 721 "parser.yy"
                                                                       _2 
                   )
# 721 "parser.yy"
                 : 'joined_table_parens));
# 2650 "parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'table_subquery)) in
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : 'opt_table_alias)) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : 'opt_derived_column_list)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 724 "parser.yy"
                                                                                       
                                 let subq = MbSqlAbSyn.Expr.SubQ _1
                                 let collist = _3
                                 let subname = MbSqlAbSyn.Expr.Null|>_2
                                 let subalias1 = MbSqlAbSyn.Expr.Binary ("col_list",subname,collist)
                                 let subalias2 = MbSqlAbSyn.Expr.Binary ("as",subq,subalias1)
                                 subalias2
                                 
                   )
# 724 "parser.yy"
                 : 'derived_table));
# 2670 "parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 734 "parser.yy"
                                            
                                 MbSqlAbSyn.Expr.Empty
                                 
                   )
# 734 "parser.yy"
                 : 'opt_derived_column_list));
# 2682 "parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : 'simple_ident_list)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 737 "parser.yy"
                                                                    
                                 MbSqlAbSyn.Expr.ExprList _2
                                 
                   )
# 737 "parser.yy"
                 : 'opt_derived_column_list));
# 2695 "parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'ident)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 742 "parser.yy"
                                                                       [_1] 
                   )
# 742 "parser.yy"
                 : 'simple_ident_list));
# 2706 "parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'simple_ident_list)) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : 'ident)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 743 "parser.yy"
                                                                       _1 @ [_3] 
                   )
# 743 "parser.yy"
                 : 'simple_ident_list));
# 2718 "parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : 'expr)) in
            let _5 = (let data = parseState.GetInput(5) in (Microsoft.FSharp.Core.Operators.unbox data : 'text_string_sys)) in
            let _6 = (let data = parseState.GetInput(6) in (Microsoft.FSharp.Core.Operators.unbox data : 'columns_clause)) in
            let _8 = (let data = parseState.GetInput(8) in (Microsoft.FSharp.Core.Operators.unbox data : 'opt_table_alias)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 748 "parser.yy"
                                                
                                 // Alias isn't optional, follow derived's behavior
                                 //Not sure what this is, so leave as temp for now
                                 MbSqlAbSyn.Expr.Temp
                                 
                   )
# 748 "parser.yy"
                 : 'table_function));
# 2736 "parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : 'columns_list)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 755 "parser.yy"
                                                                            _3 
                   )
# 755 "parser.yy"
                 : 'columns_clause));
# 2747 "parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'jt_column)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 758 "parser.yy"
                                                                       [_1] 
                   )
# 758 "parser.yy"
                 : 'columns_list));
# 2758 "parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'columns_list)) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : 'jt_column)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 759 "parser.yy"
                                                                       _1 @ [_3] 
                   )
# 759 "parser.yy"
                 : 'columns_list));
# 2770 "parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'ident)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 762 "parser.yy"
                                                               
                                 MbSqlAbSyn.Expr.Temp
                                 
                   )
# 762 "parser.yy"
                 : 'jt_column));
# 2783 "parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'ident)) in
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : 'set_type)) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : 'jt_column_type)) in
            let _5 = (let data = parseState.GetInput(5) in (Microsoft.FSharp.Core.Operators.unbox data : 'text_string_sys)) in
            let _6 = (let data = parseState.GetInput(6) in (Microsoft.FSharp.Core.Operators.unbox data : 'opt_on_empty_or_error)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 766 "parser.yy"
                                                      
                                 MbSqlAbSyn.Expr.Temp
                                 
                   )
# 766 "parser.yy"
                 : 'jt_column));
# 2800 "parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : 'text_string_sys)) in
            let _4 = (let data = parseState.GetInput(4) in (Microsoft.FSharp.Core.Operators.unbox data : 'columns_clause)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 769 "parser.yy"
                                                                                       
                                 MbSqlAbSyn.Expr.Temp
                                 
                   )
# 769 "parser.yy"
                 : 'jt_column));
# 2814 "parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 774 "parser.yy"
                                               MbSqlAbSyn.Expr.Temp 
                   )
# 774 "parser.yy"
                 : 'jt_column_type));
# 2824 "parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 775 "parser.yy"
                                               MbSqlAbSyn.Expr.Temp 
                   )
# 775 "parser.yy"
                 : 'jt_column_type));
# 2834 "parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 778 "parser.yy"
                                                           MbSqlAbSyn.Expr.Temp 
                   )
# 778 "parser.yy"
                 : 'opt_on_empty_or_error));
# 2844 "parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'opt_on_empty)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 779 "parser.yy"
                                                           MbSqlAbSyn.Expr.Temp 
                   )
# 779 "parser.yy"
                 : 'opt_on_empty_or_error));
# 2855 "parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'opt_on_error)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 780 "parser.yy"
                                                           MbSqlAbSyn.Expr.Temp 
                   )
# 780 "parser.yy"
                 : 'opt_on_empty_or_error));
# 2866 "parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'opt_on_empty)) in
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : 'opt_on_error)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 781 "parser.yy"
                                                           MbSqlAbSyn.Expr.Temp 
                   )
# 781 "parser.yy"
                 : 'opt_on_empty_or_error));
# 2878 "parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'opt_on_error)) in
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : 'opt_on_empty)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 782 "parser.yy"
                                                           MbSqlAbSyn.Expr.Temp 
                   )
# 782 "parser.yy"
                 : 'opt_on_empty_or_error));
# 2890 "parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'jt_on_response)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 785 "parser.yy"
                                                                      MbSqlAbSyn.Expr.Temp 
                   )
# 785 "parser.yy"
                 : 'opt_on_empty));
# 2901 "parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'jt_on_response)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 788 "parser.yy"
                                                                      MbSqlAbSyn.Expr.Temp 
                   )
# 788 "parser.yy"
                 : 'opt_on_error));
# 2912 "parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 791 "parser.yy"
                                                               MbSqlAbSyn.Expr.Temp 
                   )
# 791 "parser.yy"
                 : 'jt_on_response));
# 2922 "parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 792 "parser.yy"
                                                               MbSqlAbSyn.Expr.Temp 
                   )
# 792 "parser.yy"
                 : 'jt_on_response));
# 2932 "parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : 'text_string_sys)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 793 "parser.yy"
                                                               MbSqlAbSyn.Expr.Temp 
                   )
# 793 "parser.yy"
                 : 'jt_on_response));
# 2943 "parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 796 "parser.yy"
                                                           MbSqlAbSyn.Expr.Empty
                   )
# 796 "parser.yy"
                 : 'index_hint_clause));
# 2953 "parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 797 "parser.yy"
                                                           MbSqlAbSyn.Expr.Temp 
                   )
# 797 "parser.yy"
                 : 'index_hint_clause));
# 2963 "parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 798 "parser.yy"
                                                           MbSqlAbSyn.Expr.Temp 
                   )
# 798 "parser.yy"
                 : 'index_hint_clause));
# 2973 "parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 799 "parser.yy"
                                                           MbSqlAbSyn.Expr.Temp 
                   )
# 799 "parser.yy"
                 : 'index_hint_clause));
# 2983 "parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 802 "parser.yy"
                                            "force" 
                   )
# 802 "parser.yy"
                 : 'index_hint_type));
# 2993 "parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 803 "parser.yy"
                                            "ignore" 
                   )
# 803 "parser.yy"
                 : 'index_hint_type));
# 3003 "parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'index_hint_type)) in
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : 'key_or_index)) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : 'index_hint_clause)) in
            let _5 = (let data = parseState.GetInput(5) in (Microsoft.FSharp.Core.Operators.unbox data : 'key_usage_list)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 807 "parser.yy"
                                                                 
                                 MbSqlAbSyn.Expr.Temp 
                                 
                   )
# 807 "parser.yy"
                 : 'index_hint_definition));
# 3019 "parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : 'key_or_index)) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : 'index_hint_clause)) in
            let _5 = (let data = parseState.GetInput(5) in (Microsoft.FSharp.Core.Operators.unbox data : 'opt_key_usage_list)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 811 "parser.yy"
                                                                     
                                 MbSqlAbSyn.Expr.Temp 
                                 
                   )
# 811 "parser.yy"
                 : 'index_hint_definition));
# 3034 "parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'index_hint_definition)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 816 "parser.yy"
                                                       [] 
                   )
# 816 "parser.yy"
                 : 'index_hints_list));
# 3045 "parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'index_hints_list)) in
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : 'index_hint_definition)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 817 "parser.yy"
                                                                       
                                 []
                                 
                   )
# 817 "parser.yy"
                 : 'index_hints_list));
# 3059 "parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 822 "parser.yy"
                                                       MbSqlAbSyn.Expr.Empty 
                   )
# 822 "parser.yy"
                 : 'opt_index_hints_list));
# 3069 "parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'index_hints_list)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 823 "parser.yy"
                                                       MbSqlAbSyn.Expr.ExprList _1 
                   )
# 823 "parser.yy"
                 : 'opt_index_hints_list));
# 3080 "parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'opt_where_clause_expr)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 829 "parser.yy"
                                                     _1 
                   )
# 829 "parser.yy"
                 : 'opt_where_clause));
# 3091 "parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 832 "parser.yy"
                                            MbSqlAbSyn.Expr.Null 
                   )
# 832 "parser.yy"
                 : 'opt_where_clause_expr));
# 3101 "parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : 'expr)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 833 "parser.yy"
                                                _2 
                   )
# 833 "parser.yy"
                 : 'opt_where_clause_expr));
# 3112 "parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'opt_index_hints_list)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 837 "parser.yy"
                                                       _1 
                   )
# 837 "parser.yy"
                 : 'opt_key_definition));
# 3123 "parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 845 "parser.yy"
                                                                       MbSqlAbSyn.Expr.Null 
                   )
# 845 "parser.yy"
                 : 'opt_group_clause));
# 3133 "parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : 'group_list)) in
            let _4 = (let data = parseState.GetInput(4) in (Microsoft.FSharp.Core.Operators.unbox data : 'olap_opt)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 846 "parser.yy"
                                                                      
                                 MbSqlAbSyn.Expr.ExprListTyped (_4,_3)
                                 
                   )
# 846 "parser.yy"
                 : 'opt_group_clause));
# 3147 "parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'group_list)) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : 'expr)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 851 "parser.yy"
                                                                   _1 @ [_3] 
                   )
# 851 "parser.yy"
                 : 'group_list));
# 3159 "parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'expr)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 852 "parser.yy"
                                                                   [_1] 
                   )
# 852 "parser.yy"
                 : 'group_list));
# 3170 "parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 855 "parser.yy"
                                               "no-rollup" 
                   )
# 855 "parser.yy"
                 : 'olap_opt));
# 3180 "parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 856 "parser.yy"
                                               "rollup" 
                   )
# 856 "parser.yy"
                 : 'olap_opt));
# 3190 "parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 869 "parser.yy"
                                                   MbSqlAbSyn.Expr.Null 
                   )
# 869 "parser.yy"
                 : 'opt_having_clause));
# 3200 "parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : 'expr)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 870 "parser.yy"
                                                   _2 
                   )
# 870 "parser.yy"
                 : 'opt_having_clause));
# 3211 "parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 875 "parser.yy"
                                                                   MbSqlAbSyn.Expr.Null 
                   )
# 875 "parser.yy"
                 : 'opt_window_clause));
# 3221 "parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : 'window_definition_list)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 876 "parser.yy"
                                                                   MbSqlAbSyn.Expr.ExprList _2 
                   )
# 876 "parser.yy"
                 : 'opt_window_clause));
# 3232 "parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'window_definition)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 880 "parser.yy"
                                                                                       [_1] 
                   )
# 880 "parser.yy"
                 : 'window_definition_list));
# 3243 "parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'window_definition_list)) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : 'window_definition)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 881 "parser.yy"
                                                                                       _1 @ [_3]
                   )
# 881 "parser.yy"
                 : 'window_definition_list));
# 3255 "parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'window_name)) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : 'window_spec)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 885 "parser.yy"
                                                               
                                 MbSqlAbSyn.Expr.Binary ("as",_1,_3)
                                 
                   )
# 885 "parser.yy"
                 : 'window_definition));
# 3269 "parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'ident)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 890 "parser.yy"
                                               _1 
                   )
# 890 "parser.yy"
                 : 'window_name));
# 3280 "parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 894 "parser.yy"
                                                                             MbSqlAbSyn.Expr.Null 
                   )
# 894 "parser.yy"
                 : 'window_spec));
# 3290 "parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 898 "parser.yy"
                                                   MbSqlAbSyn.Expr.Temp 
                   )
# 898 "parser.yy"
                 : 'opt_key_usage_list));
# 3300 "parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'key_usage_list)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 899 "parser.yy"
                                                   MbSqlAbSyn.Expr.Temp 
                   )
# 899 "parser.yy"
                 : 'opt_key_usage_list));
# 3311 "parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'ident)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 903 "parser.yy"
                                                   MbSqlAbSyn.Expr.Temp 
                   )
# 903 "parser.yy"
                 : 'key_usage_element));
# 3322 "parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 904 "parser.yy"
                                                   MbSqlAbSyn.Expr.Temp 
                   )
# 904 "parser.yy"
                 : 'key_usage_element));
# 3332 "parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'key_usage_element)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 908 "parser.yy"
                                                                               MbSqlAbSyn.Expr.Temp 
                   )
# 908 "parser.yy"
                 : 'key_usage_list));
# 3343 "parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'key_usage_list)) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : 'key_usage_element)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 909 "parser.yy"
                                                                               MbSqlAbSyn.Expr.Temp 
                   )
# 909 "parser.yy"
                 : 'key_usage_list));
# 3355 "parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'ident_string_list)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 913 "parser.yy"
                                                   MbSqlAbSyn.Expr.ExprListTyped ("id",_1) 
                   )
# 913 "parser.yy"
                 : 'using_list));
# 3366 "parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'ident)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 917 "parser.yy"
                                                                       [_1] 
                   )
# 917 "parser.yy"
                 : 'ident_string_list));
# 3377 "parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'ident_string_list)) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : 'ident)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 918 "parser.yy"
                                                                       _1 @ [_3] 
                   )
# 918 "parser.yy"
                 : 'ident_string_list));
# 3389 "parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 921 "parser.yy"
                                               "" 
                   )
# 921 "parser.yy"
                 : 'opt_as_or_eq));
# 3399 "parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 922 "parser.yy"
                                               "as" 
                   )
# 922 "parser.yy"
                 : 'opt_as_or_eq));
# 3409 "parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 923 "parser.yy"
                                               "eq" 
                   )
# 923 "parser.yy"
                 : 'opt_as_or_eq));
# 3419 "parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 926 "parser.yy"
                                                   
                                 fun tid ->
                                     match tid with
                                     | MbSqlAbSyn.Expr.ExprListTyped (t,l) -> l.[0]
                                     | MbSqlAbSyn.Expr.ExprList l -> l.[0]
                                     | _ -> tid
                                 
                   )
# 926 "parser.yy"
                 : 'opt_table_alias));
# 3435 "parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'opt_as_or_eq)) in
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : 'ident)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 933 "parser.yy"
                                                   
                                 fun tid ->
                                     MbSqlAbSyn.Expr.Binary (
                                         _1,
                                         tid,
                                         _2
                                         )
                                 
                   )
# 933 "parser.yy"
                 : 'opt_table_alias));
# 3454 "parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 943 "parser.yy"
                                               "" 
                   )
# 943 "parser.yy"
                 : 'opt_all));
# 3464 "parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 944 "parser.yy"
                                               "all" 
                   )
# 944 "parser.yy"
                 : 'opt_all));
# 3474 "parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 947 "parser.yy"
                                           "key" 
                   )
# 947 "parser.yy"
                 : 'key_or_index));
# 3484 "parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 948 "parser.yy"
                                           "index" 
                   )
# 948 "parser.yy"
                 : 'key_or_index));
# 3494 "parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 952 "parser.yy"
                                               "" 
                   )
# 952 "parser.yy"
                 : 'opt_key_or_index));
# 3504 "parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'key_or_index)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 953 "parser.yy"
                                               _1 
                   )
# 953 "parser.yy"
                 : 'opt_key_or_index));
# 3515 "parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 956 "parser.yy"
                                               "keys" 
                   )
# 956 "parser.yy"
                 : 'keys_or_index));
# 3525 "parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 957 "parser.yy"
                                               "index" 
                   )
# 957 "parser.yy"
                 : 'keys_or_index));
# 3535 "parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 958 "parser.yy"
                                               "indexes" 
                   )
# 958 "parser.yy"
                 : 'keys_or_index));
# 3545 "parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 961 "parser.yy"
                                              "" 
                   )
# 961 "parser.yy"
                 : 'opt_unique));
# 3555 "parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 962 "parser.yy"
                                              "unique" 
                   )
# 962 "parser.yy"
                 : 'opt_unique));
# 3565 "parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 971 "parser.yy"
                                               MbSqlAbSyn.Expr.Temp 
                   )
# 971 "parser.yy"
                 : 'set_type));
# 3575 "parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'expr)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 976 "parser.yy"
                                                               [_1] 
                   )
# 976 "parser.yy"
                 : 'expr_list));
# 3586 "parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'expr_list)) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : 'expr)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 977 "parser.yy"
                                                               _1 @ [_3] 
                   )
# 977 "parser.yy"
                 : 'expr_list));
# 3598 "parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'expr)) in
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : 'op_or)) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : 'expr)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 980 "parser.yy"
                                                            
                                 MbSqlAbSyn.Expr.Binary ("or",_1,_3)
                                 
                   )
# 980 "parser.yy"
                 : 'expr));
# 3613 "parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'expr)) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : 'expr)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 983 "parser.yy"
                                                              
                                 MbSqlAbSyn.Expr.Binary ("xor",_1,_3)
                                 
                   )
# 983 "parser.yy"
                 : 'expr));
# 3627 "parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'expr)) in
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : 'op_and)) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : 'expr)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 986 "parser.yy"
                                                              
                                 MbSqlAbSyn.Expr.Binary ("and",_1,_3)
                                 
                   )
# 986 "parser.yy"
                 : 'expr));
# 3642 "parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : 'expr)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 989 "parser.yy"
                                                         
                                 MbSqlAbSyn.Expr.Unary ("not",_2)
                                 
                   )
# 989 "parser.yy"
                 : 'expr));
# 3655 "parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'bool_pri)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 992 "parser.yy"
                                                                      
                                 MbSqlAbSyn.Expr.Binary ("is",_1,MbSqlAbSyn.Expr.NodeTyped ("bool","true"))
                                 
                   )
# 992 "parser.yy"
                 : 'expr));
# 3668 "parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'bool_pri)) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : 'op_not)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 995 "parser.yy"
                                                                             
                                 //Do it non reversible - that is cannot map back since 
                                 //not true == false
                                 MbSqlAbSyn.Expr.Binary ("is",_1,MbSqlAbSyn.Expr.NodeTyped ("bool","false"))
                                 
                   )
# 995 "parser.yy"
                 : 'expr));
# 3684 "parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'bool_pri)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 1000 "parser.yy"
                                                                       
                                 MbSqlAbSyn.Expr.Binary ("is",_1,MbSqlAbSyn.Expr.NodeTyped ("bool","false"))
                                 
                   )
# 1000 "parser.yy"
                 : 'expr));
# 3697 "parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'bool_pri)) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : 'op_not)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 1003 "parser.yy"
                                                                              
                                 //Do it non reversible - that is cannot map back. As above
                                 MbSqlAbSyn.Expr.Binary ("is",_1,MbSqlAbSyn.Expr.NodeTyped ("bool","true"))
                                 
                   )
# 1003 "parser.yy"
                 : 'expr));
# 3712 "parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'bool_pri)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 1007 "parser.yy"
                                                                         
                                 //I cant quite figure what unknown is. So treat as key
                                 MbSqlAbSyn.Expr.Binary ("is",_1,MbSqlAbSyn.Expr.NodeTyped ("key","unknown"))
                                 
                   )
# 1007 "parser.yy"
                 : 'expr));
# 3726 "parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'bool_pri)) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : 'op_not)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 1011 "parser.yy"
                                                                                
                                 //The negation of unknown here just become known
                                 MbSqlAbSyn.Expr.Binary ("is",_1,MbSqlAbSyn.Expr.NodeTyped ("key","known"))
                                 
                   )
# 1011 "parser.yy"
                 : 'expr));
# 3741 "parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'bool_pri)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 1015 "parser.yy"
                                         
                                 _1
                                 
                   )
# 1015 "parser.yy"
                 : 'expr));
# 3754 "parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'bool_pri)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 1020 "parser.yy"
                                                                      
                                 MbSqlAbSyn.Expr.Binary ("is",_1,MbSqlAbSyn.Expr.NodeTyped ("key","null"))
                                 
                   )
# 1020 "parser.yy"
                 : 'bool_pri));
# 3767 "parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'bool_pri)) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : 'op_not)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 1023 "parser.yy"
                                                                             
                                 //Done the long way
                                 MbSqlAbSyn.Expr.Binary ("is",_1,MbSqlAbSyn.Expr.Unary ("not",MbSqlAbSyn.Expr.NodeTyped("key","null")))
                               
                   )
# 1023 "parser.yy"
                 : 'bool_pri));
# 3782 "parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'bool_pri)) in
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : 'comp_op)) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : 'predicate)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 1027 "parser.yy"
                                                           
                                 MbSqlAbSyn.Expr.Binary (_2,_1,_3)
                                 
                   )
# 1027 "parser.yy"
                 : 'bool_pri));
# 3797 "parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'predicate)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 1031 "parser.yy"
                                          
                                 _1
                                 
                   )
# 1031 "parser.yy"
                 : 'bool_pri));
# 3810 "parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'bit_expr)) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : 'table_subquery)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 1036 "parser.yy"
                                                              
                                 MbSqlAbSyn.Expr.Binary ("in",_1,MbSqlAbSyn.Expr.SubQ _3)
                                 
                   )
# 1036 "parser.yy"
                 : 'predicate));
# 3824 "parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'bit_expr)) in
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : 'op_not)) in
            let _4 = (let data = parseState.GetInput(4) in (Microsoft.FSharp.Core.Operators.unbox data : 'table_subquery)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 1039 "parser.yy"
                                                                     
                                 MbSqlAbSyn.Expr.Binary ("in",_1,MbSqlAbSyn.Expr.SubQ _4)
                                 
                   )
# 1039 "parser.yy"
                 : 'predicate));
# 3839 "parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'bit_expr)) in
            let _4 = (let data = parseState.GetInput(4) in (Microsoft.FSharp.Core.Operators.unbox data : 'expr)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 1042 "parser.yy"
                                                                      
                                 MbSqlAbSyn.Expr.Binary ("in",_1,_4)
                                 
                   )
# 1042 "parser.yy"
                 : 'predicate));
# 3853 "parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'bit_expr)) in
            let _4 = (let data = parseState.GetInput(4) in (Microsoft.FSharp.Core.Operators.unbox data : 'expr)) in
            let _6 = (let data = parseState.GetInput(6) in (Microsoft.FSharp.Core.Operators.unbox data : 'expr_list)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 1045 "parser.yy"
                                                                                            
                                 MbSqlAbSyn.Expr.Temp
                                 
                   )
# 1045 "parser.yy"
                 : 'predicate));
# 3868 "parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'bit_expr)) in
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : 'op_not)) in
            let _5 = (let data = parseState.GetInput(5) in (Microsoft.FSharp.Core.Operators.unbox data : 'expr)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 1048 "parser.yy"
                                                                             
                                 MbSqlAbSyn.Expr.Unary ("not",MbSqlAbSyn.Expr.Binary ("in",_1,_5))
                                 
                   )
# 1048 "parser.yy"
                 : 'predicate));
# 3883 "parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'bit_expr)) in
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : 'op_not)) in
            let _5 = (let data = parseState.GetInput(5) in (Microsoft.FSharp.Core.Operators.unbox data : 'expr)) in
            let _7 = (let data = parseState.GetInput(7) in (Microsoft.FSharp.Core.Operators.unbox data : 'expr_list)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 1051 "parser.yy"
                                                                                                   
                                 MbSqlAbSyn.Expr.Temp
                                 
                   )
# 1051 "parser.yy"
                 : 'predicate));
# 3899 "parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'bit_expr)) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : 'bit_expr)) in
            let _5 = (let data = parseState.GetInput(5) in (Microsoft.FSharp.Core.Operators.unbox data : 'predicate)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 1054 "parser.yy"
                                                                              
                                 MbSqlAbSyn.Expr.Temp
                                 
                   )
# 1054 "parser.yy"
                 : 'predicate));
# 3914 "parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'bit_expr)) in
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : 'op_not)) in
            let _4 = (let data = parseState.GetInput(4) in (Microsoft.FSharp.Core.Operators.unbox data : 'bit_expr)) in
            let _6 = (let data = parseState.GetInput(6) in (Microsoft.FSharp.Core.Operators.unbox data : 'predicate)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 1057 "parser.yy"
                                                                                     
                                 MbSqlAbSyn.Expr.Temp
                                 
                   )
# 1057 "parser.yy"
                 : 'predicate));
# 3930 "parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'bit_expr)) in
            let _4 = (let data = parseState.GetInput(4) in (Microsoft.FSharp.Core.Operators.unbox data : 'bit_expr)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 1060 "parser.yy"
                                                                    
                                 MbSqlAbSyn.Expr.Temp
                                 
                   )
# 1060 "parser.yy"
                 : 'predicate));
# 3944 "parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'bit_expr)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 1067 "parser.yy"
                                         
                                 _1
                                 
                   )
# 1067 "parser.yy"
                 : 'predicate));
# 3957 "parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'bit_expr)) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : 'bit_expr)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 1073 "parser.yy"
                                                                      
                                 MbSqlAbSyn.Expr.Binary ("|",_1,_3)
                                 
                   )
# 1073 "parser.yy"
                 : 'bit_expr));
# 3971 "parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'bit_expr)) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : 'bit_expr)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 1076 "parser.yy"
                                                                        
                                MbSqlAbSyn.Expr.Binary ("&",_1,_3)
                                 
                   )
# 1076 "parser.yy"
                 : 'bit_expr));
# 3985 "parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'bit_expr)) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : 'bit_expr)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 1079 "parser.yy"
                                                                                    
                                MbSqlAbSyn.Expr.Binary ("<<",_1,_3)
                                 
                   )
# 1079 "parser.yy"
                 : 'bit_expr));
# 3999 "parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'bit_expr)) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : 'bit_expr)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 1082 "parser.yy"
                                                                                      
                                MbSqlAbSyn.Expr.Binary (">>",_1,_3)
                                 
                   )
# 1082 "parser.yy"
                 : 'bit_expr));
# 4013 "parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'bit_expr)) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : 'bit_expr)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 1085 "parser.yy"
                                                                        
                                 MbSqlAbSyn.Expr.Binary ("+",_1,_3)
                                 
                   )
# 1085 "parser.yy"
                 : 'bit_expr));
# 4027 "parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'bit_expr)) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : 'bit_expr)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 1088 "parser.yy"
                                                                          
                                 MbSqlAbSyn.Expr.Binary ("-",_1,_3)
                                 
                   )
# 1088 "parser.yy"
                 : 'bit_expr));
# 4041 "parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'bit_expr)) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : 'bit_expr)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 1093 "parser.yy"
                                                                          
                                 MbSqlAbSyn.Expr.Binary ("*",_1,_3)
                                 
                   )
# 1093 "parser.yy"
                 : 'bit_expr));
# 4055 "parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'bit_expr)) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : 'bit_expr)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 1096 "parser.yy"
                                                                      
                                 MbSqlAbSyn.Expr.Binary ("/",_1,_3)
                                 
                   )
# 1096 "parser.yy"
                 : 'bit_expr));
# 4069 "parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'bit_expr)) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : 'bit_expr)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 1099 "parser.yy"
                                                                        
                                 MbSqlAbSyn.Expr.Binary ("%",_1,_3)
                                 
                   )
# 1099 "parser.yy"
                 : 'bit_expr));
# 4083 "parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'bit_expr)) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : 'bit_expr)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 1102 "parser.yy"
                                                                              
                                 MbSqlAbSyn.Expr.Binary ("/",_1,_3)
                                 
                   )
# 1102 "parser.yy"
                 : 'bit_expr));
# 4097 "parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'bit_expr)) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : 'bit_expr)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 1105 "parser.yy"
                                                                          
                                 MbSqlAbSyn.Expr.Binary ("%",_1,_3)
                                 
                   )
# 1105 "parser.yy"
                 : 'bit_expr));
# 4111 "parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'bit_expr)) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : 'bit_expr)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 1108 "parser.yy"
                                                        
                                 MbSqlAbSyn.Expr.Binary ("^",_1,_3)
                                 
                   )
# 1108 "parser.yy"
                 : 'bit_expr));
# 4125 "parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'simple_expr)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 1111 "parser.yy"
                                            
                                 _1
                                 
                   )
# 1111 "parser.yy"
                 : 'bit_expr));
# 4138 "parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 1116 "parser.yy"
                                              
                   )
# 1116 "parser.yy"
                 : 'op_or));
# 4148 "parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 1117 "parser.yy"
                                              
                   )
# 1117 "parser.yy"
                 : 'op_or));
# 4158 "parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 1121 "parser.yy"
                                              
                   )
# 1121 "parser.yy"
                 : 'op_and));
# 4168 "parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 1122 "parser.yy"
                                              
                   )
# 1122 "parser.yy"
                 : 'op_and));
# 4178 "parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 1126 "parser.yy"
                                              
                   )
# 1126 "parser.yy"
                 : 'op_not));
# 4188 "parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 1127 "parser.yy"
                                              
                   )
# 1127 "parser.yy"
                 : 'op_not));
# 4198 "parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 1131 "parser.yy"
                                           "eq" 
                   )
# 1131 "parser.yy"
                 : 'comp_op));
# 4208 "parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 1132 "parser.yy"
                                           "eq" 
                   )
# 1132 "parser.yy"
                 : 'comp_op));
# 4218 "parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 1133 "parser.yy"
                                           "geq" 
                   )
# 1133 "parser.yy"
                 : 'comp_op));
# 4228 "parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 1134 "parser.yy"
                                           "gt" 
                   )
# 1134 "parser.yy"
                 : 'comp_op));
# 4238 "parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 1135 "parser.yy"
                                           "leq" 
                   )
# 1135 "parser.yy"
                 : 'comp_op));
# 4248 "parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 1136 "parser.yy"
                                           "lt" 
                   )
# 1136 "parser.yy"
                 : 'comp_op));
# 4258 "parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 1137 "parser.yy"
                                           "neq" 
                   )
# 1137 "parser.yy"
                 : 'comp_op));
# 4268 "parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 1141 "parser.yy"
                                           "" 
                   )
# 1141 "parser.yy"
                 : 'all_or_any));
# 4278 "parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 1142 "parser.yy"
                                           "" 
                   )
# 1142 "parser.yy"
                 : 'all_or_any));
# 4288 "parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'simple_ident)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 1146 "parser.yy"
                                                               _1 
                   )
# 1146 "parser.yy"
                 : 'simple_expr));
# 4299 "parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'function_call_keyword)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 1147 "parser.yy"
                                                               _1 
                   )
# 1147 "parser.yy"
                 : 'simple_expr));
# 4310 "parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'function_call_nonkeyword)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 1148 "parser.yy"
                                                               _1 
                   )
# 1148 "parser.yy"
                 : 'simple_expr));
# 4321 "parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'function_call_generic)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 1149 "parser.yy"
                                                               _1 
                   )
# 1149 "parser.yy"
                 : 'simple_expr));
# 4332 "parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'literal)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 1152 "parser.yy"
                                                               _1 
                   )
# 1152 "parser.yy"
                 : 'simple_expr));
# 4343 "parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : 'simple_expr)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 1158 "parser.yy"
                                                                 
                                 MbSqlAbSyn.Expr.Unary ("+",_2)
                                 
                   )
# 1158 "parser.yy"
                 : 'simple_expr));
# 4356 "parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : 'simple_expr)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 1161 "parser.yy"
                                                                  
                                 MbSqlAbSyn.Expr.Unary ("-",_2)
                                 
                   )
# 1161 "parser.yy"
                 : 'simple_expr));
# 4369 "parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : 'simple_expr)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 1164 "parser.yy"
                                                                  
                                 MbSqlAbSyn.Expr.Unary ("~",_2)
                                 
                   )
# 1164 "parser.yy"
                 : 'simple_expr));
# 4382 "parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : 'simple_expr)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 1167 "parser.yy"
                                                                 
                                 MbSqlAbSyn.Expr.Unary ("!",_2)
                                 
                   )
# 1167 "parser.yy"
                 : 'simple_expr));
# 4395 "parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'row_subquery)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 1170 "parser.yy"
                                             
                                 MbSqlAbSyn.Expr.SubQ _1
                                 
                   )
# 1170 "parser.yy"
                 : 'simple_expr));
# 4408 "parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : 'expr)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 1173 "parser.yy"
                                                       
                                 _2
                                 
                   )
# 1173 "parser.yy"
                 : 'simple_expr));
# 4421 "parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : 'expr)) in
            let _4 = (let data = parseState.GetInput(4) in (Microsoft.FSharp.Core.Operators.unbox data : 'expr_list)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 1176 "parser.yy"
                                                                             
                                 MbSqlAbSyn.Expr.ExprList ([_2] @ _4)
                                 
                   )
# 1176 "parser.yy"
                 : 'simple_expr));
# 4435 "parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'text_literal)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 1195 "parser.yy"
                                                       _1 
                   )
# 1195 "parser.yy"
                 : 'literal));
# 4446 "parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'num_literal)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 1196 "parser.yy"
                                                       _1 
                   )
# 1196 "parser.yy"
                 : 'literal));
# 4457 "parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 1198 "parser.yy"
                                         
                                 MbSqlAbSyn.Expr.NodeTyped ("keyword","null")
                                 
                   )
# 1198 "parser.yy"
                 : 'literal));
# 4469 "parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 1201 "parser.yy"
                                              
                                 MbSqlAbSyn.Expr.NodeTyped ("keyword","false")
                                 
                   )
# 1201 "parser.yy"
                 : 'literal));
# 4481 "parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 1204 "parser.yy"
                                         
                                 MbSqlAbSyn.Expr.NodeTyped ("keyword","true")
                                 
                   )
# 1204 "parser.yy"
                 : 'literal));
# 4493 "parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : string)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 1207 "parser.yy"
                                        
                                 MbSqlAbSyn.Expr.Temp
                                 
                   )
# 1207 "parser.yy"
                 : 'literal));
# 4506 "parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : string)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 1210 "parser.yy"
                                        
                                 MbSqlAbSyn.Expr.Temp
                                 
                   )
# 1210 "parser.yy"
                 : 'literal));
# 4519 "parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : string)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 1218 "parser.yy"
                                           
                                 MbSqlAbSyn.Expr.NodeTyped ("string",_1)
                                 
                   )
# 1218 "parser.yy"
                 : 'text_literal));
# 4532 "parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : string)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 1229 "parser.yy"
                                           
                                 //check format!
                                 _1
                                 
                   )
# 1229 "parser.yy"
                 : 'text_string_sys));
# 4546 "parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : string)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 1235 "parser.yy"
                                                   MbSqlAbSyn.Expr.NodeTyped ("num",_1) 
                   )
# 1235 "parser.yy"
                 : 'num_literal));
# 4557 "parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : string)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 1239 "parser.yy"
                                                   MbSqlAbSyn.Expr.NodeTyped ("float",_1)
                   )
# 1239 "parser.yy"
                 : 'num_literal));
# 4568 "parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : 'expr_list)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 1245 "parser.yy"
                                                                     
                                 let id = MbSqlAbSyn.Expr.NodeTyped ("id","date")
                                 MbSqlAbSyn.Expr.FunctionCall (id,MbSqlAbSyn.Expr.ExprList _3)
                                 
                   )
# 1245 "parser.yy"
                 : 'function_call_keyword));
# 4582 "parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : 'expr)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 1251 "parser.yy"
                                                                 
                                 let id = MbSqlAbSyn.Expr.NodeTyped ("id","now")
                                 MbSqlAbSyn.Expr.FunctionCall (id,_3)
                                 
                   )
# 1251 "parser.yy"
                 : 'function_call_nonkeyword));
# 4596 "parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'ident_sys)) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : 'opt_udf_expr_list)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 1257 "parser.yy"
                                                                              
                                 MbSqlAbSyn.Expr.FunctionCall (_1,_3)
                                 
                   )
# 1257 "parser.yy"
                 : 'function_call_generic));
# 4610 "parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'ident)) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : 'ident)) in
            let _5 = (let data = parseState.GetInput(5) in (Microsoft.FSharp.Core.Operators.unbox data : 'opt_expr_list)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 1260 "parser.yy"
                                                                                   
                                 let id_list = MbSqlAbSyn.Expr.ExprListTyped ("id",[_1;_3])
                                 MbSqlAbSyn.Expr.FunctionCall (id_list,_5)
                                 
                   )
# 1260 "parser.yy"
                 : 'function_call_generic));
# 4626 "parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 1266 "parser.yy"
                                               MbSqlAbSyn.Expr.Empty 
                   )
# 1266 "parser.yy"
                 : 'opt_expr_list));
# 4636 "parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'expr_list)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 1267 "parser.yy"
                                               MbSqlAbSyn.Expr.ExprList _1 
                   )
# 1267 "parser.yy"
                 : 'opt_expr_list));
# 4647 "parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 1270 "parser.yy"
                                               MbSqlAbSyn.Expr.Null 
                   )
# 1270 "parser.yy"
                 : 'opt_udf_expr_list));
# 4657 "parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'udf_expr_list)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 1271 "parser.yy"
                                               MbSqlAbSyn.Expr.ExprList _1 
                   )
# 1271 "parser.yy"
                 : 'opt_udf_expr_list));
# 4668 "parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'udf_expr)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 1274 "parser.yy"
                                                                       [_1] 
                   )
# 1274 "parser.yy"
                 : 'udf_expr_list));
# 4679 "parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'udf_expr_list)) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : 'udf_expr)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 1275 "parser.yy"
                                                                       _1 @ [_3] 
                   )
# 1275 "parser.yy"
                 : 'udf_expr_list));
# 4691 "parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'expr)) in
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : 'select_alias)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 1279 "parser.yy"
                                                       MbSqlAbSyn.Expr.Binary ("as",_1,_2) 
                   )
# 1279 "parser.yy"
                 : 'udf_expr));
# 4703 "parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : string)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 1286 "parser.yy"
                                               MbSqlAbSyn.Expr.NodeTyped ("id",_1) 
                   )
# 1286 "parser.yy"
                 : 'ident_sys));
# 4714 "parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : string)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 1287 "parser.yy"
                                               MbSqlAbSyn.Expr.NodeTyped ("id",_1) 
                   )
# 1287 "parser.yy"
                 : 'ident_sys));
# 4725 "parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : string)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 1292 "parser.yy"
                                 
                             MbSqlAbSyn.Expr.NodeTyped ("id",_1)
                             
                   )
# 1292 "parser.yy"
                 : 'ident));
# 4738 "parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'ident)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 1296 "parser.yy"
                                                   _1 
                   )
# 1296 "parser.yy"
                 : 'simple_ident));
# 4749 "parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'simple_ident_q)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 1297 "parser.yy"
                                                   _1 
                   )
# 1297 "parser.yy"
                 : 'simple_ident));
# 4760 "parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'ident)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 1300 "parser.yy"
                                                   MbSqlAbSyn.Expr.Temp 
                   )
# 1300 "parser.yy"
                 : 'simple_ident_nospvar));
# 4771 "parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'simple_ident_q)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 1301 "parser.yy"
                                                   MbSqlAbSyn.Expr.Temp 
                   )
# 1301 "parser.yy"
                 : 'simple_ident_nospvar));
# 4782 "parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'ident)) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : 'ident)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 1304 "parser.yy"
                                                   
                                 MbSqlAbSyn.Expr.ExprList [_1;_3]
                                 
                   )
# 1304 "parser.yy"
                 : 'simple_ident_q));
# 4796 "parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'ident)) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : 'ident)) in
            let _5 = (let data = parseState.GetInput(5) in (Microsoft.FSharp.Core.Operators.unbox data : 'ident)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 1307 "parser.yy"
                                                                
                                 MbSqlAbSyn.Expr.ExprList [_1;_3;_5]
                                 
                   )
# 1307 "parser.yy"
                 : 'simple_ident_q));
# 4811 "parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'ident)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 1312 "parser.yy"
                                                       MbSqlAbSyn.Expr.ExprList [_1] 
                   )
# 1312 "parser.yy"
                 : 'table_ident));
# 4822 "parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'ident)) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : 'ident)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 1313 "parser.yy"
                                                       MbSqlAbSyn.Expr.ExprList [_1;_3] 
                   )
# 1313 "parser.yy"
                 : 'table_ident));
# 4834 "parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'ident)) in
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : 'opt_wild)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 1316 "parser.yy"
                                                               MbSqlAbSyn.Expr.ExprList ([_1] @ _2) 
                   )
# 1316 "parser.yy"
                 : 'table_ident_opt_wild));
# 4846 "parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'ident)) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : 'ident)) in
            let _4 = (let data = parseState.GetInput(4) in (Microsoft.FSharp.Core.Operators.unbox data : 'opt_wild)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 1317 "parser.yy"
                                                               MbSqlAbSyn.Expr.ExprList ([_1;_3] @ _4)
                   )
# 1317 "parser.yy"
                 : 'table_ident_opt_wild));
# 4859 "parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 1320 "parser.yy"
                                                   [] 
                   )
# 1320 "parser.yy"
                 : 'opt_wild));
# 4869 "parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 1321 "parser.yy"
                                                   [MbSqlAbSyn.Expr.NodeTyped ("id","*")] 
                   )
# 1321 "parser.yy"
                 : 'opt_wild));
# 4879 "parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'ident)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 1324 "parser.yy"
                                                      
                                 MbSqlAbSyn.Expr.ExprList [_1;MbSqlAbSyn.Expr.NodeTyped ("id","*")]
                                 
                   )
# 1324 "parser.yy"
                 : 'table_wild));
# 4892 "parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'ident)) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : 'ident)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 1327 "parser.yy"
                                                                   
                                 MbSqlAbSyn.Expr.ExprList [_1;_3;MbSqlAbSyn.Expr.NodeTyped ("id","*")]
                                 
                   )
# 1327 "parser.yy"
                 : 'table_wild));
|]
# 4907 "parser.fs"
let tables () : Microsoft.FSharp.Text.Parsing.Tables<_> = 
  { reductions= _fsyacc_reductions ();
    endOfInputTag = _fsyacc_endOfInputTag;
    tagOfToken = tagOfToken;
    dataOfToken = _fsyacc_dataOfToken; 
    actionTableElements = _fsyacc_actionTableElements;
    actionTableRowOffsets = _fsyacc_actionTableRowOffsets;
    stateToProdIdxsTableElements = _fsyacc_stateToProdIdxsTableElements;
    stateToProdIdxsTableRowOffsets = _fsyacc_stateToProdIdxsTableRowOffsets;
    reductionSymbolCounts = _fsyacc_reductionSymbolCounts;
    immediateActions = _fsyacc_immediateActions;
    gotos = _fsyacc_gotos;
    sparseGotoTableRowOffsets = _fsyacc_sparseGotoTableRowOffsets;
    tagOfErrorTerminal = _fsyacc_tagOfErrorTerminal;
    parseError = (fun (ctxt:Microsoft.FSharp.Text.Parsing.ParseErrorContext<_>) -> 
                              match parse_error_rich with 
                              | Some f -> f ctxt
                              | None -> parse_error ctxt.Message);
    numTerminals = 116;
    productionToNonTerminalTable = _fsyacc_productionToNonTerminalTable  }
let engine lexer lexbuf startState = (tables ()).Interpret(lexer, lexbuf, startState)
let start_entry lexer lexbuf : MbSqlAbSyn.Qs list =
    Microsoft.FSharp.Core.Operators.unbox ((tables ()).Interpret(lexer, lexbuf, 0))
