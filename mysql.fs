// Implementation file for parser generated by fsyacc
module Parser
#nowarn "64";; // turn off warnings that type variables used in production annotations are instantiated to concrete type
open Microsoft.FSharp.Text.Lexing
open Microsoft.FSharp.Text.Parsing.ParseHelpers
# 1 "mysql.yy"

//AbSyn
module AbSyn =
    type Expr =
        | Binary of string * Expr * Expr
        | Unary of string * Expr
        | Node of string
        | NodeType of string * string
        | Null
        | Temp
    type Q_Select =
        | SelectNull
        | SelectOptions of Option<string>
        | SelectItems of (Expr * Expr) list
    type Qs =
        | Select of Q_Select list

# 24 "mysql.fs"
// This type is the type of tokens accepted by the parser
type token = 
  | VAL_UNKNOWN
  | VAL_FALSE
  | VAL_TRUE
  | VAL_NULL
  | VAL_STRING of (string)
  | VAL_BIN of (string)
  | VAL_HEX of (string)
  | VAL_NUM of (string)
  | VAL_ID of (string)
  | KEY_ANY
  | KEY_ALL
  | KEY_IS
  | KEY_AS
  | KEY_SELECT
  | OP_MOD_TXT
  | OP_DIV_TXT
  | OP_NOT_TXT
  | OP_OR_TXT
  | OP_AND_TXT
  | OP_IN
  | OP_BETWEEN
  | OP_SOUNDS
  | OP_BOR
  | OP_BAND
  | OP_UP
  | OP_SHIFT_LEFT
  | OP_SHIFT_RIGHT
  | OP_EQ
  | OP_EQ2
  | OP_NEQ
  | OP_NEQ2
  | OP_GT
  | OP_LT
  | OP_GEQ
  | OP_LEQ
  | OP_NOT
  | OP_OR
  | OP_XOR
  | OP_AND
  | OP_TILDE
  | OP_LIKE
  | OP_BANG
  | OP_PLUS
  | OP_MINUS
  | OP_DIV
  | OP_TIMES
  | OP_PERC
  | OP_DOT
  | PAR_LPAR
  | PAR_RPAR
  | PAR_LRBACE
  | PAR_RBRACE
  | DELIM_SCOLON
  | DELIM_COMMA
  | END_OF_INPUT
// This type is used to give symbolic names to token indexes, useful for error messages
type tokenId = 
    | TOKEN_VAL_UNKNOWN
    | TOKEN_VAL_FALSE
    | TOKEN_VAL_TRUE
    | TOKEN_VAL_NULL
    | TOKEN_VAL_STRING
    | TOKEN_VAL_BIN
    | TOKEN_VAL_HEX
    | TOKEN_VAL_NUM
    | TOKEN_VAL_ID
    | TOKEN_KEY_ANY
    | TOKEN_KEY_ALL
    | TOKEN_KEY_IS
    | TOKEN_KEY_AS
    | TOKEN_KEY_SELECT
    | TOKEN_OP_MOD_TXT
    | TOKEN_OP_DIV_TXT
    | TOKEN_OP_NOT_TXT
    | TOKEN_OP_OR_TXT
    | TOKEN_OP_AND_TXT
    | TOKEN_OP_IN
    | TOKEN_OP_BETWEEN
    | TOKEN_OP_SOUNDS
    | TOKEN_OP_BOR
    | TOKEN_OP_BAND
    | TOKEN_OP_UP
    | TOKEN_OP_SHIFT_LEFT
    | TOKEN_OP_SHIFT_RIGHT
    | TOKEN_OP_EQ
    | TOKEN_OP_EQ2
    | TOKEN_OP_NEQ
    | TOKEN_OP_NEQ2
    | TOKEN_OP_GT
    | TOKEN_OP_LT
    | TOKEN_OP_GEQ
    | TOKEN_OP_LEQ
    | TOKEN_OP_NOT
    | TOKEN_OP_OR
    | TOKEN_OP_XOR
    | TOKEN_OP_AND
    | TOKEN_OP_TILDE
    | TOKEN_OP_LIKE
    | TOKEN_OP_BANG
    | TOKEN_OP_PLUS
    | TOKEN_OP_MINUS
    | TOKEN_OP_DIV
    | TOKEN_OP_TIMES
    | TOKEN_OP_PERC
    | TOKEN_OP_DOT
    | TOKEN_PAR_LPAR
    | TOKEN_PAR_RPAR
    | TOKEN_PAR_LRBACE
    | TOKEN_PAR_RBRACE
    | TOKEN_DELIM_SCOLON
    | TOKEN_DELIM_COMMA
    | TOKEN_END_OF_INPUT
    | TOKEN_end_of_input
    | TOKEN_error
// This type is used to give symbolic names to token indexes, useful for error messages
type nonTerminalId = 
    | NONTERM__startstart_entry
    | NONTERM_start_entry
    | NONTERM_sql_statement
    | NONTERM_opt_end_of_input
    | NONTERM_simple_statement_or_begin
    | NONTERM_simple_statement
    | NONTERM_select_stmt
    | NONTERM_query_expression
    | NONTERM_query_expression_body
    | NONTERM_query_primary
    | NONTERM_query_specification
    | NONTERM_select_options
    | NONTERM_select_item_list
    | NONTERM_select_item
    | NONTERM_select_alias
    | NONTERM_expr_list
    | NONTERM_expr
    | NONTERM_bool_pri
    | NONTERM_predicate
    | NONTERM_bit_expr
    | NONTERM_op_or
    | NONTERM_op_and
    | NONTERM_not
    | NONTERM_comp_op
    | NONTERM_all_or_any
    | NONTERM_simple_expr
    | NONTERM_literal
    | NONTERM_text_literal
    | NONTERM_num_literal
    | NONTERM_ident
    | NONTERM_simple_ident
    | NONTERM_simple_ident_nospvar
    | NONTERM_simple_ident_q
    | NONTERM_table_wild

// This function maps tokens to integer indexes
let tagOfToken (t:token) = 
  match t with
  | VAL_UNKNOWN  -> 0 
  | VAL_FALSE  -> 1 
  | VAL_TRUE  -> 2 
  | VAL_NULL  -> 3 
  | VAL_STRING _ -> 4 
  | VAL_BIN _ -> 5 
  | VAL_HEX _ -> 6 
  | VAL_NUM _ -> 7 
  | VAL_ID _ -> 8 
  | KEY_ANY  -> 9 
  | KEY_ALL  -> 10 
  | KEY_IS  -> 11 
  | KEY_AS  -> 12 
  | KEY_SELECT  -> 13 
  | OP_MOD_TXT  -> 14 
  | OP_DIV_TXT  -> 15 
  | OP_NOT_TXT  -> 16 
  | OP_OR_TXT  -> 17 
  | OP_AND_TXT  -> 18 
  | OP_IN  -> 19 
  | OP_BETWEEN  -> 20 
  | OP_SOUNDS  -> 21 
  | OP_BOR  -> 22 
  | OP_BAND  -> 23 
  | OP_UP  -> 24 
  | OP_SHIFT_LEFT  -> 25 
  | OP_SHIFT_RIGHT  -> 26 
  | OP_EQ  -> 27 
  | OP_EQ2  -> 28 
  | OP_NEQ  -> 29 
  | OP_NEQ2  -> 30 
  | OP_GT  -> 31 
  | OP_LT  -> 32 
  | OP_GEQ  -> 33 
  | OP_LEQ  -> 34 
  | OP_NOT  -> 35 
  | OP_OR  -> 36 
  | OP_XOR  -> 37 
  | OP_AND  -> 38 
  | OP_TILDE  -> 39 
  | OP_LIKE  -> 40 
  | OP_BANG  -> 41 
  | OP_PLUS  -> 42 
  | OP_MINUS  -> 43 
  | OP_DIV  -> 44 
  | OP_TIMES  -> 45 
  | OP_PERC  -> 46 
  | OP_DOT  -> 47 
  | PAR_LPAR  -> 48 
  | PAR_RPAR  -> 49 
  | PAR_LRBACE  -> 50 
  | PAR_RBRACE  -> 51 
  | DELIM_SCOLON  -> 52 
  | DELIM_COMMA  -> 53 
  | END_OF_INPUT  -> 54 

// This function maps integer indexes to symbolic token ids
let tokenTagToTokenId (tokenIdx:int) = 
  match tokenIdx with
  | 0 -> TOKEN_VAL_UNKNOWN 
  | 1 -> TOKEN_VAL_FALSE 
  | 2 -> TOKEN_VAL_TRUE 
  | 3 -> TOKEN_VAL_NULL 
  | 4 -> TOKEN_VAL_STRING 
  | 5 -> TOKEN_VAL_BIN 
  | 6 -> TOKEN_VAL_HEX 
  | 7 -> TOKEN_VAL_NUM 
  | 8 -> TOKEN_VAL_ID 
  | 9 -> TOKEN_KEY_ANY 
  | 10 -> TOKEN_KEY_ALL 
  | 11 -> TOKEN_KEY_IS 
  | 12 -> TOKEN_KEY_AS 
  | 13 -> TOKEN_KEY_SELECT 
  | 14 -> TOKEN_OP_MOD_TXT 
  | 15 -> TOKEN_OP_DIV_TXT 
  | 16 -> TOKEN_OP_NOT_TXT 
  | 17 -> TOKEN_OP_OR_TXT 
  | 18 -> TOKEN_OP_AND_TXT 
  | 19 -> TOKEN_OP_IN 
  | 20 -> TOKEN_OP_BETWEEN 
  | 21 -> TOKEN_OP_SOUNDS 
  | 22 -> TOKEN_OP_BOR 
  | 23 -> TOKEN_OP_BAND 
  | 24 -> TOKEN_OP_UP 
  | 25 -> TOKEN_OP_SHIFT_LEFT 
  | 26 -> TOKEN_OP_SHIFT_RIGHT 
  | 27 -> TOKEN_OP_EQ 
  | 28 -> TOKEN_OP_EQ2 
  | 29 -> TOKEN_OP_NEQ 
  | 30 -> TOKEN_OP_NEQ2 
  | 31 -> TOKEN_OP_GT 
  | 32 -> TOKEN_OP_LT 
  | 33 -> TOKEN_OP_GEQ 
  | 34 -> TOKEN_OP_LEQ 
  | 35 -> TOKEN_OP_NOT 
  | 36 -> TOKEN_OP_OR 
  | 37 -> TOKEN_OP_XOR 
  | 38 -> TOKEN_OP_AND 
  | 39 -> TOKEN_OP_TILDE 
  | 40 -> TOKEN_OP_LIKE 
  | 41 -> TOKEN_OP_BANG 
  | 42 -> TOKEN_OP_PLUS 
  | 43 -> TOKEN_OP_MINUS 
  | 44 -> TOKEN_OP_DIV 
  | 45 -> TOKEN_OP_TIMES 
  | 46 -> TOKEN_OP_PERC 
  | 47 -> TOKEN_OP_DOT 
  | 48 -> TOKEN_PAR_LPAR 
  | 49 -> TOKEN_PAR_RPAR 
  | 50 -> TOKEN_PAR_LRBACE 
  | 51 -> TOKEN_PAR_RBRACE 
  | 52 -> TOKEN_DELIM_SCOLON 
  | 53 -> TOKEN_DELIM_COMMA 
  | 54 -> TOKEN_END_OF_INPUT 
  | 57 -> TOKEN_end_of_input
  | 55 -> TOKEN_error
  | _ -> failwith "tokenTagToTokenId: bad token"

/// This function maps production indexes returned in syntax errors to strings representing the non terminal that would be produced by that production
let prodIdxToNonTerminal (prodIdx:int) = 
  match prodIdx with
    | 0 -> NONTERM__startstart_entry 
    | 1 -> NONTERM_start_entry 
    | 2 -> NONTERM_sql_statement 
    | 3 -> NONTERM_sql_statement 
    | 4 -> NONTERM_sql_statement 
    | 5 -> NONTERM_opt_end_of_input 
    | 6 -> NONTERM_opt_end_of_input 
    | 7 -> NONTERM_simple_statement_or_begin 
    | 8 -> NONTERM_simple_statement 
    | 9 -> NONTERM_select_stmt 
    | 10 -> NONTERM_query_expression 
    | 11 -> NONTERM_query_expression_body 
    | 12 -> NONTERM_query_primary 
    | 13 -> NONTERM_query_specification 
    | 14 -> NONTERM_select_options 
    | 15 -> NONTERM_select_item_list 
    | 16 -> NONTERM_select_item_list 
    | 17 -> NONTERM_select_item_list 
    | 18 -> NONTERM_select_item 
    | 19 -> NONTERM_select_item 
    | 20 -> NONTERM_select_alias 
    | 21 -> NONTERM_select_alias 
    | 22 -> NONTERM_select_alias 
    | 23 -> NONTERM_select_alias 
    | 24 -> NONTERM_select_alias 
    | 25 -> NONTERM_expr_list 
    | 26 -> NONTERM_expr_list 
    | 27 -> NONTERM_expr 
    | 28 -> NONTERM_expr 
    | 29 -> NONTERM_expr 
    | 30 -> NONTERM_expr 
    | 31 -> NONTERM_expr 
    | 32 -> NONTERM_expr 
    | 33 -> NONTERM_expr 
    | 34 -> NONTERM_expr 
    | 35 -> NONTERM_expr 
    | 36 -> NONTERM_expr 
    | 37 -> NONTERM_expr 
    | 38 -> NONTERM_bool_pri 
    | 39 -> NONTERM_bool_pri 
    | 40 -> NONTERM_bool_pri 
    | 41 -> NONTERM_bool_pri 
    | 42 -> NONTERM_predicate 
    | 43 -> NONTERM_predicate 
    | 44 -> NONTERM_predicate 
    | 45 -> NONTERM_predicate 
    | 46 -> NONTERM_predicate 
    | 47 -> NONTERM_predicate 
    | 48 -> NONTERM_predicate 
    | 49 -> NONTERM_predicate 
    | 50 -> NONTERM_bit_expr 
    | 51 -> NONTERM_bit_expr 
    | 52 -> NONTERM_bit_expr 
    | 53 -> NONTERM_bit_expr 
    | 54 -> NONTERM_bit_expr 
    | 55 -> NONTERM_bit_expr 
    | 56 -> NONTERM_bit_expr 
    | 57 -> NONTERM_bit_expr 
    | 58 -> NONTERM_bit_expr 
    | 59 -> NONTERM_bit_expr 
    | 60 -> NONTERM_bit_expr 
    | 61 -> NONTERM_bit_expr 
    | 62 -> NONTERM_bit_expr 
    | 63 -> NONTERM_op_or 
    | 64 -> NONTERM_op_or 
    | 65 -> NONTERM_op_and 
    | 66 -> NONTERM_op_and 
    | 67 -> NONTERM_not 
    | 68 -> NONTERM_not 
    | 69 -> NONTERM_comp_op 
    | 70 -> NONTERM_comp_op 
    | 71 -> NONTERM_comp_op 
    | 72 -> NONTERM_comp_op 
    | 73 -> NONTERM_comp_op 
    | 74 -> NONTERM_comp_op 
    | 75 -> NONTERM_comp_op 
    | 76 -> NONTERM_all_or_any 
    | 77 -> NONTERM_all_or_any 
    | 78 -> NONTERM_simple_expr 
    | 79 -> NONTERM_simple_expr 
    | 80 -> NONTERM_simple_expr 
    | 81 -> NONTERM_simple_expr 
    | 82 -> NONTERM_simple_expr 
    | 83 -> NONTERM_simple_expr 
    | 84 -> NONTERM_literal 
    | 85 -> NONTERM_literal 
    | 86 -> NONTERM_literal 
    | 87 -> NONTERM_literal 
    | 88 -> NONTERM_literal 
    | 89 -> NONTERM_literal 
    | 90 -> NONTERM_literal 
    | 91 -> NONTERM_text_literal 
    | 92 -> NONTERM_num_literal 
    | 93 -> NONTERM_ident 
    | 94 -> NONTERM_simple_ident 
    | 95 -> NONTERM_simple_ident 
    | 96 -> NONTERM_simple_ident_nospvar 
    | 97 -> NONTERM_simple_ident_nospvar 
    | 98 -> NONTERM_simple_ident_q 
    | 99 -> NONTERM_simple_ident_q 
    | 100 -> NONTERM_table_wild 
    | 101 -> NONTERM_table_wild 
    | _ -> failwith "prodIdxToNonTerminal: bad production index"

let _fsyacc_endOfInputTag = 57 
let _fsyacc_tagOfErrorTerminal = 55

// This function gets the name of a token as a string
let token_to_string (t:token) = 
  match t with 
  | VAL_UNKNOWN  -> "VAL_UNKNOWN" 
  | VAL_FALSE  -> "VAL_FALSE" 
  | VAL_TRUE  -> "VAL_TRUE" 
  | VAL_NULL  -> "VAL_NULL" 
  | VAL_STRING _ -> "VAL_STRING" 
  | VAL_BIN _ -> "VAL_BIN" 
  | VAL_HEX _ -> "VAL_HEX" 
  | VAL_NUM _ -> "VAL_NUM" 
  | VAL_ID _ -> "VAL_ID" 
  | KEY_ANY  -> "KEY_ANY" 
  | KEY_ALL  -> "KEY_ALL" 
  | KEY_IS  -> "KEY_IS" 
  | KEY_AS  -> "KEY_AS" 
  | KEY_SELECT  -> "KEY_SELECT" 
  | OP_MOD_TXT  -> "OP_MOD_TXT" 
  | OP_DIV_TXT  -> "OP_DIV_TXT" 
  | OP_NOT_TXT  -> "OP_NOT_TXT" 
  | OP_OR_TXT  -> "OP_OR_TXT" 
  | OP_AND_TXT  -> "OP_AND_TXT" 
  | OP_IN  -> "OP_IN" 
  | OP_BETWEEN  -> "OP_BETWEEN" 
  | OP_SOUNDS  -> "OP_SOUNDS" 
  | OP_BOR  -> "OP_BOR" 
  | OP_BAND  -> "OP_BAND" 
  | OP_UP  -> "OP_UP" 
  | OP_SHIFT_LEFT  -> "OP_SHIFT_LEFT" 
  | OP_SHIFT_RIGHT  -> "OP_SHIFT_RIGHT" 
  | OP_EQ  -> "OP_EQ" 
  | OP_EQ2  -> "OP_EQ2" 
  | OP_NEQ  -> "OP_NEQ" 
  | OP_NEQ2  -> "OP_NEQ2" 
  | OP_GT  -> "OP_GT" 
  | OP_LT  -> "OP_LT" 
  | OP_GEQ  -> "OP_GEQ" 
  | OP_LEQ  -> "OP_LEQ" 
  | OP_NOT  -> "OP_NOT" 
  | OP_OR  -> "OP_OR" 
  | OP_XOR  -> "OP_XOR" 
  | OP_AND  -> "OP_AND" 
  | OP_TILDE  -> "OP_TILDE" 
  | OP_LIKE  -> "OP_LIKE" 
  | OP_BANG  -> "OP_BANG" 
  | OP_PLUS  -> "OP_PLUS" 
  | OP_MINUS  -> "OP_MINUS" 
  | OP_DIV  -> "OP_DIV" 
  | OP_TIMES  -> "OP_TIMES" 
  | OP_PERC  -> "OP_PERC" 
  | OP_DOT  -> "OP_DOT" 
  | PAR_LPAR  -> "PAR_LPAR" 
  | PAR_RPAR  -> "PAR_RPAR" 
  | PAR_LRBACE  -> "PAR_LRBACE" 
  | PAR_RBRACE  -> "PAR_RBRACE" 
  | DELIM_SCOLON  -> "DELIM_SCOLON" 
  | DELIM_COMMA  -> "DELIM_COMMA" 
  | END_OF_INPUT  -> "END_OF_INPUT" 

// This function gets the data carried by a token as an object
let _fsyacc_dataOfToken (t:token) = 
  match t with 
  | VAL_UNKNOWN  -> (null : System.Object) 
  | VAL_FALSE  -> (null : System.Object) 
  | VAL_TRUE  -> (null : System.Object) 
  | VAL_NULL  -> (null : System.Object) 
  | VAL_STRING _fsyacc_x -> Microsoft.FSharp.Core.Operators.box _fsyacc_x 
  | VAL_BIN _fsyacc_x -> Microsoft.FSharp.Core.Operators.box _fsyacc_x 
  | VAL_HEX _fsyacc_x -> Microsoft.FSharp.Core.Operators.box _fsyacc_x 
  | VAL_NUM _fsyacc_x -> Microsoft.FSharp.Core.Operators.box _fsyacc_x 
  | VAL_ID _fsyacc_x -> Microsoft.FSharp.Core.Operators.box _fsyacc_x 
  | KEY_ANY  -> (null : System.Object) 
  | KEY_ALL  -> (null : System.Object) 
  | KEY_IS  -> (null : System.Object) 
  | KEY_AS  -> (null : System.Object) 
  | KEY_SELECT  -> (null : System.Object) 
  | OP_MOD_TXT  -> (null : System.Object) 
  | OP_DIV_TXT  -> (null : System.Object) 
  | OP_NOT_TXT  -> (null : System.Object) 
  | OP_OR_TXT  -> (null : System.Object) 
  | OP_AND_TXT  -> (null : System.Object) 
  | OP_IN  -> (null : System.Object) 
  | OP_BETWEEN  -> (null : System.Object) 
  | OP_SOUNDS  -> (null : System.Object) 
  | OP_BOR  -> (null : System.Object) 
  | OP_BAND  -> (null : System.Object) 
  | OP_UP  -> (null : System.Object) 
  | OP_SHIFT_LEFT  -> (null : System.Object) 
  | OP_SHIFT_RIGHT  -> (null : System.Object) 
  | OP_EQ  -> (null : System.Object) 
  | OP_EQ2  -> (null : System.Object) 
  | OP_NEQ  -> (null : System.Object) 
  | OP_NEQ2  -> (null : System.Object) 
  | OP_GT  -> (null : System.Object) 
  | OP_LT  -> (null : System.Object) 
  | OP_GEQ  -> (null : System.Object) 
  | OP_LEQ  -> (null : System.Object) 
  | OP_NOT  -> (null : System.Object) 
  | OP_OR  -> (null : System.Object) 
  | OP_XOR  -> (null : System.Object) 
  | OP_AND  -> (null : System.Object) 
  | OP_TILDE  -> (null : System.Object) 
  | OP_LIKE  -> (null : System.Object) 
  | OP_BANG  -> (null : System.Object) 
  | OP_PLUS  -> (null : System.Object) 
  | OP_MINUS  -> (null : System.Object) 
  | OP_DIV  -> (null : System.Object) 
  | OP_TIMES  -> (null : System.Object) 
  | OP_PERC  -> (null : System.Object) 
  | OP_DOT  -> (null : System.Object) 
  | PAR_LPAR  -> (null : System.Object) 
  | PAR_RPAR  -> (null : System.Object) 
  | PAR_LRBACE  -> (null : System.Object) 
  | PAR_RBRACE  -> (null : System.Object) 
  | DELIM_SCOLON  -> (null : System.Object) 
  | DELIM_COMMA  -> (null : System.Object) 
  | END_OF_INPUT  -> (null : System.Object) 
let _fsyacc_gotos = [| 0us; 65535us; 1us; 65535us; 0us; 1us; 1us; 65535us; 0us; 2us; 1us; 65535us; 4us; 5us; 1us; 65535us; 0us; 4us; 1us; 65535us; 0us; 8us; 1us; 65535us; 0us; 9us; 1us; 65535us; 0us; 10us; 1us; 65535us; 0us; 11us; 1us; 65535us; 0us; 12us; 1us; 65535us; 0us; 13us; 1us; 65535us; 14us; 15us; 1us; 65535us; 15us; 16us; 2us; 65535us; 15us; 19us; 17us; 18us; 1us; 65535us; 22us; 23us; 2us; 65535us; 62us; 30us; 68us; 31us; 11us; 65535us; 15us; 22us; 17us; 22us; 32us; 33us; 40us; 34us; 41us; 35us; 42us; 36us; 43us; 37us; 60us; 38us; 62us; 29us; 66us; 39us; 68us; 29us; 11us; 65535us; 15us; 44us; 17us; 44us; 32us; 44us; 40us; 44us; 41us; 44us; 42us; 44us; 43us; 44us; 60us; 44us; 62us; 44us; 66us; 44us; 68us; 44us; 14us; 65535us; 15us; 57us; 17us; 57us; 32us; 57us; 40us; 57us; 41us; 57us; 42us; 57us; 43us; 57us; 55us; 56us; 60us; 57us; 62us; 57us; 66us; 57us; 68us; 57us; 72us; 73us; 76us; 77us; 29us; 65535us; 15us; 58us; 17us; 58us; 32us; 58us; 40us; 58us; 41us; 58us; 42us; 58us; 43us; 58us; 55us; 58us; 60us; 58us; 62us; 58us; 66us; 58us; 68us; 58us; 70us; 71us; 72us; 58us; 74us; 75us; 76us; 58us; 79us; 80us; 93us; 81us; 94us; 82us; 95us; 83us; 96us; 84us; 97us; 85us; 98us; 86us; 99us; 87us; 100us; 88us; 101us; 89us; 102us; 90us; 103us; 91us; 104us; 92us; 9us; 65535us; 22us; 40us; 29us; 40us; 33us; 40us; 34us; 40us; 35us; 40us; 36us; 40us; 37us; 40us; 38us; 40us; 39us; 40us; 9us; 65535us; 22us; 42us; 29us; 42us; 33us; 42us; 34us; 42us; 35us; 42us; 36us; 42us; 37us; 42us; 38us; 42us; 39us; 42us; 2us; 65535us; 45us; 47us; 58us; 64us; 1us; 65535us; 44us; 55us; 0us; 65535us; 33us; 65535us; 15us; 105us; 17us; 105us; 32us; 105us; 40us; 105us; 41us; 105us; 42us; 105us; 43us; 105us; 55us; 105us; 60us; 105us; 62us; 105us; 66us; 105us; 68us; 105us; 70us; 105us; 72us; 105us; 74us; 105us; 76us; 105us; 79us; 105us; 93us; 105us; 94us; 105us; 95us; 105us; 96us; 105us; 97us; 105us; 98us; 105us; 99us; 105us; 100us; 105us; 101us; 105us; 102us; 105us; 103us; 105us; 104us; 105us; 121us; 122us; 123us; 124us; 125us; 126us; 127us; 128us; 33us; 65535us; 15us; 120us; 17us; 120us; 32us; 120us; 40us; 120us; 41us; 120us; 42us; 120us; 43us; 120us; 55us; 120us; 60us; 120us; 62us; 120us; 66us; 120us; 68us; 120us; 70us; 120us; 72us; 120us; 74us; 120us; 76us; 120us; 79us; 120us; 93us; 120us; 94us; 120us; 95us; 120us; 96us; 120us; 97us; 120us; 98us; 120us; 99us; 120us; 100us; 120us; 101us; 120us; 102us; 120us; 103us; 120us; 104us; 120us; 121us; 120us; 123us; 120us; 125us; 120us; 127us; 120us; 33us; 65535us; 15us; 129us; 17us; 129us; 32us; 129us; 40us; 129us; 41us; 129us; 42us; 129us; 43us; 129us; 55us; 129us; 60us; 129us; 62us; 129us; 66us; 129us; 68us; 129us; 70us; 129us; 72us; 129us; 74us; 129us; 76us; 129us; 79us; 129us; 93us; 129us; 94us; 129us; 95us; 129us; 96us; 129us; 97us; 129us; 98us; 129us; 99us; 129us; 100us; 129us; 101us; 129us; 102us; 129us; 103us; 129us; 104us; 129us; 121us; 129us; 123us; 129us; 125us; 129us; 127us; 129us; 33us; 65535us; 15us; 130us; 17us; 130us; 32us; 130us; 40us; 130us; 41us; 130us; 42us; 130us; 43us; 130us; 55us; 130us; 60us; 130us; 62us; 130us; 66us; 130us; 68us; 130us; 70us; 130us; 72us; 130us; 74us; 130us; 76us; 130us; 79us; 130us; 93us; 130us; 94us; 130us; 95us; 130us; 96us; 130us; 97us; 130us; 98us; 130us; 99us; 130us; 100us; 130us; 101us; 130us; 102us; 130us; 103us; 130us; 104us; 130us; 121us; 130us; 123us; 130us; 125us; 130us; 127us; 130us; 39us; 65535us; 15us; 140us; 17us; 140us; 22us; 27us; 24us; 25us; 32us; 139us; 40us; 139us; 41us; 139us; 42us; 139us; 43us; 139us; 55us; 139us; 60us; 139us; 62us; 139us; 66us; 139us; 68us; 139us; 70us; 139us; 72us; 139us; 74us; 139us; 76us; 139us; 79us; 139us; 93us; 139us; 94us; 139us; 95us; 139us; 96us; 139us; 97us; 139us; 98us; 139us; 99us; 139us; 100us; 139us; 101us; 139us; 102us; 139us; 103us; 139us; 104us; 139us; 121us; 139us; 123us; 139us; 125us; 139us; 127us; 139us; 142us; 144us; 143us; 145us; 146us; 148us; 147us; 148us; 33us; 65535us; 15us; 119us; 17us; 119us; 32us; 119us; 40us; 119us; 41us; 119us; 42us; 119us; 43us; 119us; 55us; 119us; 60us; 119us; 62us; 119us; 66us; 119us; 68us; 119us; 70us; 119us; 72us; 119us; 74us; 119us; 76us; 119us; 79us; 119us; 93us; 119us; 94us; 119us; 95us; 119us; 96us; 119us; 97us; 119us; 98us; 119us; 99us; 119us; 100us; 119us; 101us; 119us; 102us; 119us; 103us; 119us; 104us; 119us; 121us; 119us; 123us; 119us; 125us; 119us; 127us; 119us; 0us; 65535us; 33us; 65535us; 15us; 141us; 17us; 141us; 32us; 141us; 40us; 141us; 41us; 141us; 42us; 141us; 43us; 141us; 55us; 141us; 60us; 141us; 62us; 141us; 66us; 141us; 68us; 141us; 70us; 141us; 72us; 141us; 74us; 141us; 76us; 141us; 79us; 141us; 93us; 141us; 94us; 141us; 95us; 141us; 96us; 141us; 97us; 141us; 98us; 141us; 99us; 141us; 100us; 141us; 101us; 141us; 102us; 141us; 103us; 141us; 104us; 141us; 121us; 141us; 123us; 141us; 125us; 141us; 127us; 141us; 2us; 65535us; 15us; 21us; 17us; 21us; |]
let _fsyacc_sparseGotoTableRowOffsets = [|0us; 1us; 3us; 5us; 7us; 9us; 11us; 13us; 15us; 17us; 19us; 21us; 23us; 25us; 28us; 30us; 33us; 45us; 57us; 72us; 102us; 112us; 122us; 125us; 127us; 128us; 162us; 196us; 230us; 264us; 304us; 338us; 339us; 373us; |]
let _fsyacc_stateToProdIdxsTableElements = [| 1us; 0us; 1us; 0us; 1us; 1us; 1us; 2us; 2us; 3us; 4us; 1us; 3us; 1us; 3us; 2us; 4us; 6us; 1us; 7us; 1us; 8us; 1us; 9us; 1us; 10us; 1us; 11us; 1us; 12us; 1us; 13us; 1us; 13us; 2us; 13us; 15us; 1us; 15us; 1us; 15us; 1us; 16us; 1us; 17us; 1us; 18us; 4us; 19us; 27us; 28us; 29us; 1us; 19us; 2us; 21us; 22us; 1us; 21us; 1us; 22us; 1us; 23us; 1us; 24us; 4us; 25us; 27us; 28us; 29us; 2us; 26us; 43us; 2us; 26us; 45us; 1us; 26us; 4us; 26us; 27us; 28us; 29us; 4us; 27us; 27us; 28us; 29us; 4us; 27us; 28us; 28us; 29us; 4us; 27us; 28us; 29us; 29us; 4us; 27us; 28us; 29us; 30us; 5us; 27us; 28us; 29us; 42us; 43us; 5us; 27us; 28us; 29us; 44us; 45us; 1us; 27us; 1us; 28us; 1us; 29us; 1us; 30us; 10us; 31us; 32us; 33us; 34us; 35us; 36us; 37us; 38us; 39us; 40us; 8us; 31us; 32us; 33us; 34us; 35us; 36us; 38us; 39us; 1us; 31us; 4us; 32us; 34us; 36us; 39us; 1us; 32us; 1us; 33us; 1us; 34us; 1us; 35us; 1us; 36us; 1us; 38us; 1us; 39us; 1us; 40us; 1us; 40us; 1us; 41us; 20us; 42us; 43us; 44us; 45us; 46us; 47us; 48us; 49us; 50us; 51us; 52us; 53us; 54us; 55us; 56us; 57us; 58us; 59us; 60us; 61us; 2us; 42us; 43us; 2us; 42us; 43us; 1us; 42us; 1us; 43us; 1us; 43us; 3us; 44us; 45us; 47us; 2us; 44us; 45us; 2us; 44us; 45us; 1us; 44us; 1us; 45us; 1us; 45us; 1us; 46us; 13us; 46us; 50us; 51us; 52us; 53us; 54us; 55us; 56us; 57us; 58us; 59us; 60us; 61us; 1us; 46us; 1us; 46us; 1us; 47us; 13us; 47us; 50us; 51us; 52us; 53us; 54us; 55us; 56us; 57us; 58us; 59us; 60us; 61us; 1us; 47us; 1us; 47us; 1us; 48us; 1us; 48us; 13us; 48us; 50us; 51us; 52us; 53us; 54us; 55us; 56us; 57us; 58us; 59us; 60us; 61us; 13us; 50us; 50us; 51us; 52us; 53us; 54us; 55us; 56us; 57us; 58us; 59us; 60us; 61us; 13us; 50us; 51us; 51us; 52us; 53us; 54us; 55us; 56us; 57us; 58us; 59us; 60us; 61us; 13us; 50us; 51us; 52us; 52us; 53us; 54us; 55us; 56us; 57us; 58us; 59us; 60us; 61us; 13us; 50us; 51us; 52us; 53us; 53us; 54us; 55us; 56us; 57us; 58us; 59us; 60us; 61us; 13us; 50us; 51us; 52us; 53us; 54us; 54us; 55us; 56us; 57us; 58us; 59us; 60us; 61us; 13us; 50us; 51us; 52us; 53us; 54us; 55us; 55us; 56us; 57us; 58us; 59us; 60us; 61us; 13us; 50us; 51us; 52us; 53us; 54us; 55us; 56us; 56us; 57us; 58us; 59us; 60us; 61us; 13us; 50us; 51us; 52us; 53us; 54us; 55us; 56us; 57us; 57us; 58us; 59us; 60us; 61us; 13us; 50us; 51us; 52us; 53us; 54us; 55us; 56us; 57us; 58us; 58us; 59us; 60us; 61us; 13us; 50us; 51us; 52us; 53us; 54us; 55us; 56us; 57us; 58us; 59us; 59us; 60us; 61us; 13us; 50us; 51us; 52us; 53us; 54us; 55us; 56us; 57us; 58us; 59us; 60us; 60us; 61us; 13us; 50us; 51us; 52us; 53us; 54us; 55us; 56us; 57us; 58us; 59us; 60us; 61us; 61us; 1us; 50us; 1us; 51us; 1us; 52us; 1us; 53us; 1us; 54us; 1us; 55us; 1us; 56us; 1us; 57us; 1us; 58us; 1us; 59us; 1us; 60us; 1us; 61us; 1us; 62us; 1us; 63us; 1us; 64us; 1us; 65us; 1us; 66us; 1us; 67us; 1us; 68us; 1us; 69us; 1us; 70us; 1us; 71us; 1us; 72us; 1us; 73us; 1us; 74us; 1us; 75us; 1us; 78us; 1us; 79us; 1us; 80us; 1us; 80us; 1us; 81us; 1us; 81us; 1us; 82us; 1us; 82us; 1us; 83us; 1us; 83us; 1us; 84us; 1us; 85us; 1us; 86us; 1us; 87us; 1us; 88us; 1us; 89us; 1us; 90us; 1us; 91us; 1us; 92us; 1us; 93us; 3us; 94us; 98us; 99us; 5us; 94us; 98us; 99us; 100us; 101us; 1us; 95us; 2us; 98us; 99us; 4us; 98us; 99us; 100us; 101us; 2us; 98us; 99us; 3us; 98us; 99us; 101us; 1us; 99us; 2us; 99us; 101us; 1us; 99us; 1us; 100us; 1us; 101us; |]
let _fsyacc_stateToProdIdxsTableRowOffsets = [|0us; 2us; 4us; 6us; 8us; 11us; 13us; 15us; 18us; 20us; 22us; 24us; 26us; 28us; 30us; 32us; 34us; 37us; 39us; 41us; 43us; 45us; 47us; 52us; 54us; 57us; 59us; 61us; 63us; 65us; 70us; 73us; 76us; 78us; 83us; 88us; 93us; 98us; 103us; 109us; 115us; 117us; 119us; 121us; 123us; 134us; 143us; 145us; 150us; 152us; 154us; 156us; 158us; 160us; 162us; 164us; 166us; 168us; 170us; 191us; 194us; 197us; 199us; 201us; 203us; 207us; 210us; 213us; 215us; 217us; 219us; 221us; 235us; 237us; 239us; 241us; 255us; 257us; 259us; 261us; 263us; 277us; 291us; 305us; 319us; 333us; 347us; 361us; 375us; 389us; 403us; 417us; 431us; 445us; 447us; 449us; 451us; 453us; 455us; 457us; 459us; 461us; 463us; 465us; 467us; 469us; 471us; 473us; 475us; 477us; 479us; 481us; 483us; 485us; 487us; 489us; 491us; 493us; 495us; 497us; 499us; 501us; 503us; 505us; 507us; 509us; 511us; 513us; 515us; 517us; 519us; 521us; 523us; 525us; 527us; 529us; 531us; 533us; 535us; 537us; 541us; 547us; 549us; 552us; 557us; 560us; 564us; 566us; 569us; 571us; 573us; |]
let _fsyacc_action_rows = 151
let _fsyacc_actionTableElements = [|2us; 32768us; 13us; 14us; 54us; 3us; 0us; 49152us; 0us; 16385us; 0us; 16386us; 1us; 16389us; 54us; 7us; 1us; 32768us; 52us; 6us; 0us; 16387us; 1us; 16388us; 52us; 16390us; 0us; 16391us; 0us; 16392us; 0us; 16393us; 0us; 16394us; 0us; 16395us; 0us; 16396us; 0us; 16398us; 14us; 32768us; 1us; 132us; 2us; 133us; 3us; 131us; 4us; 136us; 5us; 135us; 6us; 134us; 7us; 137us; 8us; 138us; 35us; 43us; 39us; 125us; 41us; 127us; 42us; 121us; 43us; 123us; 45us; 20us; 1us; 16397us; 53us; 17us; 13us; 32768us; 1us; 132us; 2us; 133us; 3us; 131us; 4us; 136us; 5us; 135us; 6us; 134us; 7us; 137us; 8us; 138us; 35us; 43us; 39us; 125us; 41us; 127us; 42us; 121us; 43us; 123us; 0us; 16399us; 0us; 16400us; 0us; 16401us; 0us; 16402us; 8us; 16404us; 4us; 28us; 8us; 138us; 12us; 24us; 17us; 107us; 18us; 109us; 36us; 106us; 37us; 41us; 38us; 108us; 0us; 16403us; 2us; 32768us; 4us; 26us; 8us; 138us; 0us; 16405us; 0us; 16406us; 0us; 16407us; 0us; 16408us; 5us; 16409us; 17us; 107us; 18us; 109us; 36us; 106us; 37us; 41us; 38us; 108us; 2us; 32768us; 49us; 63us; 53us; 32us; 2us; 32768us; 49us; 69us; 53us; 32us; 13us; 32768us; 1us; 132us; 2us; 133us; 3us; 131us; 4us; 136us; 5us; 135us; 6us; 134us; 7us; 137us; 8us; 138us; 35us; 43us; 39us; 125us; 41us; 127us; 42us; 121us; 43us; 123us; 5us; 16410us; 17us; 107us; 18us; 109us; 36us; 106us; 37us; 41us; 38us; 108us; 3us; 16411us; 18us; 109us; 37us; 41us; 38us; 108us; 2us; 16412us; 18us; 109us; 38us; 108us; 0us; 16413us; 0us; 16414us; 7us; 32768us; 17us; 107us; 18us; 109us; 36us; 106us; 37us; 41us; 38us; 108us; 49us; 61us; 53us; 62us; 7us; 32768us; 17us; 107us; 18us; 109us; 36us; 106us; 37us; 41us; 38us; 108us; 49us; 67us; 53us; 68us; 13us; 32768us; 1us; 132us; 2us; 133us; 3us; 131us; 4us; 136us; 5us; 135us; 6us; 134us; 7us; 137us; 8us; 138us; 35us; 43us; 39us; 125us; 41us; 127us; 42us; 121us; 43us; 123us; 13us; 32768us; 1us; 132us; 2us; 133us; 3us; 131us; 4us; 136us; 5us; 135us; 6us; 134us; 7us; 137us; 8us; 138us; 35us; 43us; 39us; 125us; 41us; 127us; 42us; 121us; 43us; 123us; 13us; 32768us; 1us; 132us; 2us; 133us; 3us; 131us; 4us; 136us; 5us; 135us; 6us; 134us; 7us; 137us; 8us; 138us; 35us; 43us; 39us; 125us; 41us; 127us; 42us; 121us; 43us; 123us; 13us; 32768us; 1us; 132us; 2us; 133us; 3us; 131us; 4us; 136us; 5us; 135us; 6us; 134us; 7us; 137us; 8us; 138us; 35us; 43us; 39us; 125us; 41us; 127us; 42us; 121us; 43us; 123us; 8us; 16421us; 11us; 45us; 27us; 112us; 28us; 113us; 29us; 118us; 31us; 115us; 32us; 117us; 33us; 114us; 34us; 116us; 6us; 32768us; 0us; 51us; 1us; 49us; 2us; 46us; 3us; 53us; 16us; 111us; 41us; 110us; 0us; 16415us; 4us; 32768us; 0us; 52us; 1us; 50us; 2us; 48us; 3us; 54us; 0us; 16416us; 0us; 16417us; 0us; 16418us; 0us; 16419us; 0us; 16420us; 0us; 16422us; 0us; 16423us; 12us; 32768us; 1us; 132us; 2us; 133us; 3us; 131us; 4us; 136us; 5us; 135us; 6us; 134us; 7us; 137us; 8us; 138us; 39us; 125us; 41us; 127us; 42us; 121us; 43us; 123us; 0us; 16424us; 0us; 16425us; 17us; 16433us; 14us; 103us; 15us; 102us; 16us; 111us; 19us; 59us; 20us; 70us; 21us; 78us; 22us; 93us; 23us; 94us; 24us; 104us; 25us; 95us; 26us; 96us; 41us; 110us; 42us; 97us; 43us; 98us; 44us; 100us; 45us; 99us; 46us; 101us; 1us; 32768us; 48us; 60us; 13us; 32768us; 1us; 132us; 2us; 133us; 3us; 131us; 4us; 136us; 5us; 135us; 6us; 134us; 7us; 137us; 8us; 138us; 35us; 43us; 39us; 125us; 41us; 127us; 42us; 121us; 43us; 123us; 0us; 16426us; 13us; 32768us; 1us; 132us; 2us; 133us; 3us; 131us; 4us; 136us; 5us; 135us; 6us; 134us; 7us; 137us; 8us; 138us; 35us; 43us; 39us; 125us; 41us; 127us; 42us; 121us; 43us; 123us; 0us; 16427us; 2us; 32768us; 19us; 65us; 20us; 74us; 1us; 32768us; 48us; 66us; 13us; 32768us; 1us; 132us; 2us; 133us; 3us; 131us; 4us; 136us; 5us; 135us; 6us; 134us; 7us; 137us; 8us; 138us; 35us; 43us; 39us; 125us; 41us; 127us; 42us; 121us; 43us; 123us; 0us; 16428us; 13us; 32768us; 1us; 132us; 2us; 133us; 3us; 131us; 4us; 136us; 5us; 135us; 6us; 134us; 7us; 137us; 8us; 138us; 35us; 43us; 39us; 125us; 41us; 127us; 42us; 121us; 43us; 123us; 0us; 16429us; 12us; 32768us; 1us; 132us; 2us; 133us; 3us; 131us; 4us; 136us; 5us; 135us; 6us; 134us; 7us; 137us; 8us; 138us; 39us; 125us; 41us; 127us; 42us; 121us; 43us; 123us; 13us; 32768us; 14us; 103us; 15us; 102us; 22us; 93us; 23us; 94us; 24us; 104us; 25us; 95us; 26us; 96us; 38us; 72us; 42us; 97us; 43us; 98us; 44us; 100us; 45us; 99us; 46us; 101us; 12us; 32768us; 1us; 132us; 2us; 133us; 3us; 131us; 4us; 136us; 5us; 135us; 6us; 134us; 7us; 137us; 8us; 138us; 39us; 125us; 41us; 127us; 42us; 121us; 43us; 123us; 0us; 16430us; 12us; 32768us; 1us; 132us; 2us; 133us; 3us; 131us; 4us; 136us; 5us; 135us; 6us; 134us; 7us; 137us; 8us; 138us; 39us; 125us; 41us; 127us; 42us; 121us; 43us; 123us; 13us; 32768us; 14us; 103us; 15us; 102us; 22us; 93us; 23us; 94us; 24us; 104us; 25us; 95us; 26us; 96us; 38us; 76us; 42us; 97us; 43us; 98us; 44us; 100us; 45us; 99us; 46us; 101us; 12us; 32768us; 1us; 132us; 2us; 133us; 3us; 131us; 4us; 136us; 5us; 135us; 6us; 134us; 7us; 137us; 8us; 138us; 39us; 125us; 41us; 127us; 42us; 121us; 43us; 123us; 0us; 16431us; 1us; 32768us; 40us; 79us; 12us; 32768us; 1us; 132us; 2us; 133us; 3us; 131us; 4us; 136us; 5us; 135us; 6us; 134us; 7us; 137us; 8us; 138us; 39us; 125us; 41us; 127us; 42us; 121us; 43us; 123us; 12us; 16432us; 14us; 103us; 15us; 102us; 22us; 93us; 23us; 94us; 24us; 104us; 25us; 95us; 26us; 96us; 42us; 97us; 43us; 98us; 44us; 100us; 45us; 99us; 46us; 101us; 11us; 16434us; 14us; 103us; 15us; 102us; 23us; 94us; 24us; 104us; 25us; 95us; 26us; 96us; 42us; 97us; 43us; 98us; 44us; 100us; 45us; 99us; 46us; 101us; 12us; 16435us; 14us; 103us; 15us; 102us; 22us; 93us; 23us; 94us; 24us; 104us; 25us; 95us; 26us; 96us; 42us; 97us; 43us; 98us; 44us; 100us; 45us; 99us; 46us; 101us; 9us; 16436us; 14us; 103us; 15us; 102us; 23us; 94us; 24us; 104us; 42us; 97us; 43us; 98us; 44us; 100us; 45us; 99us; 46us; 101us; 9us; 16437us; 14us; 103us; 15us; 102us; 23us; 94us; 24us; 104us; 42us; 97us; 43us; 98us; 44us; 100us; 45us; 99us; 46us; 101us; 7us; 16438us; 14us; 103us; 15us; 102us; 23us; 94us; 24us; 104us; 44us; 100us; 45us; 99us; 46us; 101us; 7us; 16439us; 14us; 103us; 15us; 102us; 23us; 94us; 24us; 104us; 44us; 100us; 45us; 99us; 46us; 101us; 2us; 16440us; 23us; 94us; 24us; 104us; 2us; 16441us; 23us; 94us; 24us; 104us; 2us; 16442us; 23us; 94us; 24us; 104us; 2us; 16443us; 23us; 94us; 24us; 104us; 12us; 16444us; 14us; 103us; 15us; 102us; 22us; 93us; 23us; 94us; 24us; 104us; 25us; 95us; 26us; 96us; 42us; 97us; 43us; 98us; 44us; 100us; 45us; 99us; 46us; 101us; 1us; 16445us; 23us; 94us; 12us; 32768us; 1us; 132us; 2us; 133us; 3us; 131us; 4us; 136us; 5us; 135us; 6us; 134us; 7us; 137us; 8us; 138us; 39us; 125us; 41us; 127us; 42us; 121us; 43us; 123us; 12us; 32768us; 1us; 132us; 2us; 133us; 3us; 131us; 4us; 136us; 5us; 135us; 6us; 134us; 7us; 137us; 8us; 138us; 39us; 125us; 41us; 127us; 42us; 121us; 43us; 123us; 12us; 32768us; 1us; 132us; 2us; 133us; 3us; 131us; 4us; 136us; 5us; 135us; 6us; 134us; 7us; 137us; 8us; 138us; 39us; 125us; 41us; 127us; 42us; 121us; 43us; 123us; 12us; 32768us; 1us; 132us; 2us; 133us; 3us; 131us; 4us; 136us; 5us; 135us; 6us; 134us; 7us; 137us; 8us; 138us; 39us; 125us; 41us; 127us; 42us; 121us; 43us; 123us; 12us; 32768us; 1us; 132us; 2us; 133us; 3us; 131us; 4us; 136us; 5us; 135us; 6us; 134us; 7us; 137us; 8us; 138us; 39us; 125us; 41us; 127us; 42us; 121us; 43us; 123us; 12us; 32768us; 1us; 132us; 2us; 133us; 3us; 131us; 4us; 136us; 5us; 135us; 6us; 134us; 7us; 137us; 8us; 138us; 39us; 125us; 41us; 127us; 42us; 121us; 43us; 123us; 12us; 32768us; 1us; 132us; 2us; 133us; 3us; 131us; 4us; 136us; 5us; 135us; 6us; 134us; 7us; 137us; 8us; 138us; 39us; 125us; 41us; 127us; 42us; 121us; 43us; 123us; 12us; 32768us; 1us; 132us; 2us; 133us; 3us; 131us; 4us; 136us; 5us; 135us; 6us; 134us; 7us; 137us; 8us; 138us; 39us; 125us; 41us; 127us; 42us; 121us; 43us; 123us; 12us; 32768us; 1us; 132us; 2us; 133us; 3us; 131us; 4us; 136us; 5us; 135us; 6us; 134us; 7us; 137us; 8us; 138us; 39us; 125us; 41us; 127us; 42us; 121us; 43us; 123us; 12us; 32768us; 1us; 132us; 2us; 133us; 3us; 131us; 4us; 136us; 5us; 135us; 6us; 134us; 7us; 137us; 8us; 138us; 39us; 125us; 41us; 127us; 42us; 121us; 43us; 123us; 12us; 32768us; 1us; 132us; 2us; 133us; 3us; 131us; 4us; 136us; 5us; 135us; 6us; 134us; 7us; 137us; 8us; 138us; 39us; 125us; 41us; 127us; 42us; 121us; 43us; 123us; 12us; 32768us; 1us; 132us; 2us; 133us; 3us; 131us; 4us; 136us; 5us; 135us; 6us; 134us; 7us; 137us; 8us; 138us; 39us; 125us; 41us; 127us; 42us; 121us; 43us; 123us; 0us; 16446us; 0us; 16447us; 0us; 16448us; 0us; 16449us; 0us; 16450us; 0us; 16451us; 0us; 16452us; 0us; 16453us; 0us; 16454us; 0us; 16455us; 0us; 16456us; 0us; 16457us; 0us; 16458us; 0us; 16459us; 0us; 16462us; 0us; 16463us; 12us; 32768us; 1us; 132us; 2us; 133us; 3us; 131us; 4us; 136us; 5us; 135us; 6us; 134us; 7us; 137us; 8us; 138us; 39us; 125us; 41us; 127us; 42us; 121us; 43us; 123us; 0us; 16464us; 12us; 32768us; 1us; 132us; 2us; 133us; 3us; 131us; 4us; 136us; 5us; 135us; 6us; 134us; 7us; 137us; 8us; 138us; 39us; 125us; 41us; 127us; 42us; 121us; 43us; 123us; 0us; 16465us; 12us; 32768us; 1us; 132us; 2us; 133us; 3us; 131us; 4us; 136us; 5us; 135us; 6us; 134us; 7us; 137us; 8us; 138us; 39us; 125us; 41us; 127us; 42us; 121us; 43us; 123us; 0us; 16466us; 12us; 32768us; 1us; 132us; 2us; 133us; 3us; 131us; 4us; 136us; 5us; 135us; 6us; 134us; 7us; 137us; 8us; 138us; 39us; 125us; 41us; 127us; 42us; 121us; 43us; 123us; 0us; 16467us; 0us; 16468us; 0us; 16469us; 0us; 16470us; 0us; 16471us; 0us; 16472us; 0us; 16473us; 0us; 16474us; 0us; 16475us; 0us; 16476us; 0us; 16477us; 1us; 16478us; 47us; 142us; 1us; 16478us; 47us; 143us; 0us; 16479us; 1us; 32768us; 8us; 138us; 2us; 32768us; 8us; 138us; 45us; 149us; 1us; 16482us; 47us; 146us; 1us; 16482us; 47us; 147us; 1us; 32768us; 8us; 138us; 2us; 32768us; 8us; 138us; 45us; 150us; 0us; 16483us; 0us; 16484us; 0us; 16485us; |]
let _fsyacc_actionTableRowOffsets = [|0us; 3us; 4us; 5us; 6us; 8us; 10us; 11us; 13us; 14us; 15us; 16us; 17us; 18us; 19us; 20us; 35us; 37us; 51us; 52us; 53us; 54us; 55us; 64us; 65us; 68us; 69us; 70us; 71us; 72us; 78us; 81us; 84us; 98us; 104us; 108us; 111us; 112us; 113us; 121us; 129us; 143us; 157us; 171us; 185us; 194us; 201us; 202us; 207us; 208us; 209us; 210us; 211us; 212us; 213us; 214us; 227us; 228us; 229us; 247us; 249us; 263us; 264us; 278us; 279us; 282us; 284us; 298us; 299us; 313us; 314us; 327us; 341us; 354us; 355us; 368us; 382us; 395us; 396us; 398us; 411us; 424us; 436us; 449us; 459us; 469us; 477us; 485us; 488us; 491us; 494us; 497us; 510us; 512us; 525us; 538us; 551us; 564us; 577us; 590us; 603us; 616us; 629us; 642us; 655us; 668us; 669us; 670us; 671us; 672us; 673us; 674us; 675us; 676us; 677us; 678us; 679us; 680us; 681us; 682us; 683us; 684us; 697us; 698us; 711us; 712us; 725us; 726us; 739us; 740us; 741us; 742us; 743us; 744us; 745us; 746us; 747us; 748us; 749us; 750us; 752us; 754us; 755us; 757us; 760us; 762us; 764us; 766us; 769us; 770us; 771us; |]
let _fsyacc_reductionSymbolCounts = [|1us; 1us; 1us; 3us; 2us; 0us; 1us; 1us; 1us; 1us; 1us; 1us; 1us; 3us; 0us; 3us; 1us; 1us; 1us; 2us; 0us; 2us; 2us; 1us; 1us; 1us; 3us; 3us; 3us; 3us; 2us; 3us; 4us; 3us; 4us; 3us; 4us; 1us; 3us; 4us; 3us; 1us; 5us; 7us; 6us; 8us; 5us; 6us; 4us; 1us; 3us; 3us; 3us; 3us; 3us; 3us; 3us; 3us; 3us; 3us; 3us; 3us; 1us; 1us; 1us; 1us; 1us; 1us; 1us; 1us; 1us; 1us; 1us; 1us; 1us; 1us; 1us; 1us; 1us; 1us; 2us; 2us; 2us; 2us; 1us; 1us; 1us; 1us; 1us; 1us; 1us; 1us; 1us; 1us; 1us; 1us; 1us; 1us; 3us; 5us; 3us; 5us; |]
let _fsyacc_productionToNonTerminalTable = [|0us; 1us; 2us; 2us; 2us; 3us; 3us; 4us; 5us; 6us; 7us; 8us; 9us; 10us; 11us; 12us; 12us; 12us; 13us; 13us; 14us; 14us; 14us; 14us; 14us; 15us; 15us; 16us; 16us; 16us; 16us; 16us; 16us; 16us; 16us; 16us; 16us; 16us; 17us; 17us; 17us; 17us; 18us; 18us; 18us; 18us; 18us; 18us; 18us; 18us; 19us; 19us; 19us; 19us; 19us; 19us; 19us; 19us; 19us; 19us; 19us; 19us; 19us; 20us; 20us; 21us; 21us; 22us; 22us; 23us; 23us; 23us; 23us; 23us; 23us; 23us; 24us; 24us; 25us; 25us; 25us; 25us; 25us; 25us; 26us; 26us; 26us; 26us; 26us; 26us; 26us; 27us; 28us; 29us; 30us; 30us; 31us; 31us; 32us; 32us; 33us; 33us; |]
let _fsyacc_immediateActions = [|65535us; 49152us; 16385us; 16386us; 65535us; 65535us; 16387us; 65535us; 16391us; 16392us; 16393us; 16394us; 16395us; 16396us; 65535us; 65535us; 65535us; 65535us; 16399us; 16400us; 16401us; 16402us; 65535us; 16403us; 65535us; 16405us; 16406us; 16407us; 16408us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 16415us; 65535us; 16416us; 16417us; 16418us; 16419us; 16420us; 16422us; 16423us; 65535us; 16424us; 16425us; 65535us; 65535us; 65535us; 16426us; 65535us; 16427us; 65535us; 65535us; 65535us; 16428us; 65535us; 16429us; 65535us; 65535us; 65535us; 16430us; 65535us; 65535us; 65535us; 16431us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 16446us; 16447us; 16448us; 16449us; 16450us; 16451us; 16452us; 16453us; 16454us; 16455us; 16456us; 16457us; 16458us; 16459us; 16462us; 16463us; 65535us; 16464us; 65535us; 16465us; 65535us; 16466us; 65535us; 16467us; 16468us; 16469us; 16470us; 16471us; 16472us; 16473us; 16474us; 16475us; 16476us; 16477us; 65535us; 65535us; 16479us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 16483us; 16484us; 16485us; |]
let _fsyacc_reductions ()  =    [| 
# 537 "mysql.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : AbSyn.Qs list)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
                      raise (Microsoft.FSharp.Text.Parsing.Accept(Microsoft.FSharp.Core.Operators.box _1))
                   )
                 : '_startstart_entry));
# 546 "mysql.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'sql_statement)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 69 "mysql.yy"
                                               _1 
                   )
# 69 "mysql.yy"
                 : AbSyn.Qs list));
# 557 "mysql.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 106 "mysql.yy"
                                             
                                 //empty statement
                                 []
                                 //THD *thd= YYTHD;
                                 //if (!thd->is_bootstrap_system_thread() &&
                                 //    !thd->m_parser_state->has_comment())
                                 //{
                                 //  my_error(ER_EMPTY_QUERY, MYF(0));
                                 //  MYSQL_YYABORT;
                                 //}
                                 //thd->lex->sql_command= SQLCOM_EMPTY_QUERY;
                                 //YYLIP->found_semicolon= NULL;
                                 
                   )
# 106 "mysql.yy"
                 : 'sql_statement));
# 579 "mysql.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'simple_statement_or_begin)) in
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : 'opt_end_of_input)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 119 "mysql.yy"
                                                                                        
                                 [_1]
                                 //we found a wellformed query...
                                 
                   )
# 119 "mysql.yy"
                 : 'sql_statement));
# 594 "mysql.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'simple_statement_or_begin)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 123 "mysql.yy"
                                                                       
                                 [_1]
                                 //single query, not terminated.
                                 
                   )
# 123 "mysql.yy"
                 : 'sql_statement));
# 608 "mysql.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 130 "mysql.yy"
                                              
                   )
# 130 "mysql.yy"
                 : 'opt_end_of_input));
# 618 "mysql.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 131 "mysql.yy"
                                              
                   )
# 131 "mysql.yy"
                 : 'opt_end_of_input));
# 628 "mysql.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'simple_statement)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 135 "mysql.yy"
                                                  _1
                                 //*parse_tree= _1;
                                 
                   )
# 135 "mysql.yy"
                 : 'simple_statement_or_begin));
# 641 "mysql.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'select_stmt)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 218 "mysql.yy"
                                                     
                             _1
                            
                   )
# 218 "mysql.yy"
                 : 'simple_statement));
# 654 "mysql.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'query_expression)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 240 "mysql.yy"
                                                 
                                 _1
                                 //$$= NEW_PTN PT_select_stmt(_1);
                                 
                   )
# 240 "mysql.yy"
                 : 'select_stmt));
# 668 "mysql.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'query_expression_body)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 259 "mysql.yy"
                                
                               _1
                               
                   )
# 259 "mysql.yy"
                 : 'query_expression));
# 681 "mysql.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'query_primary)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 313 "mysql.yy"
                                              
                                 _1
                                 //$$= NEW_PTN PT_query_expression_body_primary(_1);
                                 
                   )
# 313 "mysql.yy"
                 : 'query_expression_body));
# 695 "mysql.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'query_specification)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 359 "mysql.yy"
                                                    
                                 _1
                                 // Bison doesn't get polymorphism.
                                // $$= _1;
                                 
                   )
# 359 "mysql.yy"
                 : 'query_primary));
# 710 "mysql.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : 'select_options)) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : 'select_item_list)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 376 "mysql.yy"
                                
                               AbSyn.Qs.Select [
                                 AbSyn.Q_Select.SelectOptions _2  //Select options
                                 AbSyn.Q_Select.SelectItems _3
                                 ]
                               (*
                                 $$= NEW_PTN PT_query_specification(
                                                           _1,  // SELECT_SYM
                                                           _2,  // select_options
                                                           _3,  // select_item_list
                                                           _4,  // into_clause
                                                           _5,  // from
                                                           _6,  // where
                                                           _7,  // group
                                                           _8,  // having
                                                           _9); // windows
                                 *)
                                 
                   )
# 376 "mysql.yy"
                 : 'query_specification));
# 739 "mysql.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 418 "mysql.yy"
                                           
                                 None
                                 
                   )
# 418 "mysql.yy"
                 : 'select_options));
# 751 "mysql.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'select_item_list)) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : 'select_item)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 446 "mysql.yy"
                                                                         
                                 //if (_1 == NULL || _1->push_back(_3))
                                 //  MYSQL_YYABORT;
                                 //$$= _1;
                                 _1 @ [_3]
                                 
                   )
# 446 "mysql.yy"
                 : 'select_item_list));
# 768 "mysql.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'select_item)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 452 "mysql.yy"
                                            
                                 //$$= NEW_PTN PT_select_item_list;
                                 //if ($$ == NULL || $$->push_back(_1))
                                 //  MYSQL_YYABORT;
                                 [_1]
                                 
                   )
# 452 "mysql.yy"
                 : 'select_item_list));
# 784 "mysql.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 458 "mysql.yy"
                                         
                                 //Item *item= NEW_PTN Item_field(@$, NULL, NULL, "*");
                                 //$$= NEW_PTN PT_select_item_list;
                                 //if ($$ == NULL || $$->push_back(item))
                                 //  MYSQL_YYABORT;
                                 [(AbSyn.Expr.Node "*",AbSyn.Expr.Null)]
                                 
                   )
# 458 "mysql.yy"
                 : 'select_item_list));
# 800 "mysql.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'table_wild)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 468 "mysql.yy"
                                           
                                 (_1,AbSyn.Expr.Null)
                                 
                   )
# 468 "mysql.yy"
                 : 'select_item));
# 813 "mysql.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'expr)) in
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : 'select_alias)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 471 "mysql.yy"
                                                  
                                 //$$= NEW_PTN PTI_expr_with_alias(@$, _1, @1.cpp, _2);
                                 (_1,_2)
                                 
                   )
# 471 "mysql.yy"
                 : 'select_item));
# 828 "mysql.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 477 "mysql.yy"
                                                   AbSyn.Expr.Null 
                   )
# 477 "mysql.yy"
                 : 'select_alias));
# 838 "mysql.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : 'ident)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 478 "mysql.yy"
                                                   _2 
                   )
# 478 "mysql.yy"
                 : 'select_alias));
# 849 "mysql.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : string)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 479 "mysql.yy"
                                                   AbSyn.Expr.Temp 
                   )
# 479 "mysql.yy"
                 : 'select_alias));
# 860 "mysql.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'ident)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 480 "mysql.yy"
                                                   _1 
                   )
# 480 "mysql.yy"
                 : 'select_alias));
# 871 "mysql.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : string)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 481 "mysql.yy"
                                                   AbSyn.Expr.Temp 
                   )
# 481 "mysql.yy"
                 : 'select_alias));
# 882 "mysql.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'expr)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 488 "mysql.yy"
                                                               _1 
                   )
# 488 "mysql.yy"
                 : 'expr_list));
# 893 "mysql.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'expr_list)) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : 'expr)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 489 "mysql.yy"
                                                               _3 
                   )
# 489 "mysql.yy"
                 : 'expr_list));
# 905 "mysql.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'expr)) in
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : 'op_or)) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : 'expr)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 492 "mysql.yy"
                                                            
                                 //AbSyn.Expr.Binary ("or",_1,_3)
                                 AbSyn.Expr.Temp
                                 
                   )
# 492 "mysql.yy"
                 : 'expr));
# 921 "mysql.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'expr)) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : 'expr)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 496 "mysql.yy"
                                                              
                                 //AbSyn.Expr.Binary ("xor",_1,_3)
                                 AbSyn.Expr.Temp
                                 
                   )
# 496 "mysql.yy"
                 : 'expr));
# 936 "mysql.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'expr)) in
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : 'op_and)) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : 'expr)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 500 "mysql.yy"
                                                              
                                 //AbSyn.Expr.Binary ("and",_1,_3)
                                 AbSyn.Expr.Temp
                                 
                   )
# 500 "mysql.yy"
                 : 'expr));
# 952 "mysql.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : 'expr)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 504 "mysql.yy"
                                                         
                                 //AbSyn.Expr.Unary ("not",_2)
                                 AbSyn.Expr.Temp
                                 
                   )
# 504 "mysql.yy"
                 : 'expr));
# 966 "mysql.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'bool_pri)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 508 "mysql.yy"
                                                                      
                                 AbSyn.Expr.Temp
                                 
                   )
# 508 "mysql.yy"
                 : 'expr));
# 979 "mysql.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'bool_pri)) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : 'not)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 511 "mysql.yy"
                                                                          
                                 AbSyn.Expr.Temp
                                 
                   )
# 511 "mysql.yy"
                 : 'expr));
# 993 "mysql.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'bool_pri)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 514 "mysql.yy"
                                                                       
                                 AbSyn.Expr.Temp
                                 
                   )
# 514 "mysql.yy"
                 : 'expr));
# 1006 "mysql.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'bool_pri)) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : 'not)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 517 "mysql.yy"
                                                                           
                                 AbSyn.Expr.Temp
                                 
                   )
# 517 "mysql.yy"
                 : 'expr));
# 1020 "mysql.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'bool_pri)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 520 "mysql.yy"
                                                                         
                                 AbSyn.Expr.Temp
                                 
                   )
# 520 "mysql.yy"
                 : 'expr));
# 1033 "mysql.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'bool_pri)) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : 'not)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 523 "mysql.yy"
                                                                             
                                 AbSyn.Expr.Temp
                                 
                   )
# 523 "mysql.yy"
                 : 'expr));
# 1047 "mysql.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'bool_pri)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 526 "mysql.yy"
                                         
                                 _1
                                 
                   )
# 526 "mysql.yy"
                 : 'expr));
# 1060 "mysql.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'bool_pri)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 531 "mysql.yy"
                                                                      
                                 AbSyn.Expr.Temp
                                 
                   )
# 531 "mysql.yy"
                 : 'bool_pri));
# 1073 "mysql.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'bool_pri)) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : 'not)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 534 "mysql.yy"
                                                                          
                                 AbSyn.Expr.Temp
                               
                   )
# 534 "mysql.yy"
                 : 'bool_pri));
# 1087 "mysql.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'bool_pri)) in
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : 'comp_op)) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : 'predicate)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 537 "mysql.yy"
                                                           
                                 AbSyn.Expr.Temp
                                 
                   )
# 537 "mysql.yy"
                 : 'bool_pri));
# 1102 "mysql.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'predicate)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 541 "mysql.yy"
                                          
                                 _1
                                 
                   )
# 541 "mysql.yy"
                 : 'bool_pri));
# 1115 "mysql.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'bit_expr)) in
            let _4 = (let data = parseState.GetInput(4) in (Microsoft.FSharp.Core.Operators.unbox data : 'expr)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 548 "mysql.yy"
                                                                      
                                 AbSyn.Expr.Temp
                                 
                   )
# 548 "mysql.yy"
                 : 'predicate));
# 1129 "mysql.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'bit_expr)) in
            let _4 = (let data = parseState.GetInput(4) in (Microsoft.FSharp.Core.Operators.unbox data : 'expr)) in
            let _6 = (let data = parseState.GetInput(6) in (Microsoft.FSharp.Core.Operators.unbox data : 'expr_list)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 551 "mysql.yy"
                                                                                            
                                 AbSyn.Expr.Temp
                                 
                   )
# 551 "mysql.yy"
                 : 'predicate));
# 1144 "mysql.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'bit_expr)) in
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : 'not)) in
            let _5 = (let data = parseState.GetInput(5) in (Microsoft.FSharp.Core.Operators.unbox data : 'expr)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 554 "mysql.yy"
                                                                          
                                 AbSyn.Expr.Temp
                                 
                   )
# 554 "mysql.yy"
                 : 'predicate));
# 1159 "mysql.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'bit_expr)) in
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : 'not)) in
            let _5 = (let data = parseState.GetInput(5) in (Microsoft.FSharp.Core.Operators.unbox data : 'expr)) in
            let _7 = (let data = parseState.GetInput(7) in (Microsoft.FSharp.Core.Operators.unbox data : 'expr_list)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 557 "mysql.yy"
                                                                                                
                                 AbSyn.Expr.Temp
                                 
                   )
# 557 "mysql.yy"
                 : 'predicate));
# 1175 "mysql.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'bit_expr)) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : 'bit_expr)) in
            let _5 = (let data = parseState.GetInput(5) in (Microsoft.FSharp.Core.Operators.unbox data : 'predicate)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 560 "mysql.yy"
                                                                              
                                 AbSyn.Expr.Temp
                                 
                   )
# 560 "mysql.yy"
                 : 'predicate));
# 1190 "mysql.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'bit_expr)) in
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : 'not)) in
            let _4 = (let data = parseState.GetInput(4) in (Microsoft.FSharp.Core.Operators.unbox data : 'bit_expr)) in
            let _6 = (let data = parseState.GetInput(6) in (Microsoft.FSharp.Core.Operators.unbox data : 'predicate)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 563 "mysql.yy"
                                                                                  
                                 AbSyn.Expr.Temp
                                 
                   )
# 563 "mysql.yy"
                 : 'predicate));
# 1206 "mysql.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'bit_expr)) in
            let _4 = (let data = parseState.GetInput(4) in (Microsoft.FSharp.Core.Operators.unbox data : 'bit_expr)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 566 "mysql.yy"
                                                                    
                                 AbSyn.Expr.Temp
                                 
                   )
# 566 "mysql.yy"
                 : 'predicate));
# 1220 "mysql.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'bit_expr)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 573 "mysql.yy"
                                         
                                 _1
                                 
                   )
# 573 "mysql.yy"
                 : 'predicate));
# 1233 "mysql.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'bit_expr)) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : 'bit_expr)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 579 "mysql.yy"
                                                                      
                                 AbSyn.Expr.Temp
                                 
                   )
# 579 "mysql.yy"
                 : 'bit_expr));
# 1247 "mysql.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'bit_expr)) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : 'bit_expr)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 582 "mysql.yy"
                                                                        
                                AbSyn.Expr.Temp
                                 
                   )
# 582 "mysql.yy"
                 : 'bit_expr));
# 1261 "mysql.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'bit_expr)) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : 'bit_expr)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 585 "mysql.yy"
                                                                                    
                                AbSyn.Expr.Temp
                                 
                   )
# 585 "mysql.yy"
                 : 'bit_expr));
# 1275 "mysql.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'bit_expr)) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : 'bit_expr)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 588 "mysql.yy"
                                                                                      
                                AbSyn.Expr.Temp
                                 
                   )
# 588 "mysql.yy"
                 : 'bit_expr));
# 1289 "mysql.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'bit_expr)) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : 'bit_expr)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 591 "mysql.yy"
                                                                        
                                AbSyn.Expr.Temp
                                 
                   )
# 591 "mysql.yy"
                 : 'bit_expr));
# 1303 "mysql.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'bit_expr)) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : 'bit_expr)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 594 "mysql.yy"
                                                                          
                                AbSyn.Expr.Temp
                                 
                   )
# 594 "mysql.yy"
                 : 'bit_expr));
# 1317 "mysql.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'bit_expr)) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : 'bit_expr)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 599 "mysql.yy"
                                                                          
                                 AbSyn.Expr.Temp
                                 
                   )
# 599 "mysql.yy"
                 : 'bit_expr));
# 1331 "mysql.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'bit_expr)) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : 'bit_expr)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 602 "mysql.yy"
                                                                      
                                 AbSyn.Expr.Temp
                                 
                   )
# 602 "mysql.yy"
                 : 'bit_expr));
# 1345 "mysql.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'bit_expr)) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : 'bit_expr)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 605 "mysql.yy"
                                                                        
                                 AbSyn.Expr.Temp
                                 
                   )
# 605 "mysql.yy"
                 : 'bit_expr));
# 1359 "mysql.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'bit_expr)) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : 'bit_expr)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 608 "mysql.yy"
                                                                              
                                 AbSyn.Expr.Temp
                                 
                   )
# 608 "mysql.yy"
                 : 'bit_expr));
# 1373 "mysql.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'bit_expr)) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : 'bit_expr)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 611 "mysql.yy"
                                                                          
                                 AbSyn.Expr.Temp
                                 
                   )
# 611 "mysql.yy"
                 : 'bit_expr));
# 1387 "mysql.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'bit_expr)) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : 'bit_expr)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 614 "mysql.yy"
                                                        
                                 AbSyn.Expr.Temp
                                 
                   )
# 614 "mysql.yy"
                 : 'bit_expr));
# 1401 "mysql.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'simple_expr)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 617 "mysql.yy"
                                            
                                 _1
                                 
                   )
# 617 "mysql.yy"
                 : 'bit_expr));
# 1414 "mysql.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 622 "mysql.yy"
                                              
                   )
# 622 "mysql.yy"
                 : 'op_or));
# 1424 "mysql.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 623 "mysql.yy"
                                              
                   )
# 623 "mysql.yy"
                 : 'op_or));
# 1434 "mysql.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 627 "mysql.yy"
                                              
                   )
# 627 "mysql.yy"
                 : 'op_and));
# 1444 "mysql.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 628 "mysql.yy"
                                              
                   )
# 628 "mysql.yy"
                 : 'op_and));
# 1454 "mysql.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 632 "mysql.yy"
                                              
                   )
# 632 "mysql.yy"
                 : 'not));
# 1464 "mysql.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 633 "mysql.yy"
                                              
                   )
# 633 "mysql.yy"
                 : 'not));
# 1474 "mysql.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 637 "mysql.yy"
                                           "" 
                   )
# 637 "mysql.yy"
                 : 'comp_op));
# 1484 "mysql.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 638 "mysql.yy"
                                           "" 
                   )
# 638 "mysql.yy"
                 : 'comp_op));
# 1494 "mysql.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 639 "mysql.yy"
                                           "" 
                   )
# 639 "mysql.yy"
                 : 'comp_op));
# 1504 "mysql.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 640 "mysql.yy"
                                           "" 
                   )
# 640 "mysql.yy"
                 : 'comp_op));
# 1514 "mysql.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 641 "mysql.yy"
                                           "" 
                   )
# 641 "mysql.yy"
                 : 'comp_op));
# 1524 "mysql.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 642 "mysql.yy"
                                           "" 
                   )
# 642 "mysql.yy"
                 : 'comp_op));
# 1534 "mysql.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 643 "mysql.yy"
                                           "" 
                   )
# 643 "mysql.yy"
                 : 'comp_op));
# 1544 "mysql.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 647 "mysql.yy"
                                           "" 
                   )
# 647 "mysql.yy"
                 : 'all_or_any));
# 1554 "mysql.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 648 "mysql.yy"
                                           "" 
                   )
# 648 "mysql.yy"
                 : 'all_or_any));
# 1564 "mysql.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'simple_ident)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 652 "mysql.yy"
                                                               _1 
                   )
# 652 "mysql.yy"
                 : 'simple_expr));
# 1575 "mysql.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'literal)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 658 "mysql.yy"
                                                               _1 
                   )
# 658 "mysql.yy"
                 : 'simple_expr));
# 1586 "mysql.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : 'simple_expr)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 664 "mysql.yy"
                                                                  AbSyn.Expr.Temp 
                   )
# 664 "mysql.yy"
                 : 'simple_expr));
# 1597 "mysql.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : 'simple_expr)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 665 "mysql.yy"
                                                                     AbSyn.Expr.Temp 
                   )
# 665 "mysql.yy"
                 : 'simple_expr));
# 1608 "mysql.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : 'simple_expr)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 666 "mysql.yy"
                                                                   AbSyn.Expr.Temp 
                   )
# 666 "mysql.yy"
                 : 'simple_expr));
# 1619 "mysql.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : 'simple_expr)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 667 "mysql.yy"
                                                                  AbSyn.Expr.Temp 
                   )
# 667 "mysql.yy"
                 : 'simple_expr));
# 1630 "mysql.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'text_literal)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 687 "mysql.yy"
                                                       _1 
                   )
# 687 "mysql.yy"
                 : 'literal));
# 1641 "mysql.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'num_literal)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 688 "mysql.yy"
                                                       _1 
                   )
# 688 "mysql.yy"
                 : 'literal));
# 1652 "mysql.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 690 "mysql.yy"
                                                       AbSyn.Expr.Temp 
                   )
# 690 "mysql.yy"
                 : 'literal));
# 1662 "mysql.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 691 "mysql.yy"
                                              
                                 AbSyn.Expr.Temp
                                 //$$= NEW_PTN Item_int(@$, NAME_STRING("FALSE"), 0, 1);
                               
                   )
# 691 "mysql.yy"
                 : 'literal));
# 1675 "mysql.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 695 "mysql.yy"
                                         
                             AbSyn.Expr.Temp
                                 
                   )
# 695 "mysql.yy"
                 : 'literal));
# 1687 "mysql.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : string)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 698 "mysql.yy"
                                        
                             AbSyn.Expr.Temp
                                 //$$= NEW_PTN Item_hex_string(@$, _1);
                                 
                   )
# 698 "mysql.yy"
                 : 'literal));
# 1701 "mysql.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : string)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 702 "mysql.yy"
                                        
                             AbSyn.Expr.Temp
                                 //$$= NEW_PTN Item_bin_string(@$, _1);
                                 
                   )
# 702 "mysql.yy"
                 : 'literal));
# 1715 "mysql.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : string)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 711 "mysql.yy"
                                                                   AbSyn.Expr.NodeType ("str",_1) 
                   )
# 711 "mysql.yy"
                 : 'text_literal));
# 1726 "mysql.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : string)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 718 "mysql.yy"
                                                   AbSyn.Expr.Temp 
                   )
# 718 "mysql.yy"
                 : 'num_literal));
# 1737 "mysql.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : string)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 728 "mysql.yy"
                                 
                             AbSyn.Expr.Node _1
                             
                   )
# 728 "mysql.yy"
                 : 'ident));
# 1750 "mysql.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'ident)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 732 "mysql.yy"
                                                   _1 
                   )
# 732 "mysql.yy"
                 : 'simple_ident));
# 1761 "mysql.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'simple_ident_q)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 733 "mysql.yy"
                                                   _1 
                   )
# 733 "mysql.yy"
                 : 'simple_ident));
# 1772 "mysql.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'ident)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 736 "mysql.yy"
                                                   AbSyn.Expr.Temp 
                   )
# 736 "mysql.yy"
                 : 'simple_ident_nospvar));
# 1783 "mysql.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'simple_ident_q)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 737 "mysql.yy"
                                                   AbSyn.Expr.Temp 
                   )
# 737 "mysql.yy"
                 : 'simple_ident_nospvar));
# 1794 "mysql.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'ident)) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : 'ident)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 740 "mysql.yy"
                                                                   AbSyn.Expr.Temp 
                   )
# 740 "mysql.yy"
                 : 'simple_ident_q));
# 1806 "mysql.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'ident)) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : 'ident)) in
            let _5 = (let data = parseState.GetInput(5) in (Microsoft.FSharp.Core.Operators.unbox data : 'ident)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 741 "mysql.yy"
                                                                   AbSyn.Expr.Temp 
                   )
# 741 "mysql.yy"
                 : 'simple_ident_q));
# 1819 "mysql.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'ident)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 744 "mysql.yy"
                                                      
                                 _1
                                 //$$= NEW_PTN PTI_table_wild(@$, NULL, _1.str);
                                 
                   )
# 744 "mysql.yy"
                 : 'table_wild));
# 1833 "mysql.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'ident)) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : 'ident)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 748 "mysql.yy"
                                                                   
                                 _1
                                 //$$= NEW_PTN PTI_table_wild(@$, _1.str, _3.str);
                                 
                   )
# 748 "mysql.yy"
                 : 'table_wild));
|]
# 1849 "mysql.fs"
let tables () : Microsoft.FSharp.Text.Parsing.Tables<_> = 
  { reductions= _fsyacc_reductions ();
    endOfInputTag = _fsyacc_endOfInputTag;
    tagOfToken = tagOfToken;
    dataOfToken = _fsyacc_dataOfToken; 
    actionTableElements = _fsyacc_actionTableElements;
    actionTableRowOffsets = _fsyacc_actionTableRowOffsets;
    stateToProdIdxsTableElements = _fsyacc_stateToProdIdxsTableElements;
    stateToProdIdxsTableRowOffsets = _fsyacc_stateToProdIdxsTableRowOffsets;
    reductionSymbolCounts = _fsyacc_reductionSymbolCounts;
    immediateActions = _fsyacc_immediateActions;
    gotos = _fsyacc_gotos;
    sparseGotoTableRowOffsets = _fsyacc_sparseGotoTableRowOffsets;
    tagOfErrorTerminal = _fsyacc_tagOfErrorTerminal;
    parseError = (fun (ctxt:Microsoft.FSharp.Text.Parsing.ParseErrorContext<_>) -> 
                              match parse_error_rich with 
                              | Some f -> f ctxt
                              | None -> parse_error ctxt.Message);
    numTerminals = 58;
    productionToNonTerminalTable = _fsyacc_productionToNonTerminalTable  }
let engine lexer lexbuf startState = (tables ()).Interpret(lexer, lexbuf, startState)
let start_entry lexer lexbuf : AbSyn.Qs list =
    Microsoft.FSharp.Core.Operators.unbox ((tables ()).Interpret(lexer, lexbuf, 0))
