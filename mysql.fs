// Implementation file for parser generated by fsyacc
module Parser
#nowarn "64";; // turn off warnings that type variables used in production annotations are instantiated to concrete type
open Microsoft.FSharp.Text.Lexing
open Microsoft.FSharp.Text.Parsing.ParseHelpers
# 1 "mysql.yy"

//AbSyn
module AbSyn =
    type Q_Select =
        | SelectNull
        | SelectOptions of Option<string>
        | SelectItems of (string * string) list
    type Qs =
        | Select of Q_Select list

# 17 "mysql.fs"
// This type is the type of tokens accepted by the parser
type token = 
  | VAL_FALSE
  | VAL_TRUE
  | VAL_NULL
  | VAL_LITERAL of (string)
  | VAL_NUM of (string)
  | VAL_ID of (string)
  | KEY_IS
  | KEY_AS
  | KEY_SELECT
  | OP_NOT
  | OP_OR
  | OP_XOR
  | OP_AND
  | OP_TILDE
  | OP_PLUS
  | OP_MINUS
  | OP_DIV
  | OP_TIMES
  | OP_PERC
  | OP_DOT
  | PAR_LPAR
  | PAR_RPAR
  | PAR_LRBACE
  | PAR_RBRACE
  | DELIM_SCOLON
  | DELIM_COMMA
  | END_OF_INPUT
// This type is used to give symbolic names to token indexes, useful for error messages
type tokenId = 
    | TOKEN_VAL_FALSE
    | TOKEN_VAL_TRUE
    | TOKEN_VAL_NULL
    | TOKEN_VAL_LITERAL
    | TOKEN_VAL_NUM
    | TOKEN_VAL_ID
    | TOKEN_KEY_IS
    | TOKEN_KEY_AS
    | TOKEN_KEY_SELECT
    | TOKEN_OP_NOT
    | TOKEN_OP_OR
    | TOKEN_OP_XOR
    | TOKEN_OP_AND
    | TOKEN_OP_TILDE
    | TOKEN_OP_PLUS
    | TOKEN_OP_MINUS
    | TOKEN_OP_DIV
    | TOKEN_OP_TIMES
    | TOKEN_OP_PERC
    | TOKEN_OP_DOT
    | TOKEN_PAR_LPAR
    | TOKEN_PAR_RPAR
    | TOKEN_PAR_LRBACE
    | TOKEN_PAR_RBRACE
    | TOKEN_DELIM_SCOLON
    | TOKEN_DELIM_COMMA
    | TOKEN_END_OF_INPUT
    | TOKEN_end_of_input
    | TOKEN_error
// This type is used to give symbolic names to token indexes, useful for error messages
type nonTerminalId = 
    | NONTERM__startstart_entry
    | NONTERM_start_entry
    | NONTERM_sql_statement
    | NONTERM_opt_end_of_input
    | NONTERM_simple_statement_or_begin
    | NONTERM_simple_statement
    | NONTERM_select_stmt
    | NONTERM_query_expression
    | NONTERM_query_expression_body
    | NONTERM_query_primary
    | NONTERM_query_specification
    | NONTERM_select_options
    | NONTERM_select_item_list
    | NONTERM_select_item
    | NONTERM_select_alias
    | NONTERM_expr
    | NONTERM_ident
    | NONTERM_table_wild

// This function maps tokens to integer indexes
let tagOfToken (t:token) = 
  match t with
  | VAL_FALSE  -> 0 
  | VAL_TRUE  -> 1 
  | VAL_NULL  -> 2 
  | VAL_LITERAL _ -> 3 
  | VAL_NUM _ -> 4 
  | VAL_ID _ -> 5 
  | KEY_IS  -> 6 
  | KEY_AS  -> 7 
  | KEY_SELECT  -> 8 
  | OP_NOT  -> 9 
  | OP_OR  -> 10 
  | OP_XOR  -> 11 
  | OP_AND  -> 12 
  | OP_TILDE  -> 13 
  | OP_PLUS  -> 14 
  | OP_MINUS  -> 15 
  | OP_DIV  -> 16 
  | OP_TIMES  -> 17 
  | OP_PERC  -> 18 
  | OP_DOT  -> 19 
  | PAR_LPAR  -> 20 
  | PAR_RPAR  -> 21 
  | PAR_LRBACE  -> 22 
  | PAR_RBRACE  -> 23 
  | DELIM_SCOLON  -> 24 
  | DELIM_COMMA  -> 25 
  | END_OF_INPUT  -> 26 

// This function maps integer indexes to symbolic token ids
let tokenTagToTokenId (tokenIdx:int) = 
  match tokenIdx with
  | 0 -> TOKEN_VAL_FALSE 
  | 1 -> TOKEN_VAL_TRUE 
  | 2 -> TOKEN_VAL_NULL 
  | 3 -> TOKEN_VAL_LITERAL 
  | 4 -> TOKEN_VAL_NUM 
  | 5 -> TOKEN_VAL_ID 
  | 6 -> TOKEN_KEY_IS 
  | 7 -> TOKEN_KEY_AS 
  | 8 -> TOKEN_KEY_SELECT 
  | 9 -> TOKEN_OP_NOT 
  | 10 -> TOKEN_OP_OR 
  | 11 -> TOKEN_OP_XOR 
  | 12 -> TOKEN_OP_AND 
  | 13 -> TOKEN_OP_TILDE 
  | 14 -> TOKEN_OP_PLUS 
  | 15 -> TOKEN_OP_MINUS 
  | 16 -> TOKEN_OP_DIV 
  | 17 -> TOKEN_OP_TIMES 
  | 18 -> TOKEN_OP_PERC 
  | 19 -> TOKEN_OP_DOT 
  | 20 -> TOKEN_PAR_LPAR 
  | 21 -> TOKEN_PAR_RPAR 
  | 22 -> TOKEN_PAR_LRBACE 
  | 23 -> TOKEN_PAR_RBRACE 
  | 24 -> TOKEN_DELIM_SCOLON 
  | 25 -> TOKEN_DELIM_COMMA 
  | 26 -> TOKEN_END_OF_INPUT 
  | 29 -> TOKEN_end_of_input
  | 27 -> TOKEN_error
  | _ -> failwith "tokenTagToTokenId: bad token"

/// This function maps production indexes returned in syntax errors to strings representing the non terminal that would be produced by that production
let prodIdxToNonTerminal (prodIdx:int) = 
  match prodIdx with
    | 0 -> NONTERM__startstart_entry 
    | 1 -> NONTERM_start_entry 
    | 2 -> NONTERM_sql_statement 
    | 3 -> NONTERM_sql_statement 
    | 4 -> NONTERM_sql_statement 
    | 5 -> NONTERM_opt_end_of_input 
    | 6 -> NONTERM_opt_end_of_input 
    | 7 -> NONTERM_simple_statement_or_begin 
    | 8 -> NONTERM_simple_statement 
    | 9 -> NONTERM_select_stmt 
    | 10 -> NONTERM_query_expression 
    | 11 -> NONTERM_query_expression_body 
    | 12 -> NONTERM_query_primary 
    | 13 -> NONTERM_query_specification 
    | 14 -> NONTERM_select_options 
    | 15 -> NONTERM_select_item_list 
    | 16 -> NONTERM_select_item_list 
    | 17 -> NONTERM_select_item_list 
    | 18 -> NONTERM_select_item 
    | 19 -> NONTERM_select_item 
    | 20 -> NONTERM_select_alias 
    | 21 -> NONTERM_select_alias 
    | 22 -> NONTERM_select_alias 
    | 23 -> NONTERM_select_alias 
    | 24 -> NONTERM_select_alias 
    | 25 -> NONTERM_expr 
    | 26 -> NONTERM_expr 
    | 27 -> NONTERM_ident 
    | 28 -> NONTERM_table_wild 
    | 29 -> NONTERM_table_wild 
    | _ -> failwith "prodIdxToNonTerminal: bad production index"

let _fsyacc_endOfInputTag = 29 
let _fsyacc_tagOfErrorTerminal = 27

// This function gets the name of a token as a string
let token_to_string (t:token) = 
  match t with 
  | VAL_FALSE  -> "VAL_FALSE" 
  | VAL_TRUE  -> "VAL_TRUE" 
  | VAL_NULL  -> "VAL_NULL" 
  | VAL_LITERAL _ -> "VAL_LITERAL" 
  | VAL_NUM _ -> "VAL_NUM" 
  | VAL_ID _ -> "VAL_ID" 
  | KEY_IS  -> "KEY_IS" 
  | KEY_AS  -> "KEY_AS" 
  | KEY_SELECT  -> "KEY_SELECT" 
  | OP_NOT  -> "OP_NOT" 
  | OP_OR  -> "OP_OR" 
  | OP_XOR  -> "OP_XOR" 
  | OP_AND  -> "OP_AND" 
  | OP_TILDE  -> "OP_TILDE" 
  | OP_PLUS  -> "OP_PLUS" 
  | OP_MINUS  -> "OP_MINUS" 
  | OP_DIV  -> "OP_DIV" 
  | OP_TIMES  -> "OP_TIMES" 
  | OP_PERC  -> "OP_PERC" 
  | OP_DOT  -> "OP_DOT" 
  | PAR_LPAR  -> "PAR_LPAR" 
  | PAR_RPAR  -> "PAR_RPAR" 
  | PAR_LRBACE  -> "PAR_LRBACE" 
  | PAR_RBRACE  -> "PAR_RBRACE" 
  | DELIM_SCOLON  -> "DELIM_SCOLON" 
  | DELIM_COMMA  -> "DELIM_COMMA" 
  | END_OF_INPUT  -> "END_OF_INPUT" 

// This function gets the data carried by a token as an object
let _fsyacc_dataOfToken (t:token) = 
  match t with 
  | VAL_FALSE  -> (null : System.Object) 
  | VAL_TRUE  -> (null : System.Object) 
  | VAL_NULL  -> (null : System.Object) 
  | VAL_LITERAL _fsyacc_x -> Microsoft.FSharp.Core.Operators.box _fsyacc_x 
  | VAL_NUM _fsyacc_x -> Microsoft.FSharp.Core.Operators.box _fsyacc_x 
  | VAL_ID _fsyacc_x -> Microsoft.FSharp.Core.Operators.box _fsyacc_x 
  | KEY_IS  -> (null : System.Object) 
  | KEY_AS  -> (null : System.Object) 
  | KEY_SELECT  -> (null : System.Object) 
  | OP_NOT  -> (null : System.Object) 
  | OP_OR  -> (null : System.Object) 
  | OP_XOR  -> (null : System.Object) 
  | OP_AND  -> (null : System.Object) 
  | OP_TILDE  -> (null : System.Object) 
  | OP_PLUS  -> (null : System.Object) 
  | OP_MINUS  -> (null : System.Object) 
  | OP_DIV  -> (null : System.Object) 
  | OP_TIMES  -> (null : System.Object) 
  | OP_PERC  -> (null : System.Object) 
  | OP_DOT  -> (null : System.Object) 
  | PAR_LPAR  -> (null : System.Object) 
  | PAR_RPAR  -> (null : System.Object) 
  | PAR_LRBACE  -> (null : System.Object) 
  | PAR_RBRACE  -> (null : System.Object) 
  | DELIM_SCOLON  -> (null : System.Object) 
  | DELIM_COMMA  -> (null : System.Object) 
  | END_OF_INPUT  -> (null : System.Object) 
let _fsyacc_gotos = [| 0us; 65535us; 1us; 65535us; 0us; 1us; 1us; 65535us; 0us; 2us; 1us; 65535us; 4us; 5us; 1us; 65535us; 0us; 4us; 1us; 65535us; 0us; 8us; 1us; 65535us; 0us; 9us; 1us; 65535us; 0us; 10us; 1us; 65535us; 0us; 11us; 1us; 65535us; 0us; 12us; 1us; 65535us; 0us; 13us; 1us; 65535us; 14us; 15us; 1us; 65535us; 15us; 16us; 2us; 65535us; 15us; 19us; 17us; 18us; 1us; 65535us; 22us; 23us; 2us; 65535us; 15us; 22us; 17us; 22us; 5us; 65535us; 15us; 34us; 17us; 34us; 22us; 27us; 24us; 25us; 35us; 37us; 2us; 65535us; 15us; 21us; 17us; 21us; |]
let _fsyacc_sparseGotoTableRowOffsets = [|0us; 1us; 3us; 5us; 7us; 9us; 11us; 13us; 15us; 17us; 19us; 21us; 23us; 25us; 28us; 30us; 33us; 39us; |]
let _fsyacc_stateToProdIdxsTableElements = [| 1us; 0us; 1us; 0us; 1us; 1us; 1us; 2us; 2us; 3us; 4us; 1us; 3us; 1us; 3us; 2us; 4us; 6us; 1us; 7us; 1us; 8us; 1us; 9us; 1us; 10us; 1us; 11us; 1us; 12us; 1us; 13us; 1us; 13us; 2us; 13us; 15us; 1us; 15us; 1us; 15us; 1us; 16us; 1us; 17us; 1us; 18us; 1us; 19us; 1us; 19us; 2us; 21us; 22us; 1us; 21us; 1us; 22us; 1us; 23us; 1us; 24us; 2us; 25us; 27us; 1us; 26us; 1us; 26us; 1us; 26us; 1us; 27us; 2us; 28us; 29us; 2us; 28us; 29us; 1us; 28us; 1us; 29us; 1us; 29us; 1us; 29us; |]
let _fsyacc_stateToProdIdxsTableRowOffsets = [|0us; 2us; 4us; 6us; 8us; 11us; 13us; 15us; 18us; 20us; 22us; 24us; 26us; 28us; 30us; 32us; 34us; 37us; 39us; 41us; 43us; 45us; 47us; 49us; 51us; 54us; 56us; 58us; 60us; 62us; 65us; 67us; 69us; 71us; 73us; 76us; 79us; 81us; 83us; 85us; |]
let _fsyacc_action_rows = 40
let _fsyacc_actionTableElements = [|2us; 32768us; 8us; 14us; 26us; 3us; 0us; 49152us; 0us; 16385us; 0us; 16386us; 1us; 16389us; 26us; 7us; 1us; 32768us; 24us; 6us; 0us; 16387us; 1us; 16388us; 24us; 16390us; 0us; 16391us; 0us; 16392us; 0us; 16393us; 0us; 16394us; 0us; 16395us; 0us; 16396us; 0us; 16398us; 3us; 32768us; 4us; 30us; 5us; 29us; 17us; 20us; 1us; 16397us; 25us; 17us; 2us; 32768us; 4us; 30us; 5us; 29us; 0us; 16399us; 0us; 16400us; 0us; 16401us; 0us; 16402us; 3us; 16404us; 3us; 28us; 5us; 33us; 7us; 24us; 0us; 16403us; 2us; 32768us; 3us; 26us; 5us; 33us; 0us; 16405us; 0us; 16406us; 0us; 16407us; 0us; 16408us; 1us; 16409us; 19us; 16411us; 1us; 32768us; 17us; 31us; 1us; 32768us; 4us; 32us; 0us; 16410us; 0us; 16411us; 1us; 32768us; 19us; 35us; 2us; 32768us; 5us; 33us; 17us; 36us; 0us; 16412us; 1us; 32768us; 19us; 38us; 1us; 32768us; 17us; 39us; 0us; 16413us; |]
let _fsyacc_actionTableRowOffsets = [|0us; 3us; 4us; 5us; 6us; 8us; 10us; 11us; 13us; 14us; 15us; 16us; 17us; 18us; 19us; 20us; 24us; 26us; 29us; 30us; 31us; 32us; 33us; 37us; 38us; 41us; 42us; 43us; 44us; 45us; 47us; 49us; 51us; 52us; 53us; 55us; 58us; 59us; 61us; 63us; |]
let _fsyacc_reductionSymbolCounts = [|1us; 1us; 1us; 3us; 2us; 0us; 1us; 1us; 1us; 1us; 1us; 1us; 1us; 3us; 0us; 3us; 1us; 1us; 1us; 2us; 0us; 2us; 2us; 1us; 1us; 1us; 3us; 1us; 3us; 5us; |]
let _fsyacc_productionToNonTerminalTable = [|0us; 1us; 2us; 2us; 2us; 3us; 3us; 4us; 5us; 6us; 7us; 8us; 9us; 10us; 11us; 12us; 12us; 12us; 13us; 13us; 14us; 14us; 14us; 14us; 14us; 15us; 15us; 16us; 17us; 17us; |]
let _fsyacc_immediateActions = [|65535us; 49152us; 16385us; 16386us; 65535us; 65535us; 16387us; 65535us; 16391us; 16392us; 16393us; 16394us; 16395us; 16396us; 65535us; 65535us; 65535us; 65535us; 16399us; 16400us; 16401us; 16402us; 65535us; 16403us; 65535us; 16405us; 16406us; 16407us; 16408us; 65535us; 65535us; 65535us; 16410us; 16411us; 65535us; 65535us; 16412us; 65535us; 65535us; 16413us; |]
let _fsyacc_reductions ()  =    [| 
# 274 "mysql.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : AbSyn.Qs list)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
                      raise (Microsoft.FSharp.Text.Parsing.Accept(Microsoft.FSharp.Core.Operators.box _1))
                   )
                 : '_startstart_entry));
# 283 "mysql.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'sql_statement)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 37 "mysql.yy"
                                               _1 
                   )
# 37 "mysql.yy"
                 : AbSyn.Qs list));
# 294 "mysql.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 74 "mysql.yy"
                                             
                                 //empty statement
                                 []
                                 //THD *thd= YYTHD;
                                 //if (!thd->is_bootstrap_system_thread() &&
                                 //    !thd->m_parser_state->has_comment())
                                 //{
                                 //  my_error(ER_EMPTY_QUERY, MYF(0));
                                 //  MYSQL_YYABORT;
                                 //}
                                 //thd->lex->sql_command= SQLCOM_EMPTY_QUERY;
                                 //YYLIP->found_semicolon= NULL;
                                 
                   )
# 74 "mysql.yy"
                 : 'sql_statement));
# 316 "mysql.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'simple_statement_or_begin)) in
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : 'opt_end_of_input)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 87 "mysql.yy"
                                                                                        
                                 [_1]
                                 //we found a wellformed query...
                                 
                   )
# 87 "mysql.yy"
                 : 'sql_statement));
# 331 "mysql.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'simple_statement_or_begin)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 91 "mysql.yy"
                                                                       
                                 [_1]
                                 //single query, not terminated.
                                 
                   )
# 91 "mysql.yy"
                 : 'sql_statement));
# 345 "mysql.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 98 "mysql.yy"
                                              
                   )
# 98 "mysql.yy"
                 : 'opt_end_of_input));
# 355 "mysql.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 99 "mysql.yy"
                                              
                   )
# 99 "mysql.yy"
                 : 'opt_end_of_input));
# 365 "mysql.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'simple_statement)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 103 "mysql.yy"
                                                  _1
                                 //*parse_tree= _1;
                                 
                   )
# 103 "mysql.yy"
                 : 'simple_statement_or_begin));
# 378 "mysql.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'select_stmt)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 186 "mysql.yy"
                                                     
                             _1
                            
                   )
# 186 "mysql.yy"
                 : 'simple_statement));
# 391 "mysql.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'query_expression)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 208 "mysql.yy"
                                                 
                                 _1
                                 //$$= NEW_PTN PT_select_stmt(_1);
                                 
                   )
# 208 "mysql.yy"
                 : 'select_stmt));
# 405 "mysql.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'query_expression_body)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 227 "mysql.yy"
                                
                               _1
                               
                   )
# 227 "mysql.yy"
                 : 'query_expression));
# 418 "mysql.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'query_primary)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 281 "mysql.yy"
                                              
                                 _1
                                 //$$= NEW_PTN PT_query_expression_body_primary(_1);
                                 
                   )
# 281 "mysql.yy"
                 : 'query_expression_body));
# 432 "mysql.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'query_specification)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 327 "mysql.yy"
                                                    
                                 _1
                                 // Bison doesn't get polymorphism.
                                // $$= _1;
                                 
                   )
# 327 "mysql.yy"
                 : 'query_primary));
# 447 "mysql.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : 'select_options)) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : 'select_item_list)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 344 "mysql.yy"
                                
                               //hertil
                               AbSyn.Qs.Select [
                                 AbSyn.Q_Select.SelectOptions _2  //Select options
                                 AbSyn.Q_Select.SelectItems _3
                                 ]
                               (*
                                 $$= NEW_PTN PT_query_specification(
                                                           _1,  // SELECT_SYM
                                                           _2,  // select_options
                                                           _3,  // select_item_list
                                                           _4,  // into_clause
                                                           _5,  // from
                                                           _6,  // where
                                                           _7,  // group
                                                           _8,  // having
                                                           _9); // windows
                                 *)
                                 
                   )
# 344 "mysql.yy"
                 : 'query_specification));
# 477 "mysql.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 387 "mysql.yy"
                                           
                                 None
                                 
                   )
# 387 "mysql.yy"
                 : 'select_options));
# 489 "mysql.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'select_item_list)) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : 'select_item)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 415 "mysql.yy"
                                                                         
                                 //if (_1 == NULL || _1->push_back(_3))
                                 //  MYSQL_YYABORT;
                                 //$$= _1;
                                 _1 @ [_3]
                                 
                   )
# 415 "mysql.yy"
                 : 'select_item_list));
# 506 "mysql.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'select_item)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 421 "mysql.yy"
                                            
                                 //$$= NEW_PTN PT_select_item_list;
                                 //if ($$ == NULL || $$->push_back(_1))
                                 //  MYSQL_YYABORT;
                                 [_1]
                                 
                   )
# 421 "mysql.yy"
                 : 'select_item_list));
# 522 "mysql.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 427 "mysql.yy"
                                         
                                 //Item *item= NEW_PTN Item_field(@$, NULL, NULL, "*");
                                 //$$= NEW_PTN PT_select_item_list;
                                 //if ($$ == NULL || $$->push_back(item))
                                 //  MYSQL_YYABORT;
                                 //hertil
                                 [("*","")]
                                 
                   )
# 427 "mysql.yy"
                 : 'select_item_list));
# 539 "mysql.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'table_wild)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 438 "mysql.yy"
                                           
                                 (_1,"")
                                 
                   )
# 438 "mysql.yy"
                 : 'select_item));
# 552 "mysql.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'expr)) in
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : 'select_alias)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 441 "mysql.yy"
                                                  
                                 //$$= NEW_PTN PTI_expr_with_alias(@$, _1, @1.cpp, _2);
                                 (_1,_2)
                                 
                   )
# 441 "mysql.yy"
                 : 'select_item));
# 567 "mysql.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 447 "mysql.yy"
                                               "" 
                   )
# 447 "mysql.yy"
                 : 'select_alias));
# 577 "mysql.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : 'ident)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 448 "mysql.yy"
                                                   _2 
                   )
# 448 "mysql.yy"
                 : 'select_alias));
# 588 "mysql.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : string)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 449 "mysql.yy"
                                                       _2 
                   )
# 449 "mysql.yy"
                 : 'select_alias));
# 599 "mysql.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'ident)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 450 "mysql.yy"
                                               _1 
                   )
# 450 "mysql.yy"
                 : 'select_alias));
# 610 "mysql.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : string)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 451 "mysql.yy"
                                                   _1 
                   )
# 451 "mysql.yy"
                 : 'select_alias));
# 621 "mysql.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : string)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 459 "mysql.yy"
                                    _1 
                   )
# 459 "mysql.yy"
                 : 'expr));
# 632 "mysql.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : string)) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : string)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 460 "mysql.yy"
                                                     
                             _1
                             
                   )
# 460 "mysql.yy"
                 : 'expr));
# 646 "mysql.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : string)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 469 "mysql.yy"
                                  _1 
                   )
# 469 "mysql.yy"
                 : 'ident));
# 657 "mysql.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'ident)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 471 "mysql.yy"
                                                      
                                 _1
                                 //$$= NEW_PTN PTI_table_wild(@$, NULL, _1.str);
                                 
                   )
# 471 "mysql.yy"
                 : 'table_wild));
# 671 "mysql.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'ident)) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : 'ident)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 475 "mysql.yy"
                                                                   
                                 _1
                                 //$$= NEW_PTN PTI_table_wild(@$, _1.str, _3.str);
                                 
                   )
# 475 "mysql.yy"
                 : 'table_wild));
|]
# 687 "mysql.fs"
let tables () : Microsoft.FSharp.Text.Parsing.Tables<_> = 
  { reductions= _fsyacc_reductions ();
    endOfInputTag = _fsyacc_endOfInputTag;
    tagOfToken = tagOfToken;
    dataOfToken = _fsyacc_dataOfToken; 
    actionTableElements = _fsyacc_actionTableElements;
    actionTableRowOffsets = _fsyacc_actionTableRowOffsets;
    stateToProdIdxsTableElements = _fsyacc_stateToProdIdxsTableElements;
    stateToProdIdxsTableRowOffsets = _fsyacc_stateToProdIdxsTableRowOffsets;
    reductionSymbolCounts = _fsyacc_reductionSymbolCounts;
    immediateActions = _fsyacc_immediateActions;
    gotos = _fsyacc_gotos;
    sparseGotoTableRowOffsets = _fsyacc_sparseGotoTableRowOffsets;
    tagOfErrorTerminal = _fsyacc_tagOfErrorTerminal;
    parseError = (fun (ctxt:Microsoft.FSharp.Text.Parsing.ParseErrorContext<_>) -> 
                              match parse_error_rich with 
                              | Some f -> f ctxt
                              | None -> parse_error ctxt.Message);
    numTerminals = 30;
    productionToNonTerminalTable = _fsyacc_productionToNonTerminalTable  }
let engine lexer lexbuf startState = (tables ()).Interpret(lexer, lexbuf, startState)
let start_entry lexer lexbuf : AbSyn.Qs list =
    Microsoft.FSharp.Core.Operators.unbox ((tables ()).Interpret(lexer, lexbuf, 0))
